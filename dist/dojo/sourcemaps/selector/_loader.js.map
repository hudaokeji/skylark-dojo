{"version":3,"sources":["selector/_loader.js"],"names":["define","has","require","module","isBrowser","load","name","req","onLoad","config","fullEngine","testDiv","document","createElement","add","querySelectorAll","innerHTML","length","e","id","parentRequire","loaded","charAt","substring","optionalLoad","engine"],"mappings":";;;;;;;AAAAA,QAAQ,SAAU,UAAU,UAAU,SAASC,EAAKC,QAAQC,QAE5D,aAEC,IAAwB,IAApBD,QAAQE,UAEX,OACOC,KAAM,SAAUC,EAAMC,EAAKC,EAAQC,GAC/BD,MAMb,IAYIE,EAZAC,EAAUC,SAASC,cAAc,OACrCZ,EAAIa,IAAI,eAAgBH,EAAQI,kBAChCd,EAAIa,IAAI,WAAY,WAEjB,IAIC,OAHAH,EAAQK,UAAY,uBAGqC,GAAlDL,EAAQI,iBAAiB,eAAeE,OAC/C,MAAMC,OAKV,OAICb,KAAM,SAASc,EAAIC,EAAeC,EAAQZ,GACzC,IAAIF,EAAML,QAOV,GAA6B,MAJ7BiB,EAAW,SADXA,EAAW,WAANA,EAAkBlB,EAAI,0BAA4B,OAASkB,IACrC,QAANA,EATK,SAUlB,UAANA,EAAiBlB,EAAI,cAVG,SAAjB,SAWD,QAANkB,EAAelB,EAAI,YAXK,SAAjB,SAYD,QAANkB,EAZO,UAYgBZ,EAAMa,IAAkBD,GAC3CG,OAAOH,EAAGF,OAAO,GAAU,CAChCE,EAAKA,EAAGI,UAAU,EAAEJ,EAAGF,OAAS,GAChC,IAAIO,GAAe,EAGpB,GAAGA,IAAiBvB,EAAI,sBAAwBS,GAC/C,OAAOW,EAAOX,GAGfH,GAAKY,GAAK,SAASM,GACT,UAANN,IACFT,EAAae,GAEdJ,EAAOI","file":"../../selector/_loader.js","sourcesContent":["define([\"../has\", \"require\",\"module\"],function(has, require,module){\r\n\r\n\"use strict\";\r\n\r\n\tif (require.isBrowser===false) { // for build,will be changed with better implementation. by LWF\r\n\r\n\t\treturn {\r\n\t        load: function (name, req, onLoad, config) {\r\n\t            onLoad();\r\n\t        }\t\t\t\r\n\t\t};\r\n\t}\r\n\r\n\r\nvar testDiv = document.createElement(\"div\");\r\nhas.add(\"dom-qsa2.1\", !!testDiv.querySelectorAll);\r\nhas.add(\"dom-qsa3\", function(){\r\n\t\t\t// test to see if we have a reasonable native selector engine available\r\n\t\t\ttry{\r\n\t\t\t\ttestDiv.innerHTML = \"<p class='TEST'></p>\"; // test kind of from sizzle\r\n\t\t\t\t// Safari can't handle uppercase or unicode characters when\r\n\t\t\t\t// in quirks mode, IE8 can't handle pseudos like :empty\r\n\t\t\t\treturn testDiv.querySelectorAll(\".TEST:empty\").length == 1;\r\n\t\t\t}catch(e){}\r\n\t\t});\r\n\r\nvar fullEngine;\r\nvar acme = \"./acme\", lite = \"./lite\";\r\nreturn {\r\n\t// summary:\r\n\t//\t\tThis module handles loading the appropriate selector engine for the given browser\r\n\r\n\tload: function(id, parentRequire, loaded, config){\r\n\t\tvar req = require;\r\n\t\t// here we implement the default logic for choosing a selector engine\r\n\t\tid = id == \"default\" ? has(\"config-selectorEngine\") || \"css3\" : id;\r\n\t\tid = id == \"css2\" || id == \"lite\" ? lite :\r\n\t\t\t\tid == \"css2.1\" ? has(\"dom-qsa2.1\") ? lite : acme :\r\n\t\t\t\tid == \"css3\" ? has(\"dom-qsa3\") ? lite : acme :\r\n\t\t\t\tid == \"acme\" ? acme : (req = parentRequire) && id;\r\n\t\tif(id.charAt(id.length-1) == '?'){\r\n\t\t\tid = id.substring(0,id.length - 1);\r\n\t\t\tvar optionalLoad = true;\r\n\t\t}\r\n\t\t// the query engine is optional, only load it if a native one is not available or existing one has not been loaded\r\n\t\tif(optionalLoad && (has(\"dom-compliant-qsa\") || fullEngine)){\r\n\t\t\treturn loaded(fullEngine);\r\n\t\t}\r\n\t\t// load the referenced selector engine\r\n\t\treq([id], function(engine){\r\n\t\t\tif(id != \"./lite\"){\r\n\t\t\t\tfullEngine = engine;\r\n\t\t\t}\r\n\t\t\tloaded(engine);\r\n\t\t});\r\n\t}\r\n};\r\n});\r\n"]}
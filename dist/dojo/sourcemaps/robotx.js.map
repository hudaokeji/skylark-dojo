{"version":3,"sources":["robotx.js"],"names":["define","require","doh","aspect","construct","style","kernel","lang","on","robot","has","win","experimental","urlLoaded","iframe","onIframeLoad","_updateDocument","contentWindow","ready","Infinity","setTimeout","resolve","config","debugHeight","mixin","setContext","document","window","doc","global","dojo","publish","subscribe","connectPublisher","initRobot","url","registerGroup","name","timeout","runTest","Deferred","emptyStyle","overflow","margin","borderWidth","height","width","set","documentElement","body","createElement","setAttribute","scrolling","scrollRoot","compatMode","consoleHeight","getElementById","offsetHeight","border","padding","clientHeight","src","undefined","attachEvent","place","attachIframe","waitForPageToLoad","submitActions"],"mappings":";;;;;;;AAAAA,QACC,UACA,WACA,WACA,kBACA,cACA,iBACA,eACA,OACA,UACA,UACA,kBACE,SAASC,QAASC,EAAKC,EAAQC,EAAWC,EAAOC,EAAQC,EAAMC,EAAIC,EAAOC,EAAKC,GAElFL,EAAOM,aAAa,eAUpB,IAOIC,EAPAC,EAAS,KAuDb,SAASC,IAKRN,EAAMO,kBAIHF,EAAOG,cAAchB,QACvBa,EAAOG,cAAchB,SAAS,cAAe,SAASiB,GACrDA,EAAMC,EAAAA,EAAU,WACfC,WAAW,WACVP,EAAUQ,SAAQ,IAChB,SAILR,EAAUQ,SAAQ,GAwEpB,OA9IAf,EAAOgB,OAAOC,YAAcjB,EAAOgB,OAAOC,aAAe,IA0EzDhB,EAAKiB,MAAMf,GACVO,gBAAiB,WAMhBV,EAAOmB,WAAWX,EAAOG,cAAeH,EAAOG,cAAcS,UAG7DjB,EAAMkB,OAASb,EAAOG,cACtBR,EAAMmB,IAAMd,EAAOG,cAAcS,SAGjC,IAAIf,EAAML,EAAOuB,OACdlB,EAAImB,OAENxB,EAAOyB,QAAUpB,EAAImB,KAAKC,QAC1BzB,EAAO0B,UAAYrB,EAAImB,KAAKE,UAC5B1B,EAAO2B,iBAAmBtB,EAAImB,KAAKG,mBAIrCC,UAAW,SAAoBC,GAQ9BjC,EAAIkC,cAAc,oBACjBC,KAAM,QAAUF,EAChBG,QAAS,IACTC,QAAS,WAMR,OAHA1B,EAAY,IAAIX,EAAIsC,SAzGxB,SAAsBL,GAOrBlC,SAAS,eAAgB,WACxB,IAAIwC,GACHC,SAAU,SACVC,OAAQ,MACRC,YAAa,MACbC,OAAQ,OACRC,MAAO,QAERzC,EAAM0C,IAAIrB,SAASsB,gBAAiBP,GACpCpC,EAAM0C,IAAIrB,SAASuB,KAAMR,IAIzB3B,EAASY,SAASwB,cAAc,WACzBC,aAAa,oBAAoB,QACxCrC,EAAOsC,UAAY1C,EAAI,MAAQ,MAAQ,OACvC,IAAI2C,EAAoC,cAAvB3B,SAAS4B,WAA6B5B,SAASuB,KAAOvB,SAASsB,gBAC5EO,GAAiB7B,SAAS8B,eAAe,gBAAkBC,cAAgB,EAC/EpD,EAAM0C,IAAIjC,GACT4C,OAAQ,WACRC,QAAS,MACThB,OAAQ,MACRG,MAAO,OACPD,OAAQU,EAAiBF,EAAWO,aAAeL,EAAe,KAAO,SAE1EzC,EAAO+C,IAAM1B,OAIa2B,IAAvBhD,EAAOiD,YACTjD,EAAOiD,YAAY,SAAUhD,GAE7BP,EAAGM,EAAQ,OAAQC,GAGpBX,EAAU4D,MAAMlD,EAAQH,EAAIsC,OAAQ,WAgElCgB,CAAa9B,GAENtB,MAKVqD,kBAAmB,SAAsBC,GAkBxC,OAJAtD,EAAY,IAAIX,EAAIsC,SAEpB2B,IAEOtD,KAKFJ","file":"../robotx.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"doh/main\",\r\n\t\"./aspect\",\r\n\t\"./dom-construct\",\r\n\t\"./dom-style\",\r\n\t\"./_base/kernel\",\r\n\t\"./_base/lang\",\r\n\t\"./on\",\r\n\t\"./robot\",\r\n\t\"./sniff\",\r\n\t\"./_base/window\"\r\n], function(require, doh, aspect, construct, style, kernel, lang, on, robot, has, win){\r\n\r\nkernel.experimental(\"dojo.robotx\");\r\n\r\n// module:\r\n//\t\tdojo.robotx\r\n// description:\r\n//\t\tloads an external app into an iframe and points dojo.doc to the iframe document, allowing the robot to control it\r\n//\t\tto use: set robotURL in djConfig to the URL you want to load\r\n//\t\tdojo.require this file\r\n\r\n// The iframe containing the external app\r\nvar iframe = null;\r\n\r\n// On IE6/7, a firebug console will appear.   Scrunch it a bit to leave room for the external test file.\r\nkernel.config.debugHeight = kernel.config.debugHeight || 200;\r\n\r\n\r\n// urlLoaded is a Deferred that will be resolved whenever the iframe passed to initRobot() finishes loading, or reloads\r\nvar urlLoaded;\r\n\r\nfunction attachIframe(url){\r\n\t// summary:\r\n\t//\t\tCreate iframe to load external app at specified url.   Iframe gets onload handler to  call onIframeLoad()\r\n\t//\t\twhen specified URL finishes loading, and also if the iframe loads a different URL in the future.\r\n\t// returns:\r\n\t//\t\tA Deferred that fires when everything has finished initializing\r\n\r\n\trequire([\"./domReady!\"], function(){\r\n\t\tvar emptyStyle = {\r\n\t\t\toverflow: \"hidden\",\r\n\t\t\tmargin: \"0px\",\r\n\t\t\tborderWidth: \"0px\",\r\n\t\t\theight: \"100%\",\r\n\t\t\twidth: \"100%\"\r\n\t\t};\r\n\t\tstyle.set(document.documentElement, emptyStyle);\r\n\t\tstyle.set(document.body, emptyStyle);\r\n\r\n\t\t// Create the iframe for the external document.   Put it above the firebug-lite div (if such a div exists).\r\n\t\t// console.log(\"creating iframe for external document\");\r\n\t\tiframe = document.createElement(\"iframe\");\r\n\t\tiframe.setAttribute(\"ALLOWTRANSPARENCY\",\"true\");\r\n\t\tiframe.scrolling = has(\"ie\") ? \"yes\" : \"auto\";\r\n\t\tvar scrollRoot = document.compatMode == \"BackCompat\" ? document.body : document.documentElement;\r\n\t\tvar consoleHeight = (document.getElementById(\"firebug\") || {}).offsetHeight || 0;\r\n\t\tstyle.set(iframe, {\r\n\t\t\tborder: \"0px none\",\r\n\t\t\tpadding: \"0px\",\r\n\t\t\tmargin: \"0px\",\r\n\t\t\twidth: \"100%\",\r\n\t\t\theight: consoleHeight ? (scrollRoot.clientHeight - consoleHeight)+\"px\" : \"100%\"\r\n\t\t});\r\n\t\tiframe.src = url;\r\n\r\n\t\t// Code to handle load event on iframe.  Seems like this should happen before setting iframe src on line above?\r\n\t\t// Also, can't we use on() in all cases, even for old IE?\r\n\t\tif(iframe.attachEvent !== undefined){\r\n\t\t\tiframe.attachEvent(\"onload\", onIframeLoad);\r\n\t\t}else{\r\n\t\t\ton(iframe, \"load\", onIframeLoad);\r\n\t\t}\r\n\r\n\t\tconstruct.place(iframe, win.body(), \"first\");\r\n\t});\r\n}\r\n\r\nfunction onIframeLoad(){\r\n\t// summary:\r\n\t//\t\tLoad handler when iframe specified to initRobot() finishes loading, or when it reloads.\r\n\t//\t\tIt resolves the urlLoaded Deferred to make the rests of the tests runs.\r\n\r\n\trobot._updateDocument();\r\n\r\n\t// If dojo is present in the test case, then at least make a best effort to wait for it to load.\r\n\t// The test must handle other race conditions like initial data queries or asynchronous parses by itself.\r\n\tif(iframe.contentWindow.require){\r\n\t\tiframe.contentWindow.require([\"dojo/ready\"], function(ready){\r\n\t\t\tready(Infinity, function(){\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\turlLoaded.resolve(true);\r\n\t\t\t\t}, 500);\t// 500ms fudge factor; otherwise focus doesn't work on IE8, see ValidationTextBox.js, TimeTextBox.js, etc.\r\n\t\t\t});\r\n\t\t});\r\n\t}else{\r\n\t\turlLoaded.resolve(true);\r\n\t}\r\n}\r\n\r\nlang.mixin(robot, {\r\n\t_updateDocument: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled every time a new page is loaded into the iframe, to setup variables\r\n\t\t//\t\tPoint dojo.global, dojo.publish, etc. to refer to iframe.\r\n\t\t//\t\tRemove for 2.0?\r\n\r\n\t\tkernel.setContext(iframe.contentWindow, iframe.contentWindow.document);\r\n\r\n\t\t// Also set pointers inside robot, for easy access via AMD (where there is no dojo variable)\r\n\t\trobot.window = iframe.contentWindow;\r\n\t\trobot.doc = iframe.contentWindow.document;\r\n\r\n\t\t// TODO: shouldn't this wait until dojo has finished loading in the iframe?  See require code in onIframeLoad().\r\n\t\tvar win = kernel.global;\r\n\t\tif(win.dojo){\r\n\t\t\t// allow the tests to subscribe to topics published by the iframe\r\n\t\t\tkernel.publish = win.dojo.publish;\r\n\t\t\tkernel.subscribe = win.dojo.subscribe;\r\n\t\t\tkernel.connectPublisher = win.dojo.connectPublisher;\r\n\t\t}\r\n\t},\r\n\r\n\tinitRobot: function(/*String*/ url){\r\n\t\t// summary:\r\n\t\t//\t\tOpens the application at the specified URL for testing, redirecting dojo to point to the application\r\n\t\t//\t\tenvironment instead of the test environment.\r\n\t\t// url:\r\n\t\t//\t\tURL to open. Any of the test's dojo.doc calls (e.g. dojo.byId()), and any dijit.registry calls\r\n\t\t//\t\t(e.g. dijit.byId()) will point to elements and widgets inside this application.\r\n\r\n\t\tdoh.registerGroup(\"initialize robot\", {\r\n\t\t\tname: \"load \" + url,\r\n\t\t\ttimeout: 100000,\t// could take more than 10s so setting to 100s\r\n\t\t\trunTest: function(){\r\n\t\t\t\t// Setup module level urlLoaded Deferred that will be resolved by onIframeLoad(), after the iframe\r\n\t\t\t\t// has finished loading\r\n\t\t\t\turlLoaded = new doh.Deferred();\r\n\t\t\t\tattachIframe(url);\r\n\r\n\t\t\t\treturn urlLoaded;\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\twaitForPageToLoad: function(/*Function*/ submitActions){\r\n\t\t// summary:\r\n\t\t//\t\tNotifies DOH that the doh.robot is about to make a page change in the application it is driving,\r\n\t\t//\t\treturning a doh.Deferred object the user should return in their runTest function as part of a DOH test.\r\n\t\t// example:\r\n\t\t// |\trunTest: function(){\r\n\t\t// |\t\treturn waitForPageLoad(function(){ doh.robot.keyPress(keys.ENTER, 500); });\r\n\t\t// |\t}\r\n\t\t// submitActions:\r\n\t\t//\t\tThe doh.robot will execute the actions the test passes into the submitActions argument (like clicking the submit button),\r\n\t\t//\t\texpecting these actions to create a page change (like a form submit).\r\n\t\t//\t\tAfter these actions execute and the resulting page loads, the next test will start.\r\n\r\n\t\t// Setup a new Deferred that onIframeLoad() will resolve when the iframe finishes loading\r\n\t\turlLoaded = new doh.Deferred();\r\n\r\n\t\tsubmitActions();\r\n\r\n\t\treturn urlLoaded;\r\n\t}\r\n\r\n});\r\n\r\nreturn robot;\r\n});\r\n"]}
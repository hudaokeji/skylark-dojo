{"version":3,"sources":["promise/all.js"],"names":["define","array","Deferred","when","some","objectOrArray","object","results","Array","keyLookup","key","Object","hasOwnProperty","call","push","length","resolve","deferred","promise","always","waiting","valueOrPromise","index","value","isFulfilled","reject"],"mappings":";;;;;;;AAAAA,QACC,iBACA,cACA,WACE,SAASC,EAAOC,EAAUC,GAC5B,aAKA,IAAIC,EAAOH,EAAMG,KAEjB,OAAO,SAAaC,GAgBnB,IAAIC,EAAQL,EAORM,EANDF,aAAyBG,MAC3BP,EAAQI,EACAA,GAA0C,iBAAlBA,IAChCC,EAASD,GAIV,IAAII,KACJ,GAAGH,EAAO,CAET,IAAI,IAAII,KADRT,KACeK,EACXK,OAAOC,eAAeC,KAAKP,EAAQI,KACrCD,EAAUK,KAAKJ,GACfT,EAAMa,KAAKR,EAAOI,KAGpBH,UACQN,IACRM,MAGD,IAAIN,IAAUA,EAAMc,OACnB,OAAO,IAAIb,GAAWc,QAAQT,GAG/B,IAAIU,EAAW,IAAIf,EACnBe,EAASC,QAAQC,OAAO,WACvBZ,EAAUE,EAAY,OAEvB,IAAIW,EAAUnB,EAAMc,OAepB,OAdAX,EAAKH,EAAO,SAASoB,EAAgBC,GAYpC,OAXIhB,GACHG,EAAUK,KAAKQ,GAEhBnB,EAAKkB,EAAgB,SAASE,GACzBN,EAASO,gBACZjB,EAAQE,EAAUa,IAAUC,EACX,KAAZH,GACJH,EAASD,QAAQT,KAGjBU,EAASQ,QACLR,EAASO,gBAEVP,EAASC","file":"../../promise/all.js","sourcesContent":["define([\r\n\t\"../_base/array\",\r\n\t\"../Deferred\",\r\n\t\"../when\"\r\n], function(array, Deferred, when){\r\n\t\"use strict\";\r\n\r\n\t// module:\r\n\t//\t\tdojo/promise/all\r\n\r\n\tvar some = array.some;\r\n\r\n\treturn function all(objectOrArray){\r\n\t\t// summary:\r\n\t\t//\t\tTakes multiple promises and returns a new promise that is fulfilled\r\n\t\t//\t\twhen all promises have been resolved or one has been rejected.\r\n\t\t// description:\r\n\t\t//\t\tTakes multiple promises and returns a new promise that is fulfilled\r\n\t\t//\t\twhen all promises have been resolved or one has been rejected. If one of\r\n\t\t//\t\tthe promises is rejected, the returned promise is also rejected. Canceling\r\n\t\t//\t\tthe returned promise will *not* cancel any passed promises.\r\n\t\t// objectOrArray: Object|Array?\r\n\t\t//\t\tThe promise will be fulfilled with a list of results if invoked with an\r\n\t\t//\t\tarray, or an object of results when passed an object (using the same\r\n\t\t//\t\tkeys). If passed neither an object or array it is resolved with an\r\n\t\t//\t\tundefined value.\r\n\t\t// returns: dojo/promise/Promise\r\n\r\n\t\tvar object, array;\r\n\t\tif(objectOrArray instanceof Array){\r\n\t\t\tarray = objectOrArray;\r\n\t\t}else if(objectOrArray && typeof objectOrArray === \"object\"){\r\n\t\t\tobject = objectOrArray;\r\n\t\t}\r\n\r\n\t\tvar results;\r\n\t\tvar keyLookup = [];\r\n\t\tif(object){\r\n\t\t\tarray = [];\r\n\t\t\tfor(var key in object){\r\n\t\t\t\tif(Object.hasOwnProperty.call(object, key)){\r\n\t\t\t\t\tkeyLookup.push(key);\r\n\t\t\t\t\tarray.push(object[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresults = {};\r\n\t\t}else if(array){\r\n\t\t\tresults = [];\r\n\t\t}\r\n\r\n\t\tif(!array || !array.length){\r\n\t\t\treturn new Deferred().resolve(results);\r\n\t\t}\r\n\r\n\t\tvar deferred = new Deferred();\r\n\t\tdeferred.promise.always(function(){\r\n\t\t\tresults = keyLookup = null;\r\n\t\t});\r\n\t\tvar waiting = array.length;\r\n\t\tsome(array, function(valueOrPromise, index){\r\n\t\t\tif(!object){\r\n\t\t\t\tkeyLookup.push(index);\r\n\t\t\t}\r\n\t\t\twhen(valueOrPromise, function(value){\r\n\t\t\t\tif(!deferred.isFulfilled()){\r\n\t\t\t\t\tresults[keyLookup[index]] = value;\r\n\t\t\t\t\tif(--waiting === 0){\r\n\t\t\t\t\t\tdeferred.resolve(results);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, deferred.reject);\r\n\t\t\treturn deferred.isFulfilled();\r\n\t\t});\r\n\t\treturn deferred.promise;\t// dojo/promise/Promise\r\n\t};\r\n});\r\n"]}
{"version":3,"sources":["promise/tracer.js"],"names":["define","lang","Promise","Evented","evented","emit","emitAsync","args","setTimeout","apply","prototype","trace","_toArray","arguments","this","then","value","concat","error","update","traceRejected","otherwise"],"mappings":";;;;;;;AAAAA,QACC,gBACA,YACA,cACE,SAASC,EAAMC,EAASC,GAC1B,aA4BA,IAAIC,EAAU,IAAID,EACdE,EAAOD,EAAQC,KAGnB,SAASC,EAAUC,GAClBC,WAAW,WACVH,EAAKI,MAAML,EAASG,IAClB,GA2CJ,OAhDAH,EAAQC,KAAO,KAQfH,EAAQQ,UAAUC,MAAQ,WAYzB,IAAIJ,EAAON,EAAKW,SAASC,WAMzB,OALAC,KAAKC,KACJ,SAASC,GAAQV,GAAW,WAAYU,GAAOC,OAAOV,KACtD,SAASW,GAAQZ,GAAW,WAAYY,GAAOD,OAAOV,KACtD,SAASY,GAASb,GAAW,WAAYa,GAAQF,OAAOV,MAElDO,MAGRZ,EAAQQ,UAAUU,cAAgB,WAYjC,IAAIb,EAAON,EAAKW,SAASC,WAIzB,OAHAC,KAAKO,UAAU,SAASH,GACvBZ,GAAW,WAAYY,GAAOD,OAAOV,MAE/BO,MAGDV","file":"../../promise/tracer.js","sourcesContent":["define([\r\n\t\"../_base/lang\",\r\n\t\"./Promise\",\r\n\t\"../Evented\"\r\n], function(lang, Promise, Evented){\r\n\t\"use strict\";\r\n\r\n\t// module:\r\n\t//\t\tdojo/promise/tracer\r\n\r\n\t/*=====\r\n\treturn {\r\n\t\t// summary:\r\n\t\t//\t\tTrace promise fulfillment.\r\n\t\t// description:\r\n\t\t//\t\tTrace promise fulfillment. Calling `.trace()` or `.traceError()` on a\r\n\t\t//\t\tpromise enables tracing. Will emit `resolved`, `rejected` or `progress`\r\n\t\t//\t\tevents.\r\n\r\n\t\ton: function(type, listener){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSubscribe to traces.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSee `dojo/Evented#on()`.\r\n\t\t\t// type: String\r\n\t\t\t//\t\t`resolved`, `rejected`, or `progress`\r\n\t\t\t// listener: Function\r\n\t\t\t//\t\tThe listener is passed the traced value and any arguments\r\n\t\t\t//\t\tthat were used with the `.trace()` call.\r\n\t\t}\r\n\t};\r\n\t=====*/\r\n\r\n\tvar evented = new Evented;\r\n\tvar emit = evented.emit;\r\n\tevented.emit = null;\r\n\t// Emit events asynchronously since they should not change the promise state.\r\n\tfunction emitAsync(args){\r\n\t\tsetTimeout(function(){\r\n\t\t\temit.apply(evented, args);\r\n\t\t}, 0);\r\n\t}\r\n\r\n\tPromise.prototype.trace = function(){\r\n\t\t// summary:\r\n\t\t//\t\tTrace the promise.\r\n\t\t// description:\r\n\t\t//\t\tTracing allows you to transparently log progress,\r\n\t\t//\t\tresolution and rejection of promises, without affecting the\r\n\t\t//\t\tpromise itself. Any arguments passed to `trace()` are\r\n\t\t//\t\temitted in trace events. See `dojo/promise/tracer` on how\r\n\t\t//\t\tto handle traces.\r\n\t\t// returns: dojo/promise/Promise\r\n\t\t//\t\tThe promise instance `trace()` is called on.\r\n\r\n\t\tvar args = lang._toArray(arguments);\r\n\t\tthis.then(\r\n\t\t\tfunction(value){ emitAsync([\"resolved\", value].concat(args)); },\r\n\t\t\tfunction(error){ emitAsync([\"rejected\", error].concat(args)); },\r\n\t\t\tfunction(update){ emitAsync([\"progress\", update].concat(args)); }\r\n\t\t);\r\n\t\treturn this;\r\n\t};\r\n\r\n\tPromise.prototype.traceRejected = function(){\r\n\t\t// summary:\r\n\t\t//\t\tTrace rejection of the promise.\r\n\t\t// description:\r\n\t\t//\t\tTracing allows you to transparently log progress,\r\n\t\t//\t\tresolution and rejection of promises, without affecting the\r\n\t\t//\t\tpromise itself. Any arguments passed to `trace()` are\r\n\t\t//\t\temitted in trace events. See `dojo/promise/tracer` on how\r\n\t\t//\t\tto handle traces.\r\n\t\t// returns: dojo/promise/Promise\r\n\t\t//\t\tThe promise instance `traceRejected()` is called on.\r\n\r\n\t\tvar args = lang._toArray(arguments);\r\n\t\tthis.otherwise(function(error){\r\n\t\t\temitAsync([\"rejected\", error].concat(args));\r\n\t\t});\r\n\t\treturn this;\r\n\t};\r\n\r\n\treturn evented;\r\n});\r\n"]}
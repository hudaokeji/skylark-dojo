{"version":3,"sources":["NodeList-traverse.js"],"names":["define","dquery","lang","array","NodeList","extend","_buildArrayFromCallback","callback","ary","i","this","length","items","call","concat","_getUniqueAsNodeList","nodes","node","nodeType","indexOf","push","_wrap","_NodeListCtor","_getUniqueNodeListWithParent","query","_filterResult","_stash","_getRelatedUniqueNodes","children","_toArray","childNodes","closest","root","parentNode","parent","parents","pary","siblings","next","nextSibling","nextAll","prev","previousSibling","prevAll","andSelf","_parent","first","last","even","filter","item","odd"],"mappings":"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","file":"../NodeList-traverse.js","sourcesContent":["define([\"./query\", \"./_base/lang\", \"./_base/array\"], function(dquery, lang, array){\r\n\r\n// module:\r\n//\t\tdojo/NodeList-traverse\r\n\r\n/*=====\r\nreturn function(){\r\n\t// summary:\r\n\t//\t\tAdds chainable methods to dojo/query() / NodeList instances for traversing the DOM\r\n};\r\n=====*/\r\n\r\nvar NodeList = dquery.NodeList;\r\n\r\nlang.extend(NodeList, {\r\n\t_buildArrayFromCallback: function(/*Function*/ callback){\r\n\t\t// summary:\r\n\t\t//\t\tbuilds a new array of possibly differing size based on the input list.\r\n\t\t//\t\tSince the returned array is likely of different size than the input array,\r\n\t\t//\t\tthe array's map function cannot be used.\r\n\t\tvar ary = [];\r\n\t\tfor(var i = 0; i < this.length; i++){\r\n\t\t\tvar items = callback.call(this[i], this[i], ary);\r\n\t\t\tif(items){\r\n\t\t\t\tary = ary.concat(items);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ary;\t//Array\r\n\t},\r\n\r\n\t_getUniqueAsNodeList: function(/*Array*/ nodes){\r\n\t\t// summary:\r\n\t\t//\t\tgiven a list of nodes, make sure only unique\r\n\t\t//\t\telements are returned as our NodeList object.\r\n\t\t//\t\tDoes not call _stash().\r\n\t\tvar ary = [];\r\n\t\t//Using for loop for better speed.\r\n\t\tfor(var i = 0, node; node = nodes[i]; i++){\r\n\t\t\t//Should be a faster way to do this. dojo/query has a private\r\n\t\t\t//_zip function that may be inspirational, but there are pathways\r\n\t\t\t//in query that force nozip?\r\n\t\t\tif(node.nodeType == 1 && array.indexOf(ary, node) == -1){\r\n\t\t\t\tary.push(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._wrap(ary, null, this._NodeListCtor);\t // dojo/NodeList\r\n\t},\r\n\r\n\t_getUniqueNodeListWithParent: function(/*Array*/ nodes, /*String*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tgets unique element nodes, filters them further\r\n\t\t//\t\twith an optional query and then calls _stash to track parent NodeList.\r\n\t\tvar ary = this._getUniqueAsNodeList(nodes);\r\n\t\tary = (query ? dquery._filterResult(ary, query) : ary);\r\n\t\treturn ary._stash(this);  // dojo/NodeList\r\n\t},\r\n\r\n\t_getRelatedUniqueNodes: function(/*String?*/ query, /*Function*/ callback){\r\n\t\t// summary:\r\n\t\t//\t\tcycles over all the nodes and calls a callback\r\n\t\t//\t\tto collect nodes for a possible inclusion in a result.\r\n\t\t//\t\tThe callback will get two args: callback(node, ary),\r\n\t\t//\t\twhere ary is the array being used to collect the nodes.\r\n\t\treturn this._getUniqueNodeListWithParent(this._buildArrayFromCallback(callback), query);  // dojo/NodeList\r\n\t},\r\n\r\n\tchildren: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all immediate child elements for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the child elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tall immediate child elements for the nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".container\").children();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the four divs that are children of the container div.\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\tdojo.query(\".container\").children(\".red\");\r\n\t\t//\t\treturns the two divs that have the class \"red\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\treturn lang._toArray(node.childNodes);\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tclosest: function(/*String*/ query, /*String|DOMNode?*/ root){\r\n\t\t// summary:\r\n\t\t//\t\tReturns closest parent that matches query, including current node in this\r\n\t\t//\t\tdojo/NodeList if it matches the query.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// root:\r\n\t\t//\t\tIf specified, query is relative to \"root\" rather than document body.\r\n\t\t// returns:\r\n\t\t//\t\tthe closest parent that matches the query, including the current\r\n\t\t//\t\tnode in this dojo/NodeList if it matches the query.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t//\t|\t\t<div class=\"red\">Red One</div>\r\n\t\t//\t|\t\tSome Text\r\n\t\t//\t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t//\t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t//\t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".red\").closest(\".container\");\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the div with class \"container\".\r\n\t\treturn this._getRelatedUniqueNodes(null, function(node, ary){\r\n\t\t\tdo{\r\n\t\t\t\tif(dquery._filterResult([node], query, root).length){\r\n\t\t\t\t\treturn node;\r\n\t\t\t\t}\r\n\t\t\t}while(node != root && (node = node.parentNode) && node.nodeType == 1);\r\n\t\t\treturn null; //To make rhino strict checking happy.\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tparent: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns immediate parent elements for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the parent elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\timmediate parent elements for nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"blue first\"><span class=\"text\">Blue One</span></div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\"><span class=\"text\">Blue Two</span></div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".text\").parent();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class \"blue\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".text\").parent(\".first\");\r\n\t\t//\t\treturns the one div with class \"blue\" and \"first\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\treturn node.parentNode;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tparents: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all parent elements for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the child elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tall parent elements for nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"blue first\"><span class=\"text\">Blue One</span></div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\"><span class=\"text\">Blue Two</span></div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".text\").parents();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class \"blue\", the div with class \"container\",\r\n\t\t// \t|\tthe body element and the html element.\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".text\").parents(\".container\");\r\n\t\t//\t\treturns the one div with class \"container\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar pary = [];\r\n\t\t\twhile(node.parentNode){\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t\tpary.push(node);\r\n\t\t\t}\r\n\t\t\treturn pary;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tsiblings: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all sibling elements for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the sibling elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tall sibling elements for nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".first\").siblings();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class \"red\" and the other div\r\n\t\t// \t|\twith class \"blue\" that does not have \"first\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".first\").siblings(\".red\");\r\n\t\t//\t\treturns the two div with class \"red\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar pary = [];\r\n\t\t\tvar nodes = (node.parentNode && node.parentNode.childNodes);\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\tif(nodes[i] != node){\r\n\t\t\t\t\tpary.push(nodes[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn pary;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tnext: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the next element for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the next elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tthe next element for nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue last\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".first\").next();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the div with class \"red\" and has innerHTML of \"Red Two\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\tdojo.query(\".last\").next(\".red\");\r\n\t\t//\t\tdoes not return any elements.\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar next = node.nextSibling;\r\n\t\t\twhile(next && next.nodeType != 1){\r\n\t\t\t\tnext = next.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn next;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tnextAll: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all sibling elements that come after the nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the sibling elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tall sibling elements that come after the nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red next\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue next\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".first\").nextAll();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class of \"next\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".first\").nextAll(\".red\");\r\n\t\t//\t\treturns the one div with class \"red\" and innerHTML \"Red Two\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar pary = [];\r\n\t\t\tvar next = node;\r\n\t\t\twhile((next = next.nextSibling)){\r\n\t\t\t\tif(next.nodeType == 1){\r\n\t\t\t\t\tpary.push(next);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn pary;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tprev: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the previous element for nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the previous elements.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tthe previous element for nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".first\").prev();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the div with class \"red\" and has innerHTML of \"Red One\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".first\").prev(\".blue\");\r\n\t\t//\t\tdoes not return any elements.\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar prev = node.previousSibling;\r\n\t\t\twhile(prev && prev.nodeType != 1){\r\n\t\t\t\tprev = prev.previousSibling;\r\n\t\t\t}\r\n\t\t\treturn prev;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tprevAll: function(/*String?*/ query){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all sibling elements that come before the nodes in this dojo/NodeList.\r\n\t\t//\t\tOptionally takes a query to filter the sibling elements.\r\n\t\t// description:\r\n\t\t//\t\tThe returned nodes will be in reverse DOM order -- the first node in the list will\r\n\t\t//\t\tbe the node closest to the original node/NodeList.\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// query:\r\n\t\t//\t\ta CSS selector.\r\n\t\t// returns:\r\n\t\t//\t\tall sibling elements that come before the nodes in this dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red prev\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue prev\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red second\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".second\").prevAll();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class of \"prev\".\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\t\tquery(\".first\").prevAll(\".red\");\r\n\t\t//\t\treturns the one div with class \"red prev\" and innerHTML \"Red One\".\r\n\t\treturn this._getRelatedUniqueNodes(query, function(node, ary){\r\n\t\t\tvar pary = [];\r\n\t\t\tvar prev = node;\r\n\t\t\twhile((prev = prev.previousSibling)){\r\n\t\t\t\tif(prev.nodeType == 1){\r\n\t\t\t\t\tpary.push(prev);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn pary;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\tandSelf: function(){\r\n\t\t// summary:\r\n\t\t//\t\tAdds the nodes from the previous dojo/NodeList to the current dojo/NodeList.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red prev\">Red One</div>\r\n\t\t// \t|\t\tSome Text\r\n\t\t// \t|\t\t<div class=\"blue prev\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red second\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".second\").prevAll().andSelf();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class of \"prev\", as well as the div with class \"second\".\r\n\t\treturn this.concat(this._parent);\t// dojo/NodeList\r\n\t},\r\n\r\n\t//Alternate methods for the :first/:last/:even/:odd pseudos.\r\n\tfirst: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the first node in this dojo/NodeList as a dojo/NodeList.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// returns:\r\n\t\t//\t\tthe first node in this dojo/NodeList\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue last\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".blue\").first();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the div with class \"blue\" and \"first\".\r\n\t\treturn this._wrap(((this[0] && [this[0]]) || []), this); // dojo/NodeList\r\n\t},\r\n\r\n\tlast: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the last node in this dojo/NodeList as a dojo/NodeList.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// returns:\r\n\t\t//\t\tthe last node in this dojo/NodeList\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"blue first\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"blue last\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\tquery(\".blue\").last();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the last div with class \"blue\",\r\n\t\treturn this._wrap((this.length ? [this[this.length - 1]] : []), this); // dojo/NodeList\r\n\t},\r\n\r\n\teven: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the even nodes in this dojo/NodeList as a dojo/NodeList.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// returns:\r\n\t\t//\t\tthe even nodes in this dojo/NodeList\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"interior red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"interior blue\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"interior red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"interior blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".interior\").even();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class \"blue\"\r\n\t\treturn this.filter(function(item, i){\r\n\t\t\treturn i % 2 != 0;\r\n\t\t}); // dojo/NodeList\r\n\t},\r\n\r\n\todd: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the odd nodes in this dojo/NodeList as a dojo/NodeList.\r\n\t\t// description:\r\n\t\t//\t\t.end() can be used on the returned dojo/NodeList to get back to the\r\n\t\t//\t\toriginal dojo/NodeList.\r\n\t\t// returns:\r\n\t\t//\t\tthe odd nodes in this dojo/NodeList\r\n\t\t// example:\r\n\t\t//\t\tassume a DOM created by this markup:\r\n\t\t//\t|\t<div class=\"container\">\r\n\t\t// \t|\t\t<div class=\"interior red\">Red One</div>\r\n\t\t// \t|\t\t<div class=\"interior blue\">Blue One</div>\r\n\t\t// \t|\t\t<div class=\"interior red\">Red Two</div>\r\n\t\t// \t|\t\t<div class=\"interior blue\">Blue Two</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\t\tRunning this code:\r\n\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-traverse\"\r\n\t\t//\t|\t], function(query){\r\n\t\t//\t|\t\tquery(\".interior\").odd();\r\n\t\t//\t|\t});\r\n\t\t//\t\treturns the two divs with class \"red\"\r\n\t\treturn this.filter(function(item, i){\r\n\t\t\treturn i % 2 == 0;\r\n\t\t}); // dojo/NodeList\r\n\t}\r\n});\r\n\r\nreturn NodeList;\r\n});\r\n"]}
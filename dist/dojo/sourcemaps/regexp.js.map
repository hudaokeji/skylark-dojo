{"version":3,"sources":["regexp.js"],"names":["define","dojo","lang","regexp","setObject","escapeString","str","except","replace","ch","indexOf","buildGroupRE","arr","re","nonCapture","Array","b","i","length","push","group","join","expression"],"mappings":";;;;;;;AAAAA,QAAQ,iBAAkB,gBAAiB,SAASC,EAAMC,GAK1D,IAAIC,KA+DJ,OA3DAD,EAAKE,UAAU,cAAeD,GAE9BA,EAAOE,aAAe,SAAmBC,EAAgBC,GAMxD,OAAOD,EAAIE,QAAQ,iCAAkC,SAASC,GAC7D,OAAGF,IAAiC,GAAvBA,EAAOG,QAAQD,GACpBA,EAED,KAAOA,KAIhBN,EAAOQ,aAAe,SAAyBC,EAAiBC,EAAgBC,GAmB/E,KAAKF,aAAeG,OACnB,OAAOF,EAAGD,GAKX,IADA,IAAII,KACIC,EAAI,EAAGA,EAAIL,EAAIM,OAAQD,IAE9BD,EAAEG,KAAKN,EAAGD,EAAIK,KAIf,OAAOd,EAAOiB,MAAMJ,EAAEK,KAAK,KAAMP,IAGlCX,EAAOiB,MAAQ,SAAmBE,EAAwBR,GAMzD,MAAO,KAAOA,EAAa,KAAK,IAAMQ,EAAa,KAG7CnB","file":"../regexp.js","sourcesContent":["define([\"./_base/kernel\", \"./_base/lang\"], function(dojo, lang){\r\n\r\n// module:\r\n//\t\tdojo/regexp\r\n\r\nvar regexp = {\r\n\t// summary:\r\n\t//\t\tRegular expressions and Builder resources\r\n};\r\nlang.setObject(\"dojo.regexp\", regexp);\r\n\r\nregexp.escapeString = function(/*String*/str, /*String?*/except){\r\n\t// summary:\r\n\t//\t\tAdds escape sequences for special characters in regular expressions\r\n\t// except:\r\n\t//\t\ta String with special characters to be left unescaped\r\n\r\n\treturn str.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+\\-^])/g, function(ch){\r\n\t\tif(except && except.indexOf(ch) != -1){\r\n\t\t\treturn ch;\r\n\t\t}\r\n\t\treturn \"\\\\\" + ch;\r\n\t}); // String\r\n};\r\n\r\nregexp.buildGroupRE = function(/*Object|Array*/arr, /*Function*/re, /*Boolean?*/nonCapture){\r\n\t// summary:\r\n\t//\t\tBuilds a regular expression that groups subexpressions\r\n\t// description:\r\n\t//\t\tA utility function used by some of the RE generators. The\r\n\t//\t\tsubexpressions are constructed by the function, re, in the second\r\n\t//\t\tparameter.  re builds one subexpression for each elem in the array\r\n\t//\t\ta, in the first parameter. Returns a string for a regular\r\n\t//\t\texpression that groups all the subexpressions.\r\n\t// arr:\r\n\t//\t\tA single value or an array of values.\r\n\t// re:\r\n\t//\t\tA function. Takes one parameter and converts it to a regular\r\n\t//\t\texpression.\r\n\t// nonCapture:\r\n\t//\t\tIf true, uses non-capturing match, otherwise matches are retained\r\n\t//\t\tby regular expression. Defaults to false\r\n\r\n\t// case 1: a is a single value.\r\n\tif(!(arr instanceof Array)){\r\n\t\treturn re(arr); // String\r\n\t}\r\n\r\n\t// case 2: a is an array\r\n\tvar b = [];\r\n\tfor(var i = 0; i < arr.length; i++){\r\n\t\t// convert each elem to a RE\r\n\t\tb.push(re(arr[i]));\r\n\t}\r\n\r\n\t // join the REs as alternatives in a RE group.\r\n\treturn regexp.group(b.join(\"|\"), nonCapture); // String\r\n};\r\n\r\nregexp.group = function(/*String*/expression, /*Boolean?*/nonCapture){\r\n\t// summary:\r\n\t//\t\tadds group match to expression\r\n\t// nonCapture:\r\n\t//\t\tIf true, uses non-capturing match, otherwise matches are retained\r\n\t//\t\tby regular expression.\r\n\treturn \"(\" + (nonCapture ? \"?:\":\"\") + expression + \")\"; // String\r\n};\r\n\r\nreturn regexp;\r\n});\r\n"]}
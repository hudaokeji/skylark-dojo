{"version":3,"sources":["dnd/Mover.js"],"names":["define","array","declare","lang","has","win","dom","domGeom","domStyle","Evented","on","touch","dnd","autoscroll","constructor","node","e","host","this","byId","marginBox","l","pageX","t","pageY","mouseButton","button","h","d","ownerDocument","stopEvent","preventDefault","stopPropagation","events","move","hitch","release","body","autoScrollStart","onMoveStart","onMouseMove","autoScroll","m","onMove","onMouseUp","destroy","onFirstMove","s","style","position","Math","round","parseFloat","left","top","getMarginBox","b","doc","bs","getComputedStyle","bm","bc","getContentBox","shift","remove","forEach","handle","onMoveStop"],"mappings":";;;;;;;AAAAA,QACC,iBAAkB,mBAAoB,gBAAiB,WAAY,kBACnE,SAAU,kBAAmB,eAAgB,aAAc,QAAS,WAAY,WAAY,gBAC1F,SAASC,EAAOC,EAASC,EAAMC,EAAKC,EAAKC,EAAKC,EAASC,EAAUC,EAASC,EAAIC,EAAOC,EAAKC,GAK7F,OAAOX,EAAQ,kBAAmBO,IAKjCK,YAAa,SAASC,EAAMC,EAAGC,GAS9BC,KAAKH,KAAOT,EAAIa,KAAKJ,GACrBG,KAAKE,WAAaC,EAAGL,EAAEM,MAAOC,EAAGP,EAAEQ,OACnCN,KAAKO,YAAcT,EAAEU,OACrB,IAAIC,EAAKT,KAAKD,KAAOA,EAAOW,EAAIb,EAAKc,cAErC,SAASC,EAAUd,GAClBA,EAAEe,iBACFf,EAAEgB,kBAGHd,KAAKe,QAGJvB,EAAGkB,EAAGjB,EAAMuB,KAAM/B,EAAKgC,MAAMjB,KAAM,gBAGnCR,EAAGkB,EAAGjB,EAAMuB,KAAM/B,EAAKgC,MAAMjB,KAAM,gBAGnCR,EAAGkB,EAAGjB,EAAMyB,QAAUjC,EAAKgC,MAAMjB,KAAM,cAGvCR,EAAGkB,EAAG,YAAeE,GACrBpB,EAAGkB,EAAES,KAAM,cAAeP,IAI3BjB,EAAWyB,gBAAgBV,GAGxBD,GAAKA,EAAEY,aACTZ,EAAEY,YAAYrB,OAIhBsB,YAAa,SAASxB,GAKrBH,EAAW4B,WAAWzB,GACtB,IAAI0B,EAAIxB,KAAKE,UACbF,KAAKD,KAAK0B,OAAOzB,MAAOG,EAAGqB,EAAErB,EAAIL,EAAEM,MAAOC,EAAGmB,EAAEnB,EAAIP,EAAEQ,OAAQR,GAC7DA,EAAEe,iBACFf,EAAEgB,mBAEHY,UAAW,SAAS5B,IAChBZ,EAAI,WAAaA,EAAI,QAA8B,GAApBc,KAAKO,YACzB,GAAZT,EAAEU,OAAcR,KAAKO,aAAeT,EAAEU,SACvCR,KAAK2B,UAEN7B,EAAEe,iBACFf,EAAEgB,mBAGHc,YAAa,SAAS9B,GAIrB,IAAyBK,EAAGE,EAAxBwB,EAAI7B,KAAKH,KAAKiC,MAAarB,EAAIT,KAAKD,KACxC,OAAO8B,EAAEE,UACR,IAAK,WACL,IAAK,WAEJ5B,EAAI6B,KAAKC,MAAMC,WAAWL,EAAEM,QAAU,EACtC9B,EAAI2B,KAAKC,MAAMC,WAAWL,EAAEO,OAAS,EACrC,MACD,QACCP,EAAEE,SAAW,WACb,IAAIP,EAAInC,EAAQgD,aAAarC,KAAKH,MAS9ByC,EAAInD,EAAIoD,IAAIpB,KACZqB,EAAKlD,EAASmD,iBAAiBH,GAC/BI,EAAKrD,EAAQgD,aAAaC,EAAGE,GAC7BG,EAAKtD,EAAQuD,cAAcN,EAAGE,GAClCrC,EAAIqB,EAAErB,GAAKwC,EAAGxC,EAAIuC,EAAGvC,GACrBE,EAAImB,EAAEnB,GAAKsC,EAAGtC,EAAIqC,EAAGrC,GAGvBL,KAAKE,UAAUC,EAAIA,EAAIH,KAAKE,UAAUC,EACtCH,KAAKE,UAAUG,EAAIA,EAAIL,KAAKE,UAAUG,EACnCI,GAAKA,EAAEmB,aACTnB,EAAEmB,YAAY5B,KAAMF,GAIrBE,KAAKe,OAAO8B,QAAQC,UAErBnB,QAAS,WAGR5C,EAAMgE,QAAQ/C,KAAKe,OAAQ,SAASiC,GAASA,EAAOF,WAEpD,IAAIrC,EAAIT,KAAKD,KACVU,GAAKA,EAAEwC,YACTxC,EAAEwC,WAAWjD,MAGdA,KAAKe,OAASf,KAAKH,KAAOG,KAAKD,KAAO","file":"../../dnd/Mover.js","sourcesContent":["define([\r\n\t\"../_base/array\", \"../_base/declare\", \"../_base/lang\", \"../sniff\", \"../_base/window\",\r\n\t\"../dom\", \"../dom-geometry\", \"../dom-style\", \"../Evented\", \"../on\", \"../touch\", \"./common\", \"./autoscroll\"\r\n], function(array, declare, lang, has, win, dom, domGeom, domStyle, Evented, on, touch, dnd, autoscroll){\r\n\r\n// module:\r\n//\t\tdojo/dnd/Mover\r\n\r\nreturn declare(\"dojo.dnd.Mover\", [Evented], {\r\n\t// summary:\r\n\t//\t\tan object which makes a node follow the mouse, or touch-drag on touch devices.\r\n\t//\t\tUsed as a default mover, and as a base class for custom movers.\r\n\r\n\tconstructor: function(node, e, host){\r\n\t\t// node: Node\r\n\t\t//\t\ta node (or node's id) to be moved\r\n\t\t// e: Event\r\n\t\t//\t\ta mouse event, which started the move;\r\n\t\t//\t\tonly pageX and pageY properties are used\r\n\t\t// host: Object?\r\n\t\t//\t\tobject which implements the functionality of the move,\r\n\t\t//\t \tand defines proper events (onMoveStart and onMoveStop)\r\n\t\tthis.node = dom.byId(node);\r\n\t\tthis.marginBox = {l: e.pageX, t: e.pageY};\r\n\t\tthis.mouseButton = e.button;\r\n\t\tvar h = (this.host = host), d = node.ownerDocument;\r\n\r\n\t\tfunction stopEvent(e){\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\r\n\t\tthis.events = [\r\n\t\t\t// At the start of a drag, onFirstMove is called, and then the following\r\n\t\t\t// listener is disconnected.\r\n\t\t\ton(d, touch.move, lang.hitch(this, \"onFirstMove\")),\r\n\r\n\t\t\t// These are called continually during the drag\r\n\t\t\ton(d, touch.move, lang.hitch(this, \"onMouseMove\")),\r\n\r\n\t\t\t// And these are called at the end of the drag\r\n\t\t\ton(d, touch.release,  lang.hitch(this, \"onMouseUp\")),\r\n\r\n\t\t\t// cancel text selection and text dragging\r\n\t\t\ton(d, \"dragstart\",   stopEvent),\r\n\t\t\ton(d.body, \"selectstart\", stopEvent)\r\n\t\t];\r\n\r\n\t\t// Tell autoscroll that a drag is starting\r\n\t\tautoscroll.autoScrollStart(d);\r\n\r\n\t\t// notify that the move has started\r\n\t\tif(h && h.onMoveStart){\r\n\t\t\th.onMoveStart(this);\r\n\t\t}\r\n\t},\r\n\t// mouse event processors\r\n\tonMouseMove: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tevent processor for onmousemove/ontouchmove\r\n\t\t// e: Event\r\n\t\t//\t\tmouse/touch event\r\n\t\tautoscroll.autoScroll(e);\r\n\t\tvar m = this.marginBox;\r\n\t\tthis.host.onMove(this, {l: m.l + e.pageX, t: m.t + e.pageY}, e);\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t},\r\n\tonMouseUp: function(e){\r\n\t\tif(has(\"webkit\") && has(\"mac\") && this.mouseButton == 2 ?\r\n\t\t\t\te.button == 0 : this.mouseButton == e.button){ // TODO Should condition be met for touch devices, too?\r\n\t\t\tthis.destroy();\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t},\r\n\t// utilities\r\n\tonFirstMove: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tmakes the node absolute; it is meant to be called only once.\r\n\t\t//\t\trelative and absolutely positioned nodes are assumed to use pixel units\r\n\t\tvar s = this.node.style, l, t, h = this.host;\r\n\t\tswitch(s.position){\r\n\t\t\tcase \"relative\":\r\n\t\t\tcase \"absolute\":\r\n\t\t\t\t// assume that left and top values are in pixels already\r\n\t\t\t\tl = Math.round(parseFloat(s.left)) || 0;\r\n\t\t\t\tt = Math.round(parseFloat(s.top)) || 0;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\ts.position = \"absolute\";\t// enforcing the absolute mode\r\n\t\t\t\tvar m = domGeom.getMarginBox(this.node);\r\n\t\t\t\t// event.pageX/pageY (which we used to generate the initial\r\n\t\t\t\t// margin box) includes padding and margin set on the body.\r\n\t\t\t\t// However, setting the node's position to absolute and then\r\n\t\t\t\t// doing domGeom.marginBox on it *doesn't* take that additional\r\n\t\t\t\t// space into account - so we need to subtract the combined\r\n\t\t\t\t// padding and margin.  We use getComputedStyle and\r\n\t\t\t\t// _getMarginBox/_getContentBox to avoid the extra lookup of\r\n\t\t\t\t// the computed style.\r\n\t\t\t\tvar b = win.doc.body;\r\n\t\t\t\tvar bs = domStyle.getComputedStyle(b);\r\n\t\t\t\tvar bm = domGeom.getMarginBox(b, bs);\r\n\t\t\t\tvar bc = domGeom.getContentBox(b, bs);\r\n\t\t\t\tl = m.l - (bc.l - bm.l);\r\n\t\t\t\tt = m.t - (bc.t - bm.t);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.marginBox.l = l - this.marginBox.l;\r\n\t\tthis.marginBox.t = t - this.marginBox.t;\r\n\t\tif(h && h.onFirstMove){\r\n\t\t\th.onFirstMove(this, e);\r\n\t\t}\r\n\r\n\t\t// Disconnect touch.move that call this function\r\n\t\tthis.events.shift().remove();\r\n\t},\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tstops the move, deletes all references, so the object can be garbage-collected\r\n\t\tarray.forEach(this.events, function(handle){ handle.remove(); });\r\n\t\t// undo global settings\r\n\t\tvar h = this.host;\r\n\t\tif(h && h.onMoveStop){\r\n\t\t\th.onMoveStop(this);\r\n\t\t}\r\n\t\t// destroy objects\r\n\t\tthis.events = this.node = this.host = null;\r\n\t}\r\n});\r\n\r\n});\r\n"]}
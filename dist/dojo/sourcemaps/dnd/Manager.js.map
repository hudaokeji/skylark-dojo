{"version":3,"sources":["dnd/Manager.js"],"names":["define","array","declare","lang","win","domClass","Evented","has","keys","on","topic","touch","dnd","autoscroll","Avatar","Manager","constructor","this","avatar","source","nodes","copy","target","canDropFlag","events","OFFSET_X","OFFSET_Y","overSource","targetState","Boolean","update","publish","outSource","startDrag","stopEvent","e","preventDefault","stopPropagation","autoScrollStart","doc","makeAvatar","body","appendChild","node","move","hitch","release","c","add","canDrop","flag","stopDrag","remove","forEach","handle","destroy","updateAvatar","onMouseMove","a","autoScrollNodes","s","style","left","pageX","top","pageY","copyState","getCopyKeyState","_setCopyStatus","onMouseUp","onKeyDown","keyCode","CTRL","ESCAPE","onKeyUp","_markDndStatus","replace","_manager","manager"],"mappings":"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","file":"../../dnd/Manager.js","sourcesContent":["define([\r\n\t\"../_base/array\",  \"../_base/declare\", \"../_base/lang\", \"../_base/window\",\r\n\t\"../dom-class\", \"../Evented\", \"../has\", \"../keys\", \"../on\", \"../topic\", \"../touch\",\r\n\t\"./common\", \"./autoscroll\", \"./Avatar\"\r\n], function(array, declare, lang, win, domClass, Evented, has, keys, on, topic, touch,\r\n\tdnd, autoscroll, Avatar){\r\n\r\n// module:\r\n//\t\tdojo/dnd/Manager\r\n\r\nvar Manager = declare(\"dojo.dnd.Manager\", [Evented], {\r\n\t// summary:\r\n\t//\t\tthe manager of DnD operations (usually a singleton)\r\n\tconstructor: function(){\r\n\t\tthis.avatar  = null;\r\n\t\tthis.source = null;\r\n\t\tthis.nodes = [];\r\n\t\tthis.copy  = true;\r\n\t\tthis.target = null;\r\n\t\tthis.canDropFlag = false;\r\n\t\tthis.events = [];\r\n\t},\r\n\r\n\t// avatar's offset from the mouse\r\n\tOFFSET_X: has(\"touch\") ? 0 : 16,\r\n\tOFFSET_Y: has(\"touch\") ? -64 : 16,\r\n\r\n\t// methods\r\n\toverSource: function(source){\r\n\t\t// summary:\r\n\t\t//\t\tcalled when a source detected a mouse-over condition\r\n\t\t// source: Object\r\n\t\t//\t\tthe reporter\r\n\t\tif(this.avatar){\r\n\t\t\tthis.target = (source && source.targetState != \"Disabled\") ? source : null;\r\n\t\t\tthis.canDropFlag = Boolean(this.target);\r\n\t\t\tthis.avatar.update();\r\n\t\t}\r\n\t\ttopic.publish(\"/dnd/source/over\", source);\r\n\t},\r\n\toutSource: function(source){\r\n\t\t// summary:\r\n\t\t//\t\tcalled when a source detected a mouse-out condition\r\n\t\t// source: Object\r\n\t\t//\t\tthe reporter\r\n\t\tif(this.avatar){\r\n\t\t\tif(this.target == source){\r\n\t\t\t\tthis.target = null;\r\n\t\t\t\tthis.canDropFlag = false;\r\n\t\t\t\tthis.avatar.update();\r\n\t\t\t\ttopic.publish(\"/dnd/source/over\", null);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\ttopic.publish(\"/dnd/source/over\", null);\r\n\t\t}\r\n\t},\r\n\tstartDrag: function(source, nodes, copy){\r\n\t\t// summary:\r\n\t\t//\t\tcalled to initiate the DnD operation\r\n\t\t// source: Object\r\n\t\t//\t\tthe source which provides items\r\n\t\t// nodes: Array\r\n\t\t//\t\tthe list of transferred items\r\n\t\t// copy: Boolean\r\n\t\t//\t\tcopy items, if true, move items otherwise\r\n\r\n\t\t// Tell autoscroll that a drag is starting\r\n\t\tautoscroll.autoScrollStart(win.doc);\r\n\r\n\t\tthis.source = source;\r\n\t\tthis.nodes  = nodes;\r\n\t\tthis.copy   = Boolean(copy); // normalizing to true boolean\r\n\t\tthis.avatar = this.makeAvatar();\r\n\t\twin.body().appendChild(this.avatar.node);\r\n\t\ttopic.publish(\"/dnd/start\", source, nodes, this.copy);\r\n\r\n\t\tfunction stopEvent(e){\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\r\n\t\tthis.events = [\r\n\t\t\ton(win.doc, touch.move, lang.hitch(this, \"onMouseMove\")),\r\n\t\t\ton(win.doc, touch.release,   lang.hitch(this, \"onMouseUp\")),\r\n\t\t\ton(win.doc, \"keydown\",   lang.hitch(this, \"onKeyDown\")),\r\n\t\t\ton(win.doc, \"keyup\",     lang.hitch(this, \"onKeyUp\")),\r\n\r\n\t\t\t// cancel text selection and text dragging\r\n\t\t\ton(win.doc, \"dragstart\",   stopEvent),\r\n\t\t\ton(win.body(), \"selectstart\", stopEvent)\r\n\t\t];\r\n\t\tvar c = \"dojoDnd\" + (copy ? \"Copy\" : \"Move\");\r\n\t\tdomClass.add(win.body(), c);\r\n\t},\r\n\tcanDrop: function(flag){\r\n\t\t// summary:\r\n\t\t//\t\tcalled to notify if the current target can accept items\r\n\t\tvar canDropFlag = Boolean(this.target && flag);\r\n\t\tif(this.canDropFlag != canDropFlag){\r\n\t\t\tthis.canDropFlag = canDropFlag;\r\n\t\t\tthis.avatar.update();\r\n\t\t}\r\n\t},\r\n\tstopDrag: function(){\r\n\t\t// summary:\r\n\t\t//\t\tstop the DnD in progress\r\n\t\tdomClass.remove(win.body(), [\"dojoDndCopy\", \"dojoDndMove\"]);\r\n\t\tarray.forEach(this.events, function(handle){ handle.remove(); });\r\n\t\tthis.events = [];\r\n\t\tthis.avatar.destroy();\r\n\t\tthis.avatar = null;\r\n\t\tthis.source = this.target = null;\r\n\t\tthis.nodes = [];\r\n\t},\r\n\tmakeAvatar: function(){\r\n\t\t// summary:\r\n\t\t//\t\tmakes the avatar; it is separate to be overwritten dynamically, if needed\r\n\t\treturn new Avatar(this);\r\n\t},\r\n\tupdateAvatar: function(){\r\n\t\t// summary:\r\n\t\t//\t\tupdates the avatar; it is separate to be overwritten dynamically, if needed\r\n\t\tthis.avatar.update();\r\n\t},\r\n\r\n\t// mouse event processors\r\n\tonMouseMove: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tevent processor for onmousemove\r\n\t\t// e: Event\r\n\t\t//\t\tmouse event\r\n\t\tvar a = this.avatar;\r\n\t\tif(a){\r\n\t\t\tautoscroll.autoScrollNodes(e);\r\n\t\t\t//autoscroll.autoScroll(e);\r\n\t\t\tvar s = a.node.style;\r\n\t\t\ts.left = (e.pageX + this.OFFSET_X) + \"px\";\r\n\t\t\ts.top  = (e.pageY + this.OFFSET_Y) + \"px\";\r\n\t\t\tvar copy = Boolean(this.source.copyState(dnd.getCopyKeyState(e)));\r\n\t\t\tif(this.copy != copy){\r\n\t\t\t\tthis._setCopyStatus(copy);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(has(\"touch\")){\r\n\t\t\t// Prevent page from scrolling so that user can drag instead.\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\t},\r\n\tonMouseUp: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tevent processor for onmouseup\r\n\t\t// e: Event\r\n\t\t//\t\tmouse event\r\n\t\tif(this.avatar){\r\n\t\t\tif(this.target && this.canDropFlag){\r\n\t\t\t\tvar copy = Boolean(this.source.copyState(dnd.getCopyKeyState(e)));\r\n\t\t\t\ttopic.publish(\"/dnd/drop/before\", this.source, this.nodes, copy, this.target, e);\r\n\t\t\t\ttopic.publish(\"/dnd/drop\", this.source, this.nodes, copy, this.target, e);\r\n\t\t\t}else{\r\n\t\t\t\ttopic.publish(\"/dnd/cancel\");\r\n\t\t\t}\r\n\t\t\tthis.stopDrag();\r\n\t\t}\r\n\t},\r\n\r\n\t// keyboard event processors\r\n\tonKeyDown: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tevent processor for onkeydown:\r\n\t\t//\t\twatching for CTRL for copy/move status, watching for ESCAPE to cancel the drag\r\n\t\t// e: Event\r\n\t\t//\t\tkeyboard event\r\n\t\tif(this.avatar){\r\n\t\t\tswitch(e.keyCode){\r\n\t\t\t\tcase keys.CTRL:\r\n\t\t\t\t\tvar copy = Boolean(this.source.copyState(true));\r\n\t\t\t\t\tif(this.copy != copy){\r\n\t\t\t\t\t\tthis._setCopyStatus(copy);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase keys.ESCAPE:\r\n\t\t\t\t\ttopic.publish(\"/dnd/cancel\");\r\n\t\t\t\t\tthis.stopDrag();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tonKeyUp: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tevent processor for onkeyup, watching for CTRL for copy/move status\r\n\t\t// e: Event\r\n\t\t//\t\tkeyboard event\r\n\t\tif(this.avatar && e.keyCode == keys.CTRL){\r\n\t\t\tvar copy = Boolean(this.source.copyState(false));\r\n\t\t\tif(this.copy != copy){\r\n\t\t\t\tthis._setCopyStatus(copy);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// utilities\r\n\t_setCopyStatus: function(copy){\r\n\t\t// summary:\r\n\t\t//\t\tchanges the copy status\r\n\t\t// copy: Boolean\r\n\t\t//\t\tthe copy status\r\n\t\tthis.copy = copy;\r\n\t\tthis.source._markDndStatus(this.copy);\r\n\t\tthis.updateAvatar();\r\n\t\tdomClass.replace(win.body(),\r\n\t\t\t\"dojoDnd\" + (this.copy ? \"Copy\" : \"Move\"),\r\n\t\t\t\"dojoDnd\" + (this.copy ? \"Move\" : \"Copy\"));\r\n\t}\r\n});\r\n\r\n// dnd._manager:\r\n//\t\tThe manager singleton variable. Can be overwritten if needed.\r\ndnd._manager = null;\r\n\r\nManager.manager = dnd.manager = function(){\r\n\t// summary:\r\n\t//\t\tReturns the current DnD manager.  Creates one if it is not created yet.\r\n\tif(!dnd._manager){\r\n\t\tdnd._manager = new Manager();\r\n\t}\r\n\treturn dnd._manager;\t// Object\r\n};\r\n\r\n// TODO: for 2.0, store _manager and manager in Manager only.   Don't access dnd or dojo.dnd.\r\n\r\nreturn Manager;\r\n});\r\n"]}
{"version":3,"sources":["dnd/Avatar.js"],"names":["define","declare","win","dom","domAttr","domClass","domConstruct","has","query","constructor","manager","this","construct","node","a","create","class","style","position","zIndex","margin","source","b","tr","td","k","Math","min","nodes","length","i","id","innerHTML","copy","generateText","_generateText","set","opacity","creator","_normalizedCreator","getItem","data","cloneNode","tagName","toLowerCase","table","appendChild","destroy","update","toggle","canDropFlag","icon","byId","text","forEach","toString"],"mappings":";;;;;;;AAAAA,QACC,mBACA,kBACA,SACA,cACA,eACA,mBACA,WACA,YACE,SAASC,EAASC,EAAKC,EAAKC,EAASC,EAAUC,EAAcC,EAAKC,GAKrE,OAAOP,EAAQ,kBAAmB,MAMjCQ,YAAa,SAASC,GACrBC,KAAKD,QAAUA,EACfC,KAAKC,aAINA,UAAW,WAKV,IAQ+BC,EAR3BC,EAAIR,EAAaS,OAAO,SAC1BC,MAAS,gBACTC,OACCC,SAAU,WACVC,OAAU,OACVC,OAAU,SAGZC,EAASV,KAAKD,QAAQW,OACtBC,EAAIhB,EAAaS,OAAO,QAAS,KAAMD,GACvCS,EAAKjB,EAAaS,OAAO,KAAM,KAAMO,GACrCE,EAAKlB,EAAaS,OAAO,KAAM,KAAMQ,GACrCE,EAAIC,KAAKC,IAAI,EAAGhB,KAAKD,QAAQkB,MAAMC,QAASC,EAAI,EAiBjD,IAfGvB,EAAI,iBACND,EAAaS,OAAO,QACnBgB,GAAK,WACLC,UAAYrB,KAAKD,QAAQuB,KAAO,IAAM,KACpCT,GAEJlB,EAAaS,OAAO,QACnBiB,UAAWX,EAAOa,aAAevB,KAAKwB,gBAAkB,IACtDX,GAGHpB,EAAQgC,IAAIb,GACXP,MAAS,sBACTC,OAAQoB,QAAS,MAEZP,EAAIL,IAAKK,EAAE,CAChB,GAAGT,EAAOiB,QAETzB,EAAOQ,EAAOkB,mBAAmBlB,EAAOmB,QAAQ7B,KAAKD,QAAQkB,MAAME,GAAGC,IAAIU,KAAM,UAAU5B,UAI1F,GAAiC,OADjCA,EAAOF,KAAKD,QAAQkB,MAAME,GAAGY,WAAU,IAC/BC,QAAQC,cAAsB,CAErC,IAAIC,EAAQvC,EAAaS,OAAO,SACvBT,EAAaS,OAAO,QAAS,KAAM8B,GACtCC,YAAYjC,GAClBA,EAAOgC,EAGThC,EAAKkB,GAAK,GACVR,EAAKjB,EAAaS,OAAO,KAAM,KAAMO,IACrCE,EAAKlB,EAAaS,OAAO,KAAM,KAAMQ,IAClCuB,YAAYjC,GACfT,EAAQgC,IAAIb,GACXP,MAAS,oBACTC,OAAQoB,SAAU,EAAIP,GAAK,MAG7BnB,KAAKE,KAAOC,GAEbiC,QAAS,WAGRzC,EAAayC,QAAQpC,KAAKE,MAC1BF,KAAKE,MAAO,GAEbmC,OAAQ,WAIP,GADA3C,EAAS4C,OAAOtC,KAAKE,KAAM,uBAAwBF,KAAKD,QAAQwC,aAC7D3C,EAAI,gBAAgB,CACtB,IAAI4C,EAAOhD,EAAIiD,KAAK,YAChBC,EAAO,IACP1C,KAAKD,QAAQwC,cAAgBvC,KAAKD,QAAQuB,KAC7CoB,EAAO,KACG1C,KAAKD,QAAQwC,aAAgBvC,KAAKD,QAAQuB,KAE3CtB,KAAKD,QAAQwC,cACtBG,EAAO,KAFPA,EAAO,IAIRF,EAAKnB,UAAUqB,EAGhB7C,EAAO,kCAAmCD,EAAI,gBAAkB,QAAU,IAAMI,KAAKE,MAAMyC,QAC1F,SAASzC,GACRA,EAAKmB,UAAYrB,KAAKD,QAAQW,OAAOa,aAAevB,KAAKwB,gBAAkB,IACzExB,OAELwB,cAAe,WAGd,OAAOxB,KAAKD,QAAQkB,MAAMC,OAAO0B","file":"../../dnd/Avatar.js","sourcesContent":["define([\r\n\t\"../_base/declare\",\r\n\t\"../_base/window\",\r\n\t\"../dom\",\r\n\t\"../dom-attr\",\r\n\t\"../dom-class\",\r\n\t\"../dom-construct\",\r\n\t\"../hccss\",\r\n\t\"../query\"\r\n], function(declare, win, dom, domAttr, domClass, domConstruct, has, query){\r\n\r\n// module:\r\n//\t\tdojo/dnd/Avatar\r\n\r\nreturn declare(\"dojo.dnd.Avatar\", null, {\r\n\t// summary:\r\n\t//\t\tObject that represents transferred DnD items visually\r\n\t// manager: Object\r\n\t//\t\ta DnD manager object\r\n\r\n\tconstructor: function(manager){\r\n\t\tthis.manager = manager;\r\n\t\tthis.construct();\r\n\t},\r\n\r\n\t// methods\r\n\tconstruct: function(){\r\n\t\t// summary:\r\n\t\t//\t\tconstructor function;\r\n\t\t//\t\tit is separate so it can be (dynamically) overwritten in case of need\r\n\r\n\t\tvar a = domConstruct.create(\"table\", {\r\n\t\t\t\t\"class\": \"dojoDndAvatar\",\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\tzIndex:   \"1999\",\r\n\t\t\t\t\tmargin:   \"0px\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tsource = this.manager.source, node,\r\n\t\t\tb = domConstruct.create(\"tbody\", null, a),\r\n\t\t\ttr = domConstruct.create(\"tr\", null, b),\r\n\t\t\ttd = domConstruct.create(\"td\", null, tr),\r\n\t\t\tk = Math.min(5, this.manager.nodes.length), i = 0;\r\n\r\n\t\tif(has(\"highcontrast\")){\r\n\t\t\tdomConstruct.create(\"span\", {\r\n\t\t\t\tid : \"a11yIcon\",\r\n\t\t\t\tinnerHTML : this.manager.copy ? '+' : \"<\"\r\n\t\t\t}, td)\r\n\t\t}\r\n\t\tdomConstruct.create(\"span\", {\r\n\t\t\tinnerHTML: source.generateText ? this._generateText() : \"\"\r\n\t\t}, td);\r\n\r\n\t\t// we have to set the opacity on IE only after the node is live\r\n\t\tdomAttr.set(tr, {\r\n\t\t\t\"class\": \"dojoDndAvatarHeader\",\r\n\t\t\tstyle: {opacity: 0.9}\r\n\t\t});\r\n\t\tfor(; i < k; ++i){\r\n\t\t\tif(source.creator){\r\n\t\t\t\t// create an avatar representation of the node\r\n\t\t\t\tnode = source._normalizedCreator(source.getItem(this.manager.nodes[i].id).data, \"avatar\").node;\r\n\t\t\t}else{\r\n\t\t\t\t// or just clone the node and hope it works\r\n\t\t\t\tnode = this.manager.nodes[i].cloneNode(true);\r\n\t\t\t\tif(node.tagName.toLowerCase() == \"tr\"){\r\n\t\t\t\t\t// insert extra table nodes\r\n\t\t\t\t\tvar table = domConstruct.create(\"table\"),\r\n\t\t\t\t\t\ttbody = domConstruct.create(\"tbody\", null, table);\r\n\t\t\t\t\ttbody.appendChild(node);\r\n\t\t\t\t\tnode = table;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnode.id = \"\";\r\n\t\t\ttr = domConstruct.create(\"tr\", null, b);\r\n\t\t\ttd = domConstruct.create(\"td\", null, tr);\r\n\t\t\ttd.appendChild(node);\r\n\t\t\tdomAttr.set(tr, {\r\n\t\t\t\t\"class\": \"dojoDndAvatarItem\",\r\n\t\t\t\tstyle: {opacity: (9 - i) / 10}\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.node = a;\r\n\t},\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tdestructor for the avatar; called to remove all references so it can be garbage-collected\r\n\t\tdomConstruct.destroy(this.node);\r\n\t\tthis.node = false;\r\n\t},\r\n\tupdate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tupdates the avatar to reflect the current DnD state\r\n\t\tdomClass.toggle(this.node, \"dojoDndAvatarCanDrop\", this.manager.canDropFlag);\r\n\t\tif(has(\"highcontrast\")){\r\n\t\t\tvar icon = dom.byId(\"a11yIcon\");\r\n\t\t\tvar text = '+';   // assume canDrop && copy\r\n\t\t\tif (this.manager.canDropFlag && !this.manager.copy){\r\n\t\t\t\ttext = '< '; // canDrop && move\r\n\t\t\t}else if (!this.manager.canDropFlag && !this.manager.copy){\r\n\t\t\t\ttext = \"o\"; //!canDrop && move\r\n\t\t\t}else if(!this.manager.canDropFlag){\r\n\t\t\t\ttext = 'x';  // !canDrop && copy\r\n\t\t\t}\r\n\t\t\ticon.innerHTML=text;\r\n\t\t}\r\n\t\t// replace text\r\n\t\tquery((\"tr.dojoDndAvatarHeader td span\" +(has(\"highcontrast\") ? \" span\" : \"\")), this.node).forEach(\r\n\t\t\tfunction(node){\r\n\t\t\t\tnode.innerHTML = this.manager.source.generateText ? this._generateText() : \"\";\r\n\t\t\t}, this);\r\n\t},\r\n\t_generateText: function(){\r\n\t\t// summary:\r\n\t\t//\t\tgenerates a proper text to reflect copying or moving of items\r\n\t\treturn this.manager.nodes.length.toString();\r\n\t}\r\n});\r\n\r\n});\r\n"]}
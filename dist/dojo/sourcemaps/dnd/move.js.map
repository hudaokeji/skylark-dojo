{"version":3,"sources":["dnd/move.js"],"names":["define","declare","domGeom","domStyle","dnd","Mover","Moveable","constrainedMoveable","constraints","within","constructor","node","params","this","onFirstMove","mover","c","constraintBox","call","r","l","w","b","t","h","mb","getMarginSize","onMove","leftTop","s","style","onMoving","left","top","onMoved","boxConstrainedMoveable","box","parentConstrainedMoveable","area","n","parentNode","getComputedStyle","getMarginBox","getMarginExtents","getBorderExtents","getPadExtents"],"mappings":";;;;;;;AAAAA,QACC,mBACA,kBAAmB,eACnB,WAAY,UAAW,cACrB,SAASC,EAASC,EAASC,EAAUC,EAAKC,EAAOC,GAkBpD,IAAIC,EAAsBN,EAAQ,oCAAqCK,GAEtEE,YAAa,aACbC,QAAQ,EAERC,YAAa,SAASC,EAAMC,GAQvBA,IAASA,MACbC,KAAKL,YAAcI,EAAOJ,YAC1BK,KAAKJ,OAASG,EAAOH,QAEtBK,YAAa,SAAmBC,GAI/B,IAAIC,EAAIH,KAAKI,cAAgBJ,KAAKL,YAAYU,KAAKL,KAAME,GAGzD,GAFAC,EAAEG,EAAIH,EAAEI,EAAIJ,EAAEK,EACdL,EAAEM,EAAIN,EAAEO,EAAIP,EAAEQ,EACXX,KAAKJ,OAAO,CACd,IAAIgB,EAAKvB,EAAQwB,cAAcX,EAAMJ,MACrCK,EAAEG,GAAKM,EAAGJ,EACVL,EAAEM,GAAKG,EAAGD,IAGZG,OAAQ,SAAmBZ,EAAkBa,GAI5C,IAAIZ,EAAIH,KAAKI,cAAeY,EAAId,EAAMJ,KAAKmB,MAC3CjB,KAAKkB,SAAShB,EAAOa,GACrBA,EAAQR,EAAIQ,EAAQR,EAAIJ,EAAEI,EAAIJ,EAAEI,EAAIJ,EAAEG,EAAIS,EAAQR,EAAIJ,EAAEG,EAAIS,EAAQR,EACpEQ,EAAQL,EAAIK,EAAQL,EAAIP,EAAEO,EAAIP,EAAEO,EAAIP,EAAEM,EAAIM,EAAQL,EAAIP,EAAEM,EAAIM,EAAQL,EACpEM,EAAEG,KAAOJ,EAAQR,EAAI,KACrBS,EAAEI,IAAOL,EAAQL,EAAI,KACrBV,KAAKqB,QAAQnB,EAAOa,MA4EtB,OAGCrB,oBAAqBA,EACrB4B,uBApE4BlC,EAAQ,uCAAwCM,GAG5E6B,OAEA1B,YAAa,SAASC,EAAMC,GAO3B,IAAIwB,EAAMxB,GAAUA,EAAOwB,IAC3BvB,KAAKL,YAAc,WAAY,OAAO4B,MAwDvCC,0BA3C+BpC,EAAQ,0CAA2CM,GAGlF+B,KAAM,UAEN5B,YAAa,SAASC,EAAMC,GAO3B,IAAI0B,EAAO1B,GAAUA,EAAO0B,KAC5BzB,KAAKL,YAAc,WAClB,IAAI+B,EAAI1B,KAAKF,KAAK6B,WACjBX,EAAI1B,EAASsC,iBAAiBF,GAC9Bd,EAAKvB,EAAQwC,aAAaH,EAAGV,GAC9B,GAAW,UAARS,EACF,OAAOb,EAER,IAAIF,EAAIrB,EAAQyC,iBAAiBJ,EAAGV,GAEpC,OADAJ,EAAGL,GAAKG,EAAEH,EAAGK,EAAGF,GAAKA,EAAEA,EAAGE,EAAGJ,GAAKE,EAAEF,EAAGI,EAAGD,GAAKD,EAAEC,EACtC,UAARc,EACKb,GAERF,EAAIrB,EAAQ0C,iBAAiBL,EAAGV,GAChCJ,EAAGL,GAAKG,EAAEH,EAAGK,EAAGF,GAAKA,EAAEA,EAAGE,EAAGJ,GAAKE,EAAEF,EAAGI,EAAGD,GAAKD,EAAEC,EACtC,WAARc,EACKb,GAERF,EAAIrB,EAAQ2C,cAAcN,EAAGV,GAC7BJ,EAAGL,GAAKG,EAAEH,EAAGK,EAAGF,GAAKA,EAAEA,EAAGE,EAAGJ,GAAKE,EAAEF,EAAGI,EAAGD,GAAKD,EAAEC,EAC1CC","file":"../../dnd/move.js","sourcesContent":["define([\r\n\t\"../_base/declare\",\r\n\t\"../dom-geometry\", \"../dom-style\",\r\n\t\"./common\", \"./Mover\", \"./Moveable\"\r\n], function(declare, domGeom, domStyle, dnd, Mover, Moveable){\r\n\r\n// module:\r\n//\t\tdojo/dnd/move\r\n\r\n/*=====\r\nvar __constrainedMoveableArgs = declare([Moveable.__MoveableArgs], {\r\n\t// constraints: Function\r\n\t//\t\tCalculates a constraint box.\r\n\t//\t\tIt is called in a context of the moveable object.\r\n\tconstraints: function(){},\r\n\r\n\t// within: Boolean\r\n\t//\t\trestrict move within boundaries.\r\n\twithin: false\r\n});\r\n=====*/\r\n\r\nvar constrainedMoveable = declare(\"dojo.dnd.move.constrainedMoveable\", Moveable, {\r\n\t// object attributes (for markup)\r\n\tconstraints: function(){},\r\n\twithin: false,\r\n\r\n\tconstructor: function(node, params){\r\n\t\t// summary:\r\n\t\t//\t\tan object that makes a node moveable\r\n\t\t// node: Node\r\n\t\t//\t\ta node (or node's id) to be moved\r\n\t\t// params: __constrainedMoveableArgs?\r\n\t\t//\t\tan optional object with additional parameters;\r\n\t\t//\t\tthe rest is passed to the base class\r\n\t\tif(!params){ params = {}; }\r\n\t\tthis.constraints = params.constraints;\r\n\t\tthis.within = params.within;\r\n\t},\r\n\tonFirstMove: function(/*Mover*/ mover){\r\n\t\t// summary:\r\n\t\t//\t\tcalled during the very first move notification;\r\n\t\t//\t\tcan be used to initialize coordinates, can be overwritten.\r\n\t\tvar c = this.constraintBox = this.constraints.call(this, mover);\r\n\t\tc.r = c.l + c.w;\r\n\t\tc.b = c.t + c.h;\r\n\t\tif(this.within){\r\n\t\t\tvar mb = domGeom.getMarginSize(mover.node);\r\n\t\t\tc.r -= mb.w;\r\n\t\t\tc.b -= mb.h;\r\n\t\t}\r\n\t},\r\n\tonMove: function(/*Mover*/ mover, /*Object*/ leftTop){\r\n\t\t// summary:\r\n\t\t//\t\tcalled during every move notification;\r\n\t\t//\t\tshould actually move the node; can be overwritten.\r\n\t\tvar c = this.constraintBox, s = mover.node.style;\r\n\t\tthis.onMoving(mover, leftTop);\r\n\t\tleftTop.l = leftTop.l < c.l ? c.l : c.r < leftTop.l ? c.r : leftTop.l;\r\n\t\tleftTop.t = leftTop.t < c.t ? c.t : c.b < leftTop.t ? c.b : leftTop.t;\r\n\t\ts.left = leftTop.l + \"px\";\r\n\t\ts.top  = leftTop.t + \"px\";\r\n\t\tthis.onMoved(mover, leftTop);\r\n\t}\r\n});\r\n\r\n/*=====\r\nvar __boxConstrainedMoveableArgs = declare([__constrainedMoveableArgs], {\r\n\t// box: Object\r\n\t//\t\ta constraint box\r\n\tbox: {}\r\n});\r\n=====*/\r\n\r\nvar boxConstrainedMoveable = declare(\"dojo.dnd.move.boxConstrainedMoveable\", constrainedMoveable, {\r\n\t// box:\r\n\t//\t\tobject attributes (for markup)\r\n\tbox: {},\r\n\r\n\tconstructor: function(node, params){\r\n\t\t// summary:\r\n\t\t//\t\tan object, which makes a node moveable\r\n\t\t// node: Node\r\n\t\t//\t\ta node (or node's id) to be moved\r\n\t\t// params: __boxConstrainedMoveableArgs?\r\n\t\t//\t\tan optional object with parameters\r\n\t\tvar box = params && params.box;\r\n\t\tthis.constraints = function(){ return box; };\r\n\t}\r\n});\r\n\r\n/*=====\r\nvar __parentConstrainedMoveableArgs = declare( [__constrainedMoveableArgs], {\r\n\t// area: String\r\n\t//\t\tA parent's area to restrict the move.\r\n\t//\t\tCan be \"margin\", \"border\", \"padding\", or \"content\".\r\n\tarea: \"\"\r\n});\r\n=====*/\r\n\r\nvar parentConstrainedMoveable = declare(\"dojo.dnd.move.parentConstrainedMoveable\", constrainedMoveable, {\r\n\t// area:\r\n\t//\t\tobject attributes (for markup)\r\n\tarea: \"content\",\r\n\r\n\tconstructor: function(node, params){\r\n\t\t// summary:\r\n\t\t//\t\tan object, which makes a node moveable\r\n\t\t// node: Node\r\n\t\t//\t\ta node (or node's id) to be moved\r\n\t\t// params: __parentConstrainedMoveableArgs?\r\n\t\t//\t\tan optional object with parameters\r\n\t\tvar area = params && params.area;\r\n\t\tthis.constraints = function(){\r\n\t\t\tvar n = this.node.parentNode,\r\n\t\t\t\ts = domStyle.getComputedStyle(n),\r\n\t\t\t\tmb = domGeom.getMarginBox(n, s);\r\n\t\t\tif(area == \"margin\"){\r\n\t\t\t\treturn mb;\t// Object\r\n\t\t\t}\r\n\t\t\tvar t = domGeom.getMarginExtents(n, s);\r\n\t\t\tmb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;\r\n\t\t\tif(area == \"border\"){\r\n\t\t\t\treturn mb;\t// Object\r\n\t\t\t}\r\n\t\t\tt = domGeom.getBorderExtents(n, s);\r\n\t\t\tmb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;\r\n\t\t\tif(area == \"padding\"){\r\n\t\t\t\treturn mb;\t// Object\r\n\t\t\t}\r\n\t\t\tt = domGeom.getPadExtents(n, s);\r\n\t\t\tmb.l += t.l, mb.t += t.t, mb.w -= t.w, mb.h -= t.h;\r\n\t\t\treturn mb;\t// Object\r\n\t\t};\r\n\t}\r\n});\r\n\r\n\r\nreturn {\r\n\t// summary:\r\n\t//\t\tTODOC\r\n\tconstrainedMoveable: constrainedMoveable,\r\n\tboxConstrainedMoveable: boxConstrainedMoveable,\r\n\tparentConstrainedMoveable: parentConstrainedMoveable\r\n};\r\n\r\n});\r\n"]}
{"version":3,"sources":["date.js"],"names":["define","has","lang","date","getDaysInMonth","dateObject","month","getMonth","isLeapYear","year","getFullYear","getTimezoneName","match","str","toString","tz","pos","indexOf","substring","pat","toLocaleString","compare","date1","date2","portion","Date","setHours","setFullYear","add","interval","amount","sum","fixOvershoot","property","days","weeks","mod","parseInt","strt","getDay","adj","trgt","charAt","toUpperCase","getDate","setDate","difference","yearDiff","delta","m1","m2","q1","Math","floor","q2","round","aDay","bDay","dtMark","dayMark","getTime","mixin","getObject"],"mappings":";;;;;;;AAAAA,QAAQ,QAAS,gBAAiB,SAASC,EAAKC,GAIhD,IAAIC,GAKJC,eAAsB,SAAiBC,GAGtC,IAAIC,EAAQD,EAAWE,WAEvB,OAAY,GAATD,GAAcH,EAAKK,WAAWH,GAAqB,IAD1C,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAE5CC,IAGbE,WAAkB,SAAiBH,GAUlC,IAAII,EAAOJ,EAAWK,cACtB,QAASD,EAAK,MAAWA,EAAK,KAASA,EAAK,QAI7CE,gBAAuB,SAAiBN,GAWvC,IAEIO,EAFAC,EAAMR,EAAWS,WACjBC,EAAK,GAILC,EAAMH,EAAII,QAAQ,KACtB,GAAGD,GAAO,EACTD,EAAKF,EAAIK,YAAYF,EAAKH,EAAII,QAAQ,UAClC,CAKJ,IAAIE,EAAM,qBACNP,EAAQC,EAAID,MAAMO,IACrBJ,EAAKH,EAAM,IAOXO,EAAM,gBACFP,GAJJC,EAAMR,EAAWe,kBAIDR,MAAMO,MACrBJ,EAAKH,EAAM,KAMd,MAAc,MAANG,GAAoB,MAANA,EAAc,GAAKA,GAK1CM,QAAe,SAAiBC,EAAgBC,EAAkBC,GA4BjE,OAbAF,EAAQ,IAAIG,MAAMH,GAClBC,EAAQ,IAAIE,OAAOF,GAAS,IAAIE,OAElB,QAAXD,GAEFF,EAAMI,SAAS,EAAG,EAAG,EAAG,GACxBH,EAAMG,SAAS,EAAG,EAAG,EAAG,IACL,QAAXF,IAERF,EAAMK,YAAY,EAAG,EAAG,GACxBJ,EAAMI,YAAY,EAAG,EAAG,IAGtBL,EAAQC,EAAe,EACvBD,EAAQC,GAAgB,EACpB,GAGRK,IAAW,SAAiBzB,EAAgB0B,EAAiBC,GAY5D,IAAIC,EAAM,IAAIN,MAAMtB,GAChB6B,GAAe,EACfC,EAAW,OAEf,OAAOJ,GACN,IAAK,MACJ,MACD,IAAK,UAOJ,IAAIK,EAAMC,EACNC,EAAMN,EAAS,EACfM,GAIHF,EAAOE,EACPD,EAAQE,SAASP,EAAO,KAJxBI,EAAQJ,EAAS,EAAK,GAAK,EAC3BK,EAASL,EAAS,GAAOA,EAAO,GAAG,GAAOA,EAAO,GAAG,GAMrD,IAAIQ,EAAOnC,EAAKoC,SAGZC,EAAM,EACC,GAARF,GAAaR,EAAS,EACxBU,EAAM,EACU,GAARF,GAAaR,EAAS,IAG9BU,GAAO,GAGR,IAAIC,EAAOH,EAAOJ,EAEP,GAARO,GAAqB,GAARA,IACfD,EAAOV,EAAS,EAAK,GAAK,GAI3BA,EAAU,EAAIK,EAASD,EAAOM,EAC9B,MACD,IAAK,OACJP,EAAW,WAEXD,GAAe,EACf,MACD,IAAK,OACJF,GAAU,EACV,MACD,IAAK,UAEJA,GAAU,EAEX,IAAK,QAEJE,GAAe,EACfC,EAAW,QACX,MAKD,QACCA,EAAW,MAAMJ,EAASa,OAAO,GAAGC,cAAgBd,EAASX,UAAU,GAAK,IAW9E,OARGe,GACFF,EAAI,MAAME,GAAUF,EAAI,MAAME,KAAYH,GAGxCE,GAAiBD,EAAIa,UAAYzC,EAAKyC,WACxCb,EAAIc,QAAQ,GAGNd,GAGRe,WAAkB,SAAiBxB,EAAgBC,EAAkBM,GAgBpEN,EAAQA,GAAS,IAAIE,KACrBI,EAAWA,GAAY,MACvB,IAAIkB,EAAWxB,EAAMb,cAAgBY,EAAMZ,cACvCsC,EAAQ,EAEZ,OAAOnB,GACN,IAAK,UACJ,IAAIoB,EAAK3B,EAAMf,WACX2C,EAAK3B,EAAMhB,WAEX4C,EAAKC,KAAKC,MAAMJ,EAAG,GAAK,EACxBK,EAAKF,KAAKC,MAAMH,EAAG,GAAK,EAG5BF,GADAM,GAAkB,EAAXP,GACMI,EACb,MACD,IAAK,UACJ,IAAIjB,EAAOkB,KAAKG,MAAMpD,EAAK2C,WAAWxB,EAAOC,EAAO,QAChDY,EAAQE,SAASlC,EAAK2C,WAAWxB,EAAOC,EAAO,SAC/Ca,EAAMF,EAAO,EAGjB,GAAU,GAAPE,EACFF,EAAa,EAANC,MACH,CAEJ,IAAIK,EAAM,EACNgB,EAAOlC,EAAMiB,SACbkB,EAAOlC,EAAMgB,SAEjBJ,EAAQE,SAASH,EAAK,GACtBE,EAAMF,EAAO,EAGb,IAAIwB,EAAS,IAAIjC,KAAKH,GACtBoC,EAAOb,QAAQa,EAAOd,UAAiB,EAANT,GACjC,IAAIwB,EAAUD,EAAOnB,SAGrB,GAAGL,EAAO,EACT,QAAO,GAEN,KAAa,GAARsB,EACJhB,GAAO,EACP,MAED,KAAa,GAARgB,EACJhB,EAAM,EACN,MAED,KAAa,GAARiB,EACJjB,GAAO,EACP,MAED,KAAa,GAARiB,EACJjB,GAAO,EACP,MAED,KAAMmB,EAAUvB,EAAO,EACtBI,GAAO,OAEJ,GAAGN,EAAO,EACf,QAAO,GAEN,KAAa,GAARsB,EACJhB,EAAM,EACN,MAED,KAAa,GAARgB,EACJhB,EAAM,EACN,MAED,KAAa,GAARiB,EACJjB,EAAM,EACN,MAED,KAAa,GAARiB,EACJjB,EAAM,EACN,MAED,KAAMmB,EAAUvB,EAAO,EACtBI,EAAM,EAGTN,GAAQM,EACRN,GAAe,EAANC,EAEVa,EAAQd,EACR,MACD,IAAK,OACJc,EAAQD,EACR,MACD,IAAK,QACJC,EAASzB,EAAMhB,WAAae,EAAMf,WAA0B,GAAXwC,EACjD,MACD,IAAK,OAGJC,EAAQX,SAASlC,EAAK2C,WAAWxB,EAAOC,EAAO,OAAO,GACtD,MACD,IAAK,MACJyB,GAAS,GAEV,IAAK,OACJA,GAAS,GAEV,IAAK,SACJA,GAAS,GAEV,IAAK,SACJA,GAAS,IAEV,IAAK,cACJA,GAASzB,EAAMqC,UAAYtC,EAAMsC,UAInC,OAAOR,KAAKG,MAAMP,KAMnB,OAFA/C,EAAI,gBAAkBC,EAAK2D,MAAM3D,EAAK4D,UAAU,aAAa,GAAO3D,GAE7DA","file":"../date.js","sourcesContent":["define([\"./has\", \"./_base/lang\"], function(has, lang){\r\n// module:\r\n//\t\tdojo/date\r\n\r\nvar date = {\r\n\t// summary:\r\n\t//\t\tDate manipulation utilities\r\n};\r\n\r\ndate.getDaysInMonth = function(/*Date*/dateObject){\r\n\t// summary:\r\n\t//\t\tReturns the number of days in the month used by dateObject\r\n\tvar month = dateObject.getMonth();\r\n\tvar days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\tif(month == 1 && date.isLeapYear(dateObject)){ return 29; } // Number\r\n\treturn days[month]; // Number\r\n};\r\n\r\ndate.isLeapYear = function(/*Date*/dateObject){\r\n\t// summary:\r\n\t//\t\tDetermines if the year of the dateObject is a leap year\r\n\t// description:\r\n\t//\t\tLeap years are years with an additional day YYYY-02-29, where the\r\n\t//\t\tyear number is a multiple of four with the following exception: If\r\n\t//\t\ta year is a multiple of 100, then it is only a leap year if it is\r\n\t//\t\talso a multiple of 400. For example, 1900 was not a leap year, but\r\n\t//\t\t2000 is one.\r\n\r\n\tvar year = dateObject.getFullYear();\r\n\treturn !(year%400) || (!(year%4) && !!(year%100)); // Boolean\r\n};\r\n\r\n// FIXME: This is not localized\r\ndate.getTimezoneName = function(/*Date*/dateObject){\r\n\t// summary:\r\n\t//\t\tGet the user's time zone as provided by the browser\r\n\t// dateObject:\r\n\t//\t\tNeeded because the timezone may vary with time (daylight savings)\r\n\t// description:\r\n\t//\t\tTry to get time zone info from toString or toLocaleString method of\r\n\t//\t\tthe Date object -- UTC offset is not a time zone.  See\r\n\t//\t\thttp://www.twinsun.com/tz/tz-link.htm Note: results may be\r\n\t//\t\tinconsistent across browsers.\r\n\r\n\tvar str = dateObject.toString(); // Start looking in toString\r\n\tvar tz = ''; // The result -- return empty string if nothing found\r\n\tvar match;\r\n\r\n\t// First look for something in parentheses -- fast lookup, no regex\r\n\tvar pos = str.indexOf('(');\r\n\tif(pos > -1){\r\n\t\ttz = str.substring(++pos, str.indexOf(')'));\r\n\t}else{\r\n\t\t// If at first you don't succeed ...\r\n\t\t// If IE knows about the TZ, it appears before the year\r\n\t\t// Capital letters or slash before a 4-digit year\r\n\t\t// at the end of string\r\n\t\tvar pat = /([A-Z\\/]+) \\d{4}$/;\r\n\t\tif((match = str.match(pat))){\r\n\t\t\ttz = match[1];\r\n\t\t}else{\r\n\t\t// Some browsers (e.g. Safari) glue the TZ on the end\r\n\t\t// of toLocaleString instead of putting it in toString\r\n\t\t\tstr = dateObject.toLocaleString();\r\n\t\t\t// Capital letters or slash -- end of string,\r\n\t\t\t// after space\r\n\t\t\tpat = / ([A-Z\\/]+)$/;\r\n\t\t\tif((match = str.match(pat))){\r\n\t\t\t\ttz = match[1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Make sure it doesn't somehow end up return AM or PM\r\n\treturn (tz == 'AM' || tz == 'PM') ? '' : tz; // String\r\n};\r\n\r\n// Utility methods to do arithmetic calculations with Dates\r\n\r\ndate.compare = function(/*Date*/date1, /*Date?*/date2, /*String?*/portion){\r\n\t// summary:\r\n\t//\t\tCompare two date objects by date, time, or both.\r\n\t// description:\r\n\t//\t\tReturns 0 if equal, positive if a > b, else negative.\r\n\t// date1:\r\n\t//\t\tDate object\r\n\t// date2:\r\n\t//\t\tDate object.  If not specified, the current Date is used.\r\n\t// portion:\r\n\t//\t\tA string indicating the \"date\" or \"time\" portion of a Date object.\r\n\t//\t\tCompares both \"date\" and \"time\" by default.  One of the following:\r\n\t//\t\t\"date\", \"time\", \"datetime\"\r\n\r\n\t// Extra step required in copy for IE - see #3112\r\n\tdate1 = new Date(+date1);\r\n\tdate2 = new Date(+(date2 || new Date()));\r\n\r\n\tif(portion == \"date\"){\r\n\t\t// Ignore times and compare dates.\r\n\t\tdate1.setHours(0, 0, 0, 0);\r\n\t\tdate2.setHours(0, 0, 0, 0);\r\n\t}else if(portion == \"time\"){\r\n\t\t// Ignore dates and compare times.\r\n\t\tdate1.setFullYear(0, 0, 0);\r\n\t\tdate2.setFullYear(0, 0, 0);\r\n\t}\r\n\r\n\tif(date1 > date2){ return 1; } // int\r\n\tif(date1 < date2){ return -1; } // int\r\n\treturn 0; // int\r\n};\r\n\r\ndate.add = function(/*Date*/date, /*String*/interval, /*int*/amount){\r\n\t// summary:\r\n\t//\t\tAdd to a Date in intervals of different size, from milliseconds to years\r\n\t// date: Date\r\n\t//\t\tDate object to start with\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\", \"quarter\", \"week\", \"weekday\"\r\n\t// amount:\r\n\t//\t\tHow much to add to the date.\r\n\r\n\tvar sum = new Date(+date); // convert to Number before copying to accommodate IE (#3112)\r\n\tvar fixOvershoot = false;\r\n\tvar property = \"Date\";\r\n\r\n\tswitch(interval){\r\n\t\tcase \"day\":\r\n\t\t\tbreak;\r\n\t\tcase \"weekday\":\r\n\t\t\t//i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo/cldr/supplemental\r\n\r\n\t\t\t// Divide the increment time span into weekspans plus leftover days\r\n\t\t\t// e.g., 8 days is one 5-day weekspan / and two leftover days\r\n\t\t\t// Can't have zero leftover days, so numbers divisible by 5 get\r\n\t\t\t// a days value of 5, and the remaining days make up the number of weeks\r\n\t\t\tvar days, weeks;\r\n\t\t\tvar mod = amount % 5;\r\n\t\t\tif(!mod){\r\n\t\t\t\tdays = (amount > 0) ? 5 : -5;\r\n\t\t\t\tweeks = (amount > 0) ? ((amount-5)/5) : ((amount+5)/5);\r\n\t\t\t}else{\r\n\t\t\t\tdays = mod;\r\n\t\t\t\tweeks = parseInt(amount/5);\r\n\t\t\t}\r\n\t\t\t// Get weekday value for orig date param\r\n\t\t\tvar strt = date.getDay();\r\n\t\t\t// Orig date is Sat / positive incrementer\r\n\t\t\t// Jump over Sun\r\n\t\t\tvar adj = 0;\r\n\t\t\tif(strt == 6 && amount > 0){\r\n\t\t\t\tadj = 1;\r\n\t\t\t}else if(strt == 0 && amount < 0){\r\n\t\t\t// Orig date is Sun / negative incrementer\r\n\t\t\t// Jump back over Sat\r\n\t\t\t\tadj = -1;\r\n\t\t\t}\r\n\t\t\t// Get weekday val for the new date\r\n\t\t\tvar trgt = strt + days;\r\n\t\t\t// New date is on Sat or Sun\r\n\t\t\tif(trgt == 0 || trgt == 6){\r\n\t\t\t\tadj = (amount > 0) ? 2 : -2;\r\n\t\t\t}\r\n\t\t\t// Increment by number of weeks plus leftover days plus\r\n\t\t\t// weekend adjustments\r\n\t\t\tamount = (7 * weeks) + days + adj;\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tproperty = \"FullYear\";\r\n\t\t\t// Keep increment/decrement from 2/29 out of March\r\n\t\t\tfixOvershoot = true;\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\tamount *= 7;\r\n\t\t\tbreak;\r\n\t\tcase \"quarter\":\r\n\t\t\t// Naive quarter is just three months\r\n\t\t\tamount *= 3;\r\n\t\t\t// fallthrough...\r\n\t\tcase \"month\":\r\n\t\t\t// Reset to last day of month if you overshoot\r\n\t\t\tfixOvershoot = true;\r\n\t\t\tproperty = \"Month\";\r\n\t\t\tbreak;\r\n//\t\tcase \"hour\":\r\n//\t\tcase \"minute\":\r\n//\t\tcase \"second\":\r\n//\t\tcase \"millisecond\":\r\n\t\tdefault:\r\n\t\t\tproperty = \"UTC\"+interval.charAt(0).toUpperCase() + interval.substring(1) + \"s\";\r\n\t}\r\n\r\n\tif(property){\r\n\t\tsum[\"set\"+property](sum[\"get\"+property]()+amount);\r\n\t}\r\n\r\n\tif(fixOvershoot && (sum.getDate() < date.getDate())){\r\n\t\tsum.setDate(0);\r\n\t}\r\n\r\n\treturn sum; // Date\r\n};\r\n\r\ndate.difference = function(/*Date*/date1, /*Date?*/date2, /*String?*/interval){\r\n\t// summary:\r\n\t//\t\tGet the difference in a specific unit of time (e.g., number of\r\n\t//\t\tmonths, weeks, days, etc.) between two dates, rounded to the\r\n\t//\t\tnearest integer.\r\n\t// date1:\r\n\t//\t\tDate object\r\n\t// date2:\r\n\t//\t\tDate object.  If not specified, the current Date is used.\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\", \"quarter\", \"week\", \"weekday\"\r\n\t//\r\n\t//\t\tDefaults to \"day\".\r\n\r\n\tdate2 = date2 || new Date();\r\n\tinterval = interval || \"day\";\r\n\tvar yearDiff = date2.getFullYear() - date1.getFullYear();\r\n\tvar delta = 1; // Integer return value\r\n\r\n\tswitch(interval){\r\n\t\tcase \"quarter\":\r\n\t\t\tvar m1 = date1.getMonth();\r\n\t\t\tvar m2 = date2.getMonth();\r\n\t\t\t// Figure out which quarter the months are in\r\n\t\t\tvar q1 = Math.floor(m1/3) + 1;\r\n\t\t\tvar q2 = Math.floor(m2/3) + 1;\r\n\t\t\t// Add quarters for any year difference between the dates\r\n\t\t\tq2 += (yearDiff * 4);\r\n\t\t\tdelta = q2 - q1;\r\n\t\t\tbreak;\r\n\t\tcase \"weekday\":\r\n\t\t\tvar days = Math.round(date.difference(date1, date2, \"day\"));\r\n\t\t\tvar weeks = parseInt(date.difference(date1, date2, \"week\"));\r\n\t\t\tvar mod = days % 7;\r\n\r\n\t\t\t// Even number of weeks\r\n\t\t\tif(mod == 0){\r\n\t\t\t\tdays = weeks*5;\r\n\t\t\t}else{\r\n\t\t\t\t// Weeks plus spare change (< 7 days)\r\n\t\t\t\tvar adj = 0;\r\n\t\t\t\tvar aDay = date1.getDay();\r\n\t\t\t\tvar bDay = date2.getDay();\r\n\r\n\t\t\t\tweeks = parseInt(days/7);\r\n\t\t\t\tmod = days % 7;\r\n\t\t\t\t// Mark the date advanced by the number of\r\n\t\t\t\t// round weeks (may be zero)\r\n\t\t\t\tvar dtMark = new Date(date1);\r\n\t\t\t\tdtMark.setDate(dtMark.getDate()+(weeks*7));\r\n\t\t\t\tvar dayMark = dtMark.getDay();\r\n\r\n\t\t\t\t// Spare change days -- 6 or less\r\n\t\t\t\tif(days > 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sun\r\n\t\t\t\t\t\tcase aDay == 0:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sun\r\n\t\t\t\t\t\tcase bDay == 0:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) > 5:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(days < 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sun\r\n\t\t\t\t\t\tcase aDay == 0:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sun\r\n\t\t\t\t\t\tcase bDay == 0:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) < 0:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdays += adj;\r\n\t\t\t\tdays -= (weeks*2);\r\n\t\t\t}\r\n\t\t\tdelta = days;\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tdelta = yearDiff;\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tdelta = (date2.getMonth() - date1.getMonth()) + (yearDiff * 12);\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\t// Truncate instead of rounding\r\n\t\t\t// Don't use Math.floor -- value may be negative\r\n\t\t\tdelta = parseInt(date.difference(date1, date2, \"day\")/7);\r\n\t\t\tbreak;\r\n\t\tcase \"day\":\r\n\t\t\tdelta /= 24;\r\n\t\t\t// fallthrough\r\n\t\tcase \"hour\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"minute\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"second\":\r\n\t\t\tdelta /= 1000;\r\n\t\t\t// fallthrough\r\n\t\tcase \"millisecond\":\r\n\t\t\tdelta *= date2.getTime() - date1.getTime();\r\n\t}\r\n\r\n\t// Round for fractional values and DST leaps\r\n\treturn Math.round(delta); // Number (integer)\r\n};\r\n\r\n// Don't use setObject() because it may overwrite dojo/date/stamp (if that has already been loaded)\r\nhas(\"extend-dojo\") && lang.mixin(lang.getObject(\"dojo.date\", true), date);\r\n\r\nreturn date;\r\n});\r\n"]}
{"version":3,"sources":["dom-style.js"],"names":["define","has","dom","getComputedStyle","toPixel","style","node","s","nodeType","dv","ownerDocument","defaultView","display","currentStyle","element","avalue","slice","parseFloat","rs","runtimeStyle","cs","sLeft","left","rsLeft","pixelLeft","e","value","toPixelValue","astr","af","n","f","filters","item","_getOpacity","Opacity","opacity","_setOpacity","ov","zoom","filter","replace","RegExp","Enabled","tagName","toLowerCase","td","firstChild","nextSibling","_pixelNamesCache","top","_pixelRegExp","_floatAliases","cssFloat","styleFloat","float","get","name","byId","l","arguments","length","type","offsetHeight","offsetWidth","test","_toStyleValue","set","op","x"],"mappings":"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","file":"../dom-style.js","sourcesContent":["define([\"./sniff\", \"./dom\"], function(has, dom){\r\n\t// module:\r\n\t//\t\tdojo/dom-style\r\n\r\n\t// =============================\r\n\t// Style Functions\r\n\t// =============================\r\n\r\n\t// getComputedStyle drives most of the style code.\r\n\t// Wherever possible, reuse the returned object.\r\n\t//\r\n\t// API functions below that need to access computed styles accept an\r\n\t// optional computedStyle parameter.\r\n\t// If this parameter is omitted, the functions will call getComputedStyle themselves.\r\n\t// This way, calling code can access computedStyle once, and then pass the reference to\r\n\t// multiple API functions.\r\n\r\n\t// Although we normally eschew argument validation at this\r\n\t// level, here we test argument 'node' for (duck)type,\r\n\t// by testing nodeType, ecause 'document' is the 'parentNode' of 'body'\r\n\t// it is frequently sent to this function even\r\n\t// though it is not Element.\r\n\tvar getComputedStyle, style = {\r\n\t\t// summary:\r\n\t\t//\t\tThis module defines the core dojo DOM style API.\r\n\t};\r\n\tif(has(\"webkit\")){\r\n\t\tgetComputedStyle = function(/*DomNode*/ node){\r\n\t\t\tvar s;\r\n\t\t\tif(node.nodeType == 1){\r\n\t\t\t\tvar dv = node.ownerDocument.defaultView;\r\n\t\t\t\ts = dv.getComputedStyle(node, null);\r\n\t\t\t\tif(!s && node.style){\r\n\t\t\t\t\tnode.style.display = \"\";\r\n\t\t\t\t\ts = dv.getComputedStyle(node, null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn s || {};\r\n\t\t};\r\n\t}else if(has(\"ie\") && (has(\"ie\") < 9 || has(\"quirks\"))){\r\n\t\tgetComputedStyle = function(node){\r\n\t\t\t// IE (as of 7) doesn't expose Element like sane browsers\r\n\t\t\t// currentStyle can be null on IE8!\r\n\t\t\treturn node.nodeType == 1 /* ELEMENT_NODE*/ && node.currentStyle ? node.currentStyle : {};\r\n\t\t};\r\n\t}else{\r\n\t\tgetComputedStyle = function(node){\r\n\t\t\treturn node.nodeType == 1 /* ELEMENT_NODE*/ ?\r\n\t\t\t\tnode.ownerDocument.defaultView.getComputedStyle(node, null) : {};\r\n\t\t};\r\n\t}\r\n\tstyle.getComputedStyle = getComputedStyle;\r\n\t/*=====\r\n\tstyle.getComputedStyle = function(node){\r\n\t\t// summary:\r\n\t\t//\t\tReturns a \"computed style\" object.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tGets a \"computed style\" object which can be used to gather\r\n\t\t//\t\tinformation about the current state of the rendered node.\r\n\t\t//\r\n\t\t//\t\tNote that this may behave differently on different browsers.\r\n\t\t//\t\tValues may have different formats and value encodings across\r\n\t\t//\t\tbrowsers.\r\n\t\t//\r\n\t\t//\t\tNote also that this method is expensive.  Wherever possible,\r\n\t\t//\t\treuse the returned object.\r\n\t\t//\r\n\t\t//\t\tUse the dojo/dom-style.get() method for more consistent (pixelized)\r\n\t\t//\t\treturn values.\r\n\t\t//\r\n\t\t// node: DOMNode\r\n\t\t//\t\tA reference to a DOM node. Does NOT support taking an\r\n\t\t//\t\tID string for speed reasons.\r\n\t\t// example:\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\r\n\t\t//\t|\t\tdomStyle.getComputedStyle(dom.byId('foo')).borderWidth;\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tReusing the returned object, avoiding multiple lookups:\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\r\n\t\t//\t|\t\tvar cs = domStyle.getComputedStyle(dom.byId(\"someNode\"));\r\n\t\t//\t|\t\tvar w = cs.width, h = cs.height;\r\n\t\t//\t|\t});\r\n\t\treturn; // CSS2Properties\r\n\t};\r\n\t=====*/\r\n\r\n\tvar toPixel;\r\n\tif(!has(\"ie\")){\r\n\t\ttoPixel = function(element, value){\r\n\t\t\t// style values can be floats, client code may want\r\n\t\t\t// to round for integer pixels.\r\n\t\t\treturn parseFloat(value) || 0;\r\n\t\t};\r\n\t}else{\r\n\t\ttoPixel = function(element, avalue){\r\n\t\t\tif(!avalue){ return 0; }\r\n\t\t\t// on IE7, medium is usually 4 pixels\r\n\t\t\tif(avalue == \"medium\"){ return 4; }\r\n\t\t\t// style values can be floats, client code may\r\n\t\t\t// want to round this value for integer pixels.\r\n\t\t\tif(avalue.slice && avalue.slice(-2) == 'px'){ return parseFloat(avalue); }\r\n\t\t\tvar s = element.style, rs = element.runtimeStyle, cs = element.currentStyle,\r\n\t\t\t\tsLeft = s.left, rsLeft = rs.left;\r\n\t\t\trs.left = cs.left;\r\n\t\t\ttry{\r\n\t\t\t\t// 'avalue' may be incompatible with style.left, which can cause IE to throw\r\n\t\t\t\t// this has been observed for border widths using \"thin\", \"medium\", \"thick\" constants\r\n\t\t\t\t// those particular constants could be trapped by a lookup\r\n\t\t\t\t// but perhaps there are more\r\n\t\t\t\ts.left = avalue;\r\n\t\t\t\tavalue = s.pixelLeft;\r\n\t\t\t}catch(e){\r\n\t\t\t\tavalue = 0;\r\n\t\t\t}\r\n\t\t\ts.left = sLeft;\r\n\t\t\trs.left = rsLeft;\r\n\t\t\treturn avalue;\r\n\t\t};\r\n\t}\r\n\tstyle.toPixelValue = toPixel;\r\n\t/*=====\r\n\tstyle.toPixelValue = function(node, value){\r\n\t\t// summary:\r\n\t\t//\t\tconverts style value to pixels on IE or return a numeric value.\r\n\t\t// node: DOMNode\r\n\t\t// value: String\r\n\t\t// returns: Number\r\n\t};\r\n\t=====*/\r\n\r\n\t// FIXME: there opacity quirks on FF that we haven't ported over. Hrm.\r\n\r\n\tvar astr = \"DXImageTransform.Microsoft.Alpha\";\r\n\tvar af = function(n, f){\r\n\t\ttry{\r\n\t\t\treturn n.filters.item(astr);\r\n\t\t}catch(e){\r\n\t\t\treturn f ? {} : null;\r\n\t\t}\r\n\t};\r\n\r\n\tvar _getOpacity =\r\n\t\thas(\"ie\") < 9 || (has(\"ie\") < 10 && has(\"quirks\")) ? function(node){\r\n\t\t\ttry{\r\n\t\t\t\treturn af(node).Opacity / 100; // Number\r\n\t\t\t}catch(e){\r\n\t\t\t\treturn 1; // Number\r\n\t\t\t}\r\n\t\t} :\r\n\t\tfunction(node){\r\n\t\t\treturn getComputedStyle(node).opacity;\r\n\t\t};\r\n\r\n\tvar _setOpacity =\r\n\t\thas(\"ie\") < 9 || (has(\"ie\") < 10 && has(\"quirks\")) ? function(/*DomNode*/ node, /*Number*/ opacity){\r\n\t\t\tif(opacity === \"\"){ opacity = 1; }\r\n\t\t\tvar ov = opacity * 100, fullyOpaque = opacity === 1;\r\n\r\n\t\t\t// on IE7 Alpha(Filter opacity=100) makes text look fuzzy so disable it altogether (bug #2661),\r\n\t\t\t// but still update the opacity value so we can get a correct reading if it is read later:\r\n\t\t\t// af(node, 1).Enabled = !fullyOpaque;\r\n\r\n\t\t\tif(fullyOpaque){\r\n\t\t\t\tnode.style.zoom = \"\";\r\n\t\t\t\tif(af(node)){\r\n\t\t\t\t\tnode.style.filter = node.style.filter.replace(\r\n\t\t\t\t\t\tnew RegExp(\"\\\\s*progid:\" + astr + \"\\\\([^\\\\)]+?\\\\)\", \"i\"), \"\");\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tnode.style.zoom = 1;\r\n\t\t\t\tif(af(node)){\r\n\t\t\t\t\taf(node, 1).Opacity = ov;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tnode.style.filter += \" progid:\" + astr + \"(Opacity=\" + ov + \")\";\r\n\t\t\t\t}\r\n\t\t\t\taf(node, 1).Enabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tif(node.tagName.toLowerCase() == \"tr\"){\r\n\t\t\t\tfor(var td = node.firstChild; td; td = td.nextSibling){\r\n\t\t\t\t\tif(td.tagName.toLowerCase() == \"td\"){\r\n\t\t\t\t\t\t_setOpacity(td, opacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn opacity;\r\n\t\t} :\r\n\t\tfunction(node, opacity){\r\n\t\t\treturn node.style.opacity = opacity;\r\n\t\t};\r\n\r\n\tvar _pixelNamesCache = {\r\n\t\tleft: true, top: true\r\n\t};\r\n\tvar _pixelRegExp = /margin|padding|width|height|max|min|offset/; // |border\r\n\tfunction _toStyleValue(node, type, value){\r\n\t\t//TODO: should we really be doing string case conversion here? Should we cache it? Need to profile!\r\n\t\ttype = type.toLowerCase();\r\n\t\tif(has(\"ie\") || has(\"trident\")){\r\n\t\t\tif(value == \"auto\"){\r\n\t\t\t\tif(type == \"height\"){ return node.offsetHeight; }\r\n\t\t\t\tif(type == \"width\"){ return node.offsetWidth; }\r\n\t\t\t}\r\n\t\t\tif(type == \"fontweight\"){\r\n\t\t\t\tswitch(value){\r\n\t\t\t\t\tcase 700: return \"bold\";\r\n\t\t\t\t\tcase 400:\r\n\t\t\t\t\tdefault: return \"normal\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!(type in _pixelNamesCache)){\r\n\t\t\t_pixelNamesCache[type] = _pixelRegExp.test(type);\r\n\t\t}\r\n\t\treturn _pixelNamesCache[type] ? toPixel(node, value) : value;\r\n\t}\r\n\r\n\tvar _floatAliases = {cssFloat: 1, styleFloat: 1, \"float\": 1};\r\n\r\n\t// public API\r\n\r\n\tstyle.get = function getStyle(/*DOMNode|String*/ node, /*String?*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tAccesses styles on a node.\r\n\t\t// description:\r\n\t\t//\t\tGetting the style value uses the computed style for the node, so the value\r\n\t\t//\t\twill be a calculated value, not just the immediate node.style value.\r\n\t\t//\t\tAlso when getting values, use specific style names,\r\n\t\t//\t\tlike \"borderBottomWidth\" instead of \"border\" since compound values like\r\n\t\t//\t\t\"border\" are not necessarily reflected as expected.\r\n\t\t//\t\tIf you want to get node dimensions, use `dojo/dom-geometry.getMarginBox()`,\r\n\t\t//\t\t`dojo/dom-geometry.getContentBox()` or `dojo/dom-geometry.getPosition()`.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to node to get style for\r\n\t\t// name: String?\r\n\t\t//\t\tthe style property to get\r\n\t\t// example:\r\n\t\t//\t\tPassing only an ID or node returns the computed style object of\r\n\t\t//\t\tthe node:\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\r\n\t\t//\t|\t\tdomStyle.get(\"thinger\");\r\n\t\t//\t|\t});\r\n\t\t// example:\r\n\t\t//\t\tPassing a node and a style property returns the current\r\n\t\t//\t\tnormalized, computed value for that property:\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\r\n\t\t//\t|\t\tdomStyle.get(\"thinger\", \"opacity\"); // 1 by default\r\n\t\t//\t|\t});\r\n\r\n\t\tvar n = dom.byId(node), l = arguments.length, op = (name == \"opacity\");\r\n\t\tif(l == 2 && op){\r\n\t\t\treturn _getOpacity(n);\r\n\t\t}\r\n\t\tname = _floatAliases[name] ? \"cssFloat\" in n.style ? \"cssFloat\" : \"styleFloat\" : name;\r\n\t\tvar s = style.getComputedStyle(n);\r\n\t\treturn (l == 1) ? s : _toStyleValue(n, name, s[name] || n.style[name]); /* CSS2Properties||String||Number */\r\n\t};\r\n\r\n\tstyle.set = function setStyle(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tSets styles on a node.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to node to set style for\r\n\t\t// name: String|Object\r\n\t\t//\t\tthe style property to set in DOM-accessor format\r\n\t\t//\t\t(\"borderWidth\", not \"border-width\") or an object with key/value\r\n\t\t//\t\tpairs suitable for setting each property.\r\n\t\t// value: String?\r\n\t\t//\t\tIf passed, sets value on the node for style, handling\r\n\t\t//\t\tcross-browser concerns.  When setting a pixel value,\r\n\t\t//\t\tbe sure to include \"px\" in the value. For instance, top: \"200px\".\r\n\t\t//\t\tOtherwise, in some cases, some browsers will not apply the style.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tPassing a node, a style property, and a value changes the\r\n\t\t//\t\tcurrent display of the node and returns the new computed value\r\n\t\t//\t|\trequire([\"dojo/dom-style\"], function(domStyle){\r\n\t\t//\t|\t\tdomStyle.set(\"thinger\", \"opacity\", 0.5); // == 0.5\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\r\n\t\t//\t|\trequire([\"dojo/dom-style\"], function(domStyle){\r\n\t\t//\t|\t\tdomStyle.set(\"thinger\", {\r\n\t\t//\t|\t\t\t\"opacity\": 0.5,\r\n\t\t//\t|\t\t\t\"border\": \"3px solid black\",\r\n\t\t//\t|\t\t\t\"height\": \"300px\"\r\n\t\t//\t|\t\t});\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tWhen the CSS style property is hyphenated, the JavaScript property is camelCased.\r\n\t\t//\t\tfont-size becomes fontSize, and so on.\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/dom\"], function(domStyle, dom){\r\n\t\t//\t|\t\tdomStyle.set(\"thinger\",{\r\n\t\t//\t|\t\t\tfontSize:\"14pt\",\r\n\t\t//\t|\t\t\tletterSpacing:\"1.2em\"\r\n\t\t//\t|\t\t});\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tdojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling\r\n\t\t//\t\tdojo/dom-style.get() on every element of the list. See: `dojo/query` and `dojo/NodeList`\r\n\t\t//\t|\trequire([\"dojo/dom-style\", \"dojo/query\", \"dojo/NodeList-dom\"],\r\n\t\t//\t|\tfunction(domStyle, query){\r\n\t\t//\t|\t\tquery(\".someClassName\").style(\"visibility\",\"hidden\");\r\n\t\t//\t|\t\t// or\r\n\t\t//\t|\t\tquery(\"#baz > div\").style({\r\n\t\t//\t|\t\t\topacity:0.75,\r\n\t\t//\t|\t\t\tfontSize:\"13pt\"\r\n\t\t//\t|\t\t});\r\n\t\t//\t|\t});\r\n\r\n\t\tvar n = dom.byId(node), l = arguments.length, op = (name == \"opacity\");\r\n\t\tname = _floatAliases[name] ? \"cssFloat\" in n.style ? \"cssFloat\" : \"styleFloat\" : name;\r\n\t\tif(l == 3){\r\n\t\t\treturn op ? _setOpacity(n, value) : n.style[name] = value; // Number\r\n\t\t}\r\n\t\tfor(var x in name){\r\n\t\t\tstyle.set(node, x, name[x]);\r\n\t\t}\r\n\t\treturn style.getComputedStyle(n);\r\n\t};\r\n\r\n\treturn style;\r\n});\r\n"]}
{"version":3,"sources":["dom-prop.js"],"names":["define","exports","dojo","has","lang","dom","style","ctr","conn","_evtHdlrMap","_ctr","_attrId","_scopeName","add","global","doc","element","names","class","for","tabindex","readonly","colspan","frameborder","rowspan","textcontent","valuetype","get","node","name","byId","lc","toLowerCase","propName","getText","n","text","ch","childNodes","i","nodeType","nodeValue","set","value","arguments","length","x","tagName","col","colgroup","table","tbody","tfoot","thead","tr","title","empty","appendChild","toDom","ownerDocument","createTextNode","isFunction","attrId","h","disconnect","e","connect"],"mappings":";;;;;;;AAAAA,QAAQ,UAAW,iBAAkB,UAAW,eAAgB,QAAS,cAAe,kBAAmB,mBACzG,SAASC,EAASC,EAAMC,EAAKC,EAAMC,EAAKC,EAAOC,EAAKC,GAarD,IAAIC,KAAkBC,EAAO,EAAGC,EAAUT,EAAKU,WAAa,SAC5DT,EAAIU,IAAI,kBAAmB,SAAUC,EAAQC,EAAKC,GAAW,MAAO,gBAAiBA,IAErFf,EAAQgB,OAEPC,MAAS,YACTC,IAAO,UAEPC,SAAU,WACVC,SAAU,WACVC,QAAS,UACTC,YAAa,cACbC,QAAS,UACTC,YAAa,cACbC,UAAW,aAuBZzB,EAAQ0B,IAAM,SAAoCC,EAAiBC,GAqBlED,EAAOvB,EAAIyB,KAAKF,GAChB,IAAIG,EAAKF,EAAKG,cAAeC,EAAWhC,EAAQgB,MAAMc,IAAOF,EAE7D,MAAe,eAAZI,GAA8B9B,EAAI,mBAI9ByB,EAAKK,GAhDb,SAASC,EAAmBN,GAO3B,IADA,IACeO,EADXC,EAAO,GAAIC,EAAKT,EAAKU,WACjBC,EAAI,EAAMJ,EAAIE,EAAGE,GAAIA,IAEX,GAAdJ,EAAEK,WACa,GAAdL,EAAEK,SACJJ,GAAQF,EAAQC,GAEhBC,GAAQD,EAAEM,WAIb,OAAOL,EA4BCF,CAAQN,IAMjB3B,EAAQyC,IAAM,SAAoCd,EAAwBC,EAAkBc,GA2C3F,GAFAf,EAAOvB,EAAIyB,KAAKF,GAER,GADAgB,UAAUC,QACU,iBAARhB,EAAiB,CAEpC,IAAI,IAAIiB,KAAKjB,EACZ5B,EAAQyC,IAAId,EAAMkB,EAAGjB,EAAKiB,IAE3B,OAAOlB,EAER,IAAIG,EAAKF,EAAKG,cAAeC,EAAWhC,EAAQgB,MAAMc,IAAOF,EAC7D,GAAe,SAAZI,GAAuC,iBAATU,EAGhC,OADArC,EAAMoC,IAAId,EAAMe,GACTf,EAER,GAAe,aAAZK,EAUF,OAPG9B,EAAI,OAASyB,EAAKmB,QAAQf,gBAAkBgB,IAAK,EAAGC,SAAU,EAC9DC,MAAO,EAAGC,MAAO,EAAGC,MAAO,EAAGC,MAAO,EAAGC,GAAI,EAAGC,MAAO,IACxDhD,EAAIiD,MAAM5B,GACVA,EAAK6B,YAAYlD,EAAImD,MAAMf,EAAOf,EAAK+B,iBAEvC/B,EAAKK,GAAYU,EAEXf,EAER,GAAe,eAAZK,IAA8B9B,EAAI,mBAGpC,OAFAI,EAAIiD,MAAM5B,GACVA,EAAK6B,YAAY7B,EAAK+B,cAAcC,eAAejB,IAC5Cf,EAER,GAAGxB,EAAKyD,WAAWlB,GAAO,CAGzB,IAAImB,EAASlC,EAAKjB,GACdmD,IACHA,EAASpD,IACTkB,EAAKjB,GAAWmD,GAEbrD,EAAYqD,KACfrD,EAAYqD,OAEb,IAAIC,EAAItD,EAAYqD,GAAQ7B,GAC5B,GAAG8B,EAEFvD,EAAKwD,WAAWD,QAEhB,WACQnC,EAAKK,GACZ,MAAMgC,IASR,OANGtB,EAEFlC,EAAYqD,GAAQ7B,GAAYzB,EAAK0D,QAAQtC,EAAMK,EAAUU,GAE7Df,EAAKK,GAAY,KAEXL,EAGR,OADAA,EAAKK,GAAYU,EACVf","file":"../dom-prop.js","sourcesContent":["define([\"exports\", \"./_base/kernel\", \"./sniff\", \"./_base/lang\", \"./dom\", \"./dom-style\", \"./dom-construct\", \"./_base/connect\"],\r\n\t\tfunction(exports, dojo, has, lang, dom, style, ctr, conn){\r\n\t// module:\r\n\t//\t\tdojo/dom-prop\r\n\t// summary:\r\n\t//\t\tThis module defines the core dojo DOM properties API.\r\n\r\n\t// TODOC: summary not showing up in output, see https://github.com/csnover/js-doc-parse/issues/42\r\n\r\n\t// =============================\r\n\t// Element properties Functions\r\n\t// =============================\r\n\r\n\t// helper to connect events\r\n\tvar _evtHdlrMap = {}, _ctr = 0, _attrId = dojo._scopeName + \"attrid\";\r\n\thas.add('dom-textContent', function (global, doc, element) { return 'textContent' in element; });\r\n\r\n\texports.names = {\r\n\t\t// properties renamed to avoid clashes with reserved words\r\n\t\t\"class\": \"className\",\r\n\t\t\"for\": \"htmlFor\",\r\n\t\t// properties written as camelCase\r\n\t\ttabindex: \"tabIndex\",\r\n\t\treadonly: \"readOnly\",\r\n\t\tcolspan: \"colSpan\",\r\n\t\tframeborder: \"frameBorder\",\r\n\t\trowspan: \"rowSpan\",\r\n\t\ttextcontent: \"textContent\",\r\n\t\tvaluetype: \"valueType\"\r\n\t};\r\n\t\r\n\tfunction getText(/*DOMNode*/node){\r\n\t\t// summary:\r\n\t\t//\t\trecursion method for get('textContent') to use. Gets text value for a node.\r\n\t\t// description:\r\n\t\t//\t\tJuse uses nodedValue so things like <br/> tags do not end up in\r\n\t\t//\t\tthe text as any sort of line return.\r\n\t\tvar text = \"\", ch = node.childNodes;\r\n\t\tfor(var i = 0, n; n = ch[i]; i++){\r\n\t\t\t//Skip comments.\r\n\t\t\tif(n.nodeType != 8){\r\n\t\t\t\tif(n.nodeType == 1){\r\n\t\t\t\t\ttext += getText(n);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttext += n.nodeValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n\texports.get = function getProp(/*DOMNode|String*/ node, /*String*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tGets a property on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized getting of properties on DOM nodes.\r\n\t\t//\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to get the property on\r\n\t\t// name: String\r\n\t\t//\t\tthe name of the property to get.\r\n\t\t// returns:\r\n\t\t//\t\tthe value of the requested property or its default value\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// get the current value of the \"foo\" property on a node\r\n\t\t//\t|\trequire([\"dojo/dom-prop\", \"dojo/dom\"], function(domProp, dom){\r\n\t\t//\t|\t\tdomProp.get(dom.byId(\"nodeId\"), \"foo\");\r\n\t\t//\t|\t\t// or we can just pass the id:\r\n\t\t//\t|\t\tdomProp.get(\"nodeId\", \"foo\");\r\n\t\t//\t|\t});\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tvar lc = name.toLowerCase(), propName = exports.names[lc] || name;\r\n\t\t\r\n\t\tif(propName == \"textContent\" && !has(\"dom-textContent\")){\r\n\t\t\treturn getText(node);\r\n\t\t}\r\n\t\t\r\n\t\treturn node[propName];\t// Anything\r\n\t};\r\n\r\n\texports.set = function setProp(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tSets a property on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized setting of properties on DOM nodes.\r\n\t\t//\r\n\t\t//\t\tWhen passing functions as values, note that they will not be\r\n\t\t//\t\tdirectly assigned to slots on the node, but rather the default\r\n\t\t//\t\tbehavior will be removed and the new behavior will be added\r\n\t\t//\t\tusing `dojo.connect()`, meaning that event handler properties\r\n\t\t//\t\twill be normalized and that some caveats with regards to\r\n\t\t//\t\tnon-standard behaviors for onsubmit apply. Namely that you\r\n\t\t//\t\tshould cancel form submission using `dojo.stopEvent()` on the\r\n\t\t//\t\tpassed event object instead of returning a boolean value from\r\n\t\t//\t\tthe handler itself.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to set the property on\r\n\t\t// name: String|Object\r\n\t\t//\t\tthe name of the property to set, or a hash object to set\r\n\t\t//\t\tmultiple properties at once.\r\n\t\t// value: String?\r\n\t\t//\t\tThe value to set for the property\r\n\t\t// returns:\r\n\t\t//\t\tthe DOM node\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// use prop() to set the tab index\r\n\t\t//\t|\trequire([\"dojo/dom-prop\"], function(domProp){\r\n\t\t//\t|\t\tdomProp.set(\"nodeId\", \"tabIndex\", 3);\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tSet multiple values at once, including event handlers:\r\n\t\t//\t|\trequire([\"dojo/dom-prop\"], function(domProp){\r\n\t\t//\t|\t\tdomProp.set(\"formId\", {\r\n\t\t//\t|\t\t\t\"foo\": \"bar\",\r\n\t\t//\t|\t\t\t\"tabIndex\": -1,\r\n\t\t//\t|\t\t\t\"method\": \"POST\",\r\n\t\t//\t|\t\t});\r\n\t\t//\t|\t});\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tvar l = arguments.length;\r\n\t\tif(l == 2 && typeof name != \"string\"){ // inline'd type check\r\n\t\t\t// the object form of setter: the 2nd argument is a dictionary\r\n\t\t\tfor(var x in name){\r\n\t\t\t\texports.set(node, x, name[x]);\r\n\t\t\t}\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tvar lc = name.toLowerCase(), propName = exports.names[lc] || name;\r\n\t\tif(propName == \"style\" && typeof value != \"string\"){ // inline'd type check\r\n\t\t\t// special case: setting a style\r\n\t\t\tstyle.set(node, value);\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tif(propName == \"innerHTML\"){\r\n\t\t\t// special case: assigning HTML\r\n\t\t\t// the hash lists elements with read-only innerHTML on IE\r\n\t\t\tif(has(\"ie\") && node.tagName.toLowerCase() in {col: 1, colgroup: 1,\r\n\t\t\t\t\t\ttable: 1, tbody: 1, tfoot: 1, thead: 1, tr: 1, title: 1}){\r\n\t\t\t\tctr.empty(node);\r\n\t\t\t\tnode.appendChild(ctr.toDom(value, node.ownerDocument));\r\n\t\t\t}else{\r\n\t\t\t\tnode[propName] = value;\r\n\t\t\t}\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tif(propName == \"textContent\" && !has(\"dom-textContent\")) {\r\n\t\t\tctr.empty(node);\r\n\t\t\tnode.appendChild(node.ownerDocument.createTextNode(value));\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif(lang.isFunction(value)){\r\n\t\t\t// special case: assigning an event handler\r\n\t\t\t// clobber if we can\r\n\t\t\tvar attrId = node[_attrId];\r\n\t\t\tif(!attrId){\r\n\t\t\t\tattrId = _ctr++;\r\n\t\t\t\tnode[_attrId] = attrId;\r\n\t\t\t}\r\n\t\t\tif(!_evtHdlrMap[attrId]){\r\n\t\t\t\t_evtHdlrMap[attrId] = {};\r\n\t\t\t}\r\n\t\t\tvar h = _evtHdlrMap[attrId][propName];\r\n\t\t\tif(h){\r\n\t\t\t\t//h.remove();\r\n\t\t\t\tconn.disconnect(h);\r\n\t\t\t}else{\r\n\t\t\t\ttry{\r\n\t\t\t\t\tdelete node[propName];\r\n\t\t\t\t}catch(e){}\r\n\t\t\t}\r\n\t\t\t// ensure that event objects are normalized, etc.\r\n\t\t\tif(value){\r\n\t\t\t\t//_evtHdlrMap[attrId][propName] = on(node, propName, value);\r\n\t\t\t\t_evtHdlrMap[attrId][propName] = conn.connect(node, propName, value);\r\n\t\t\t}else{\r\n\t\t\t\tnode[propName] = null;\r\n\t\t\t}\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tnode[propName] = value;\r\n\t\treturn node;\t// DomNode\r\n\t};\r\n});\r\n"]}
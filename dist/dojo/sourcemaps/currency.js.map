{"version":3,"sources":["currency.js"],"names":["define","darray","lang","dnumber","i18n","nlsCurrency","cldrMonetary","currency","setObject","_mixInDefaults","options","type","bundle","getLocalization","locale","iso","data","getData","forEach","prop","fractional","mixin","format","value","regexp","parse","expression"],"mappings":";;;;;;;AAAAA,QACC,gBACA,eAEA,WACA,SAAU,6BACV,mBACE,SAASC,EAAQC,EAA+BC,EAASC,EAAMC,EAAaC,GAK/E,IAAIC,KAoHJ,OAxGAL,EAAKM,UAAU,gBAAiBD,GAEhCA,EAASE,eAAiB,SAASC,IAClCA,EAAUA,OACFC,KAAO,WAGf,IAAIC,EAASR,EAAKS,gBAAgB,YAAa,WAAYH,EAAQI,YAG/DC,EAAML,EAAQH,SACdS,EAAOV,EAAaW,QAAQF,GAShC,OAPAd,EAAOiB,SAAS,cAAc,SAAS,QAAQ,WAAY,SAASC,GACnEH,EAAKG,GAAQP,EAAOG,EAAI,IAAII,KAG7BH,EAAKI,aAAc,GAAM,GAGlBlB,EAAKmB,MAAML,EAAMN,IAsBzBH,EAASe,OAAS,SAAoBC,EAA4Bb,GAajE,OAAOP,EAAQmB,OAAOC,EAAOhB,EAASE,eAAeC,KAGtDH,EAASiB,OAAS,SAAsCd,GAQvD,OAAOP,EAAQqB,OAAOjB,EAASE,eAAeC,KAsB/CH,EAASkB,MAAQ,SAAoBC,EAAgChB,GAapE,OAAOP,EAAQsB,MAAMC,EAAYnB,EAASE,eAAeC,KAGnDH","file":"../currency.js","sourcesContent":["define([\r\n\t\"./_base/array\",\r\n\t\"./_base/lang\",\r\n\t/*===== \"./_base/declare\", =====*/\r\n\t\"./number\",\r\n\t\"./i18n\", \"./i18n!./cldr/nls/currency\",\r\n\t\"./cldr/monetary\"\r\n], function(darray, lang, /*===== declare, =====*/ dnumber, i18n, nlsCurrency, cldrMonetary){\r\n\r\n// module:\r\n//\t\tdojo/currency\r\n\r\nvar currency = {\r\n\t// summary:\r\n\t//\t\tlocalized formatting and parsing routines for currencies\r\n\t// description:\r\n\t//\t\textends dojo.number to provide culturally-appropriate formatting of values\r\n\t//\t\tin various world currencies, including use of a currency symbol.  The currencies are specified\r\n\t//\t\tby a three-letter international symbol in all uppercase, and support for the currencies is\r\n\t//\t\tprovided by the data in `dojo.cldr`.  The scripts generating dojo.cldr specify which\r\n\t//\t\tcurrency support is included.  A fixed number of decimal places is determined based\r\n\t//\t\ton the currency type and is not determined by the 'pattern' argument.  The fractional\r\n\t//\t\tportion is optional, by default, and variable length decimals are not supported.\r\n};\r\nlang.setObject(\"dojo.currency\", currency);\r\n\r\ncurrency._mixInDefaults = function(options){\r\n\toptions = options || {};\r\n\toptions.type = \"currency\";\r\n\r\n\t// Get locale-dependent currency data, like the symbol\r\n\tvar bundle = i18n.getLocalization(\"dojo.cldr\", \"currency\", options.locale) || {};\r\n\r\n\t// Mixin locale-independent currency data, like # of places\r\n\tvar iso = options.currency;\r\n\tvar data = cldrMonetary.getData(iso);\r\n\r\n\tdarray.forEach([\"displayName\",\"symbol\",\"group\",\"decimal\"], function(prop){\r\n\t\tdata[prop] = bundle[iso+\"_\"+prop];\r\n\t});\r\n\r\n\tdata.fractional = [true, false];\r\n\r\n\t// Mixin with provided options\r\n\treturn lang.mixin(data, options);\r\n};\r\n\r\n/*=====\r\ncurrency.__FormatOptions = declare([dnumber.__FormatOptions], {\r\n\t// type: String?\r\n\t//\t\tShould not be set.  Value is assumed to be \"currency\".\r\n\t// symbol: String?\r\n\t//\t\tlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`\r\n\t//\t\tA [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\r\n\t// currency: String?\r\n\t//\t\tan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\".\r\n\t//\t\tFor use with dojo.currency only.\r\n\t// places: Number?\r\n\t//\t\tnumber of decimal places to show.  Default is defined based on which currency is used.\r\n\ttype: \"\",\r\n\tsymbol: \"\",\r\n\tcurrency: \"\",\r\n\tplaces: \"\"\r\n});\r\n=====*/\r\n\r\ncurrency.format = function(/*Number*/ value, /*__FormatOptions?*/ options){\r\n\t// summary:\r\n\t//\t\tFormat a Number as a currency, using locale-specific settings\r\n\t//\r\n\t// description:\r\n\t//\t\tCreate a string from a Number using a known, localized pattern.\r\n\t//\t\t[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements)\r\n\t//\t\tappropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr)\r\n\t//\t\tas well as the appropriate symbols and delimiters and number of decimal places.\r\n\t//\r\n\t// value:\r\n\t//\t\tthe number to be formatted.\r\n\r\n\treturn dnumber.format(value, currency._mixInDefaults(options));\r\n};\r\n\r\ncurrency.regexp = function(/*dnumber.__RegexpOptions?*/ options){\r\n\t//\r\n\t// summary:\r\n\t//\t\tBuilds the regular needed to parse a currency value\r\n\t//\r\n\t// description:\r\n\t//\t\tReturns regular expression with positive and negative match, group and decimal separators\r\n\t//\t\tNote: the options.places default, the number of decimal places to accept, is defined by the currency type.\r\n\treturn dnumber.regexp(currency._mixInDefaults(options)); // String\r\n};\r\n\r\n/*=====\r\nvar __ParseOptions = currency.__ParseOptions = declare(dnumber.__ParseOptions, {\r\n\t// type: String?\r\n\t//\t\tShould not be set.  Value is assumed to be currency.\r\n\t// currency: String?\r\n\t//\t\tan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\".\r\n\t//\t\tFor use with dojo.currency only.\r\n\t// symbol: String?\r\n\t//\t\tlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`\r\n\t//\t\tA [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\r\n\t// places: Number?\r\n\t//\t\tfixed number of decimal places to accept.  The default is determined based on which currency is used.\r\n\t// fractional: Boolean|Array?\r\n\t//\t\tWhether to include the fractional portion, where the number of decimal places are implied by the currency\r\n\t//\t\tor explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.\r\n\t//\t\tBy default for currencies, it the fractional portion is optional.\r\n});\r\n=====*/\r\n\r\ncurrency.parse = function(/*String*/ expression, /*__ParseOptions?*/ options){\r\n\t//\r\n\t// summary:\r\n\t//\t\tConvert a properly formatted currency string to a primitive Number,\r\n\t//\t\tusing locale-specific settings.\r\n\t// description:\r\n\t//\t\tCreate a Number from a string using a known, localized pattern.\r\n\t//\t\t[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)\r\n\t//\t\tare chosen appropriate to the locale, as well as the appropriate symbols and delimiters\r\n\t//\t\tand number of decimal places.\r\n\t// expression:\r\n\t//\t\tA string representation of a currency value\r\n\r\n\treturn dnumber.parse(expression, currency._mixInDefaults(options));\r\n};\r\n\r\nreturn currency;\r\n});\r\n"]}
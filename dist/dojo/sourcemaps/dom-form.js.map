{"version":3,"sources":["dom-form.js"],"names":["define","lang","dom","ioq","json","setValue","obj","name","value","val","isArray","push","form","fieldToObject","inputNode","ret","byId","_in","type","toLowerCase","disabled","checked","multiple","nodes","firstChild","length","node","pop","nextSibling","nodeType","tagName","selected","toObject","formNode","elems","elements","i","l","item","indexOf","x","y","toQuery","objectToQuery","toJson","prettyPrint","stringify"],"mappings":";;;;;;;AAAAA,QAAQ,eAAgB,QAAS,aAAc,UAAW,SAASC,EAAMC,EAAKC,EAAKC,GAI/E,SAASC,EAAoBC,EAAgBC,EAAiBC,GAO1D,GAAa,OAAVA,EAAH,CAIA,IAAIC,EAAMH,EAAIC,GACG,iBAAPE,EACNH,EAAIC,IAASE,EAAKD,GACbP,EAAKS,QAAQD,GAClBA,EAAIE,KAAKH,GAETF,EAAIC,GAAQC,GAIvB,IAEII,GAIHC,cAAe,SAA0CC,GAWxD,IAAIC,EAAM,KAEV,GADAD,EAAYZ,EAAIc,KAAKF,GACR,CACZ,IAAIG,EAAMH,EAAUP,KAAMW,GAAQJ,EAAUI,MAAQ,IAAIC,cACxD,GAAGF,GAAOC,IAASJ,EAAUM,SAC5B,GAAW,SAARF,GAA2B,YAARA,EAClBJ,EAAUO,UACZN,EAAMD,EAAUN,YAEZ,GAAGM,EAAUQ,SAAS,CAC3BP,KAEA,IADA,IAAIQ,GAAST,EAAUU,YACjBD,EAAME,QACX,IAAI,IAAIC,EAAOH,EAAMI,MAAOD,EAAMA,EAAOA,EAAKE,YAAY,CACzD,GAAoB,GAAjBF,EAAKG,UAA+C,UAA9BH,EAAKI,QAAQX,cAIjC,CACDO,EAAKE,aACPL,EAAMZ,KAAKe,EAAKE,aAEdF,EAAKF,YACPD,EAAMZ,KAAKe,EAAKF,YAEjB,MAVGE,EAAKK,UACPhB,EAAIJ,KAAKe,EAAKlB,aAclBO,EAAMD,EAAUN,MAInB,OAAOO,GAGRiB,SAAU,SAAyCC,GAkClD,IADA,IAAIlB,KAAUmB,EAAQhC,EAAIc,KAAKiB,GAAUE,SACjCC,EAAI,EAAGC,EAAIH,EAAMT,OAAQW,EAAIC,IAAKD,EAAE,CAC3C,IAAIE,EAAOJ,EAAME,GAAInB,EAAMqB,EAAK/B,KAAMW,GAAQoB,EAAKpB,MAAQ,IAAIC,cAC5DF,GAAOC,GA1FC,iCA0FeqB,QAAQrB,GAAQ,IAAMoB,EAAKlB,WACpDf,EAASU,EAAKE,EAAKL,EAAKC,cAAcyB,IAC3B,SAARpB,IACFH,EAAIE,EAAM,MAAQF,EAAIE,EAAM,MAAQF,EAAIE,GAAKuB,EAAIzB,EAAIE,GAAKwB,EAAI,IAIjE,OAAO1B,GAGR2B,QAAS,SAAwCT,GAOhD,OAAO9B,EAAIwC,cAAc/B,EAAKoB,SAASC,KAGxCW,OAAQ,SAAuCX,EAAuBY,GAQrE,OAAOzC,EAAK0C,UAAUlC,EAAKoB,SAASC,GAAW,KAAMY,EAAc,EAAI,KAItE,OAAOjC","file":"../dom-form.js","sourcesContent":["define([\"./_base/lang\", \"./dom\", \"./io-query\", \"./json\"], function(lang, dom, ioq, json){\r\n\t// module:\r\n\t//\t\tdojo/dom-form\r\n\r\n    function setValue(/*Object*/ obj, /*String*/ name, /*String*/ value){\r\n        // summary:\r\n        //\t\tFor the named property in object, set the value. If a value\r\n        //\t\talready exists and it is a string, convert the value to be an\r\n        //\t\tarray of values.\r\n\r\n        // Skip it if there is no value\r\n        if(value === null){\r\n            return;\r\n        }\r\n\r\n        var val = obj[name];\r\n        if(typeof val == \"string\"){ // inline'd type check\r\n            obj[name] = [val, value];\r\n        }else if(lang.isArray(val)){\r\n            val.push(value);\r\n        }else{\r\n            obj[name] = value;\r\n        }\r\n    }\r\n\r\n\tvar exclude = \"file|submit|image|reset|button\";\r\n\r\n\tvar form = {\r\n\t\t// summary:\r\n\t\t//\t\tThis module defines form-processing functions.\r\n\r\n\t\tfieldToObject: function fieldToObject(/*DOMNode|String*/ inputNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSerialize a form field to a JavaScript object.\r\n\t\t\t// description:\r\n\t\t\t//\t\tReturns the value encoded in a form field as\r\n\t\t\t//\t\tas a string or an array of strings. Disabled form elements\r\n\t\t\t//\t\tand unchecked radio and checkboxes are skipped.\tMulti-select\r\n\t\t\t//\t\telements are returned as an array of string values.\r\n\t\t\t// inputNode: DOMNode|String\r\n\t\t\t// returns: Object\r\n\r\n\t\t\tvar ret = null;\r\n\t\t\tinputNode = dom.byId(inputNode);\r\n\t\t\tif(inputNode){\r\n\t\t\t\tvar _in = inputNode.name, type = (inputNode.type || \"\").toLowerCase();\r\n\t\t\t\tif(_in && type && !inputNode.disabled){\r\n\t\t\t\t\tif(type == \"radio\" || type == \"checkbox\"){\r\n\t\t\t\t\t\tif(inputNode.checked){\r\n\t\t\t\t\t\t\tret = inputNode.value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(inputNode.multiple){\r\n\t\t\t\t\t\tret = [];\r\n\t\t\t\t\t\tvar nodes = [inputNode.firstChild];\r\n\t\t\t\t\t\twhile(nodes.length){\r\n\t\t\t\t\t\t\tfor(var node = nodes.pop(); node; node = node.nextSibling){\r\n\t\t\t\t\t\t\t\tif(node.nodeType == 1 && node.tagName.toLowerCase() == \"option\"){\r\n\t\t\t\t\t\t\t\t\tif(node.selected){\r\n\t\t\t\t\t\t\t\t\t\tret.push(node.value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tif(node.nextSibling){\r\n\t\t\t\t\t\t\t\t\t\tnodes.push(node.nextSibling);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(node.firstChild){\r\n\t\t\t\t\t\t\t\t\t\tnodes.push(node.firstChild);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tret = inputNode.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ret; // Object\r\n\t\t},\r\n\r\n\t\ttoObject: function formToObject(/*DOMNode|String*/ formNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSerialize a form node to a JavaScript object.\r\n\t\t\t// description:\r\n\t\t\t//\t\tReturns the values encoded in an HTML form as\r\n\t\t\t//\t\tstring properties in an object which it then returns. Disabled form\r\n\t\t\t//\t\telements, buttons, and other non-value form elements are skipped.\r\n\t\t\t//\t\tMulti-select elements are returned as an array of string values.\r\n\t\t\t// formNode: DOMNode|String\r\n\t\t\t// example:\r\n\t\t\t//\t\tThis form:\r\n\t\t\t//\t\t|\t<form id=\"test_form\">\r\n\t\t\t//\t\t|\t\t<input type=\"text\" name=\"blah\" value=\"blah\">\r\n\t\t\t//\t\t|\t\t<input type=\"text\" name=\"no_value\" value=\"blah\" disabled>\r\n\t\t\t//\t\t|\t\t<input type=\"button\" name=\"no_value2\" value=\"blah\">\r\n\t\t\t//\t\t|\t\t<select type=\"select\" multiple name=\"multi\" size=\"5\">\r\n\t\t\t//\t\t|\t\t\t<option value=\"blah\">blah</option>\r\n\t\t\t//\t\t|\t\t\t<option value=\"thud\" selected>thud</option>\r\n\t\t\t//\t\t|\t\t\t<option value=\"thonk\" selected>thonk</option>\r\n\t\t\t//\t\t|\t\t</select>\r\n\t\t\t//\t\t|\t</form>\r\n\t\t\t//\r\n\t\t\t//\t\tyields this object structure as the result of a call to\r\n\t\t\t//\t\tformToObject():\r\n\t\t\t//\r\n\t\t\t//\t\t|\t{\r\n\t\t\t//\t\t|\t\tblah: \"blah\",\r\n\t\t\t//\t\t|\t\tmulti: [\r\n\t\t\t//\t\t|\t\t\t\"thud\",\r\n\t\t\t//\t\t|\t\t\t\"thonk\"\r\n\t\t\t//\t\t|\t\t]\r\n\t\t\t//\t\t|\t};\r\n\r\n\t\t\tvar ret = {}, elems = dom.byId(formNode).elements;\r\n\t\t\tfor(var i = 0, l = elems.length; i < l; ++i){\r\n\t\t\t\tvar item = elems[i], _in = item.name, type = (item.type || \"\").toLowerCase();\r\n\t\t\t\tif(_in && type && exclude.indexOf(type) < 0 && !item.disabled){\r\n\t\t\t\t\tsetValue(ret, _in, form.fieldToObject(item));\r\n\t\t\t\t\tif(type == \"image\"){\r\n\t\t\t\t\t\tret[_in + \".x\"] = ret[_in + \".y\"] = ret[_in].x = ret[_in].y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ret; // Object\r\n\t\t},\r\n\r\n\t\ttoQuery: function formToQuery(/*DOMNode|String*/ formNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a URL-encoded string representing the form passed as either a\r\n\t\t\t//\t\tnode or string ID identifying the form to serialize\r\n\t\t\t// formNode: DOMNode|String\r\n\t\t\t// returns: String\r\n\r\n\t\t\treturn ioq.objectToQuery(form.toObject(formNode)); // String\r\n\t\t},\r\n\r\n\t\ttoJson: function formToJson(/*DOMNode|String*/ formNode, /*Boolean?*/ prettyPrint){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a serialized JSON string from a form node or string\r\n\t\t\t//\t\tID identifying the form to serialize\r\n\t\t\t// formNode: DOMNode|String\r\n\t\t\t// prettyPrint: Boolean?\r\n\t\t\t// returns: String\r\n\r\n\t\t\treturn json.stringify(form.toObject(formNode), null, prettyPrint ? 4 : 0); // String\r\n\t\t}\r\n\t};\r\n\r\n    return form;\r\n});\r\n"]}
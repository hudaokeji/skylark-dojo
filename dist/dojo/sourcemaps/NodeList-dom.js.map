{"version":3,"sources":["NodeList-dom.js"],"names":["define","dojo","query","array","lang","domCls","domCtr","domGeom","domAttr","domStyle","magicGuard","a","length","orphan","node","p","parentNode","removeChild","NodeList","awc","_adaptWithCondition","aafe","_adaptAsForEach","aam","_adaptAsMap","getSet","module","name","value","arguments","set","extend","_normalize","content","refNode","parse","template","templateFunc","string","substitute","type","toDom","ownerDocument","nodeType","_toArray","childNodes","isArrayLike","isArray","_runParse","_cloneNode","cloneNode","_place","ary","position","useClone","tempNode","rNode","i","this","parser","createElement","appendChild","firstChild","place","insertBefore","attr","style","addClass","add","removeClass","remove","toggleClass","toggle","replaceClass","replace","empty","removeAttr","marginBox","getMarginBox","queryOrNode","item","forEach","filter","_filterResult","adopt","queryOrListOrNode","_stash","queryStr","ret","map","subNode","undefined","push","items","start","_wrap","addContent"],"mappings":"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","file":"../NodeList-dom.js","sourcesContent":["define([\"./_base/kernel\", \"./query\", \"./_base/array\", \"./_base/lang\", \"./dom-class\", \"./dom-construct\", \"./dom-geometry\", \"./dom-attr\", \"./dom-style\"], function(dojo, query, array, lang, domCls, domCtr, domGeom, domAttr, domStyle){\r\n\r\n\t// module:\r\n\t//\t\tdojo/NodeList-dom.js\r\n\r\n\t/*=====\r\n\t return function(){\r\n\t\t // summary:\r\n\t\t //\t\tAdds DOM related methods to NodeList, and returns NodeList constructor.\r\n\t };\r\n\t =====*/\r\n\r\n\tvar magicGuard = function(a){\r\n\t\t// summary:\r\n\t\t//\t\tthe guard function for dojo/dom-attr() and dojo/dom-style()\r\n\t\treturn a.length == 1 && (typeof a[0] == \"string\"); // inline'd type check\r\n\t};\r\n\r\n\tvar orphan = function(node){\r\n\t\t// summary:\r\n\t\t//\t\tfunction to orphan nodes\r\n\t\tvar p = node.parentNode;\r\n\t\tif(p){\r\n\t\t\tp.removeChild(node);\r\n\t\t}\r\n\t};\r\n\t// FIXME: should we move orphan() to dojo/_base/html?\r\n\r\n\tvar NodeList = query.NodeList,\r\n\t\tawc = NodeList._adaptWithCondition,\r\n\t\taafe = NodeList._adaptAsForEach,\r\n\t\taam = NodeList._adaptAsMap;\r\n\r\n\tfunction getSet(module){\r\n\t\treturn function(node, name, value){\r\n\t\t\tif(arguments.length == 2){\r\n\t\t\t\treturn module[typeof name == \"string\" ? \"get\" : \"set\"](node, name);\r\n\t\t\t}\r\n\t\t\t// setter\r\n\t\t\treturn module.set(node, name, value);\r\n\t\t};\r\n\t}\r\n\r\n\tlang.extend(NodeList, {\r\n\t\t_normalize: function(/*String||Element||Object||NodeList*/content, /*DOMNode?*/refNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tnormalizes data to an array of items to insert.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIf content is an object, it can have special properties \"template\" and\r\n\t\t\t//\t\t\"parse\". If \"template\" is defined, then the template value is run through\r\n\t\t\t//\t\tdojo/string.substitute (if dojo/string.substitute() has been required elsewhere),\r\n\t\t\t//\t\tor if templateFunc is a function on the content, that function will be used to\r\n\t\t\t//\t\ttransform the template into a final string to be used for for passing to dojo/dom-construct.toDom().\r\n\t\t\t//\t\tIf content.parse is true, then it is remembered for later, for when the content\r\n\t\t\t//\t\tnodes are inserted into the DOM. At that point, the nodes will be parsed for widgets\r\n\t\t\t//\t\t(if dojo/parser has been required elsewhere).\r\n\r\n\t\t\t//Wanted to just use a DocumentFragment, but for the array/NodeList\r\n\t\t\t//case that meant using cloneNode, but we may not want that.\r\n\t\t\t//Cloning should only happen if the node operations span\r\n\t\t\t//multiple refNodes. Also, need a real array, not a NodeList from the\r\n\t\t\t//DOM since the node movements could change those NodeLists.\r\n\r\n\t\t\tvar parse = content.parse === true;\r\n\r\n\t\t\t//Do we have an object that needs to be run through a template?\r\n\t\t\tif(typeof content.template == \"string\"){\r\n\t\t\t\tvar templateFunc = content.templateFunc || (dojo.string && dojo.string.substitute);\r\n\t\t\t\tcontent = templateFunc ? templateFunc(content.template, content) : content;\r\n\t\t\t}\r\n\r\n\t\t\tvar type = (typeof content);\r\n\t\t\tif(type == \"string\" || type == \"number\"){\r\n\t\t\t\tcontent = domCtr.toDom(content, (refNode && refNode.ownerDocument));\r\n\t\t\t\tif(content.nodeType == 11){\r\n\t\t\t\t\t//DocumentFragment. It cannot handle cloneNode calls, so pull out the children.\r\n\t\t\t\t\tcontent = lang._toArray(content.childNodes);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcontent = [content];\r\n\t\t\t\t}\r\n\t\t\t}else if(!lang.isArrayLike(content)){\r\n\t\t\t\tcontent = [content];\r\n\t\t\t}else if(!lang.isArray(content)){\r\n\t\t\t\t//To get to this point, content is array-like, but\r\n\t\t\t\t//not an array, which likely means a DOM NodeList. Convert it now.\r\n\t\t\t\tcontent = lang._toArray(content);\r\n\t\t\t}\r\n\r\n\t\t\t//Pass around the parse info\r\n\t\t\tif(parse){\r\n\t\t\t\tcontent._runParse = true;\r\n\t\t\t}\r\n\t\t\treturn content; //Array\r\n\t\t},\r\n\r\n\t\t_cloneNode: function(/*DOMNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprivate utility to clone a node. Not very interesting in the vanilla\r\n\t\t\t//\t\tdojo/NodeList case, but delegates could do interesting things like\r\n\t\t\t//\t\tclone event handlers if that is derivable from the node.\r\n\t\t\treturn node.cloneNode(true);\r\n\t\t},\r\n\r\n\t\t_place: function(/*Array*/ary, /*DOMNode*/refNode, /*String*/position, /*Boolean*/useClone){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprivate utility to handle placing an array of nodes relative to another node.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAllows for cloning the nodes in the array, and for\r\n\t\t\t//\t\toptionally parsing widgets, if ary._runParse is true.\r\n\r\n\t\t\t//Avoid a disallowed operation if trying to do an innerHTML on a non-element node.\r\n\t\t\tif(refNode.nodeType != 1 && position == \"only\"){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar rNode = refNode, tempNode;\r\n\r\n\t\t\t//Always cycle backwards in case the array is really a\r\n\t\t\t//DOM NodeList and the DOM operations take it out of the live collection.\r\n\t\t\tvar length = ary.length;\r\n\t\t\tfor(var i = length - 1; i >= 0; i--){\r\n\t\t\t\tvar node = (useClone ? this._cloneNode(ary[i]) : ary[i]);\r\n\r\n\t\t\t\t//If need widget parsing, use a temp node, instead of waiting after inserting into\r\n\t\t\t\t//real DOM because we need to start widget parsing at one node up from current node,\r\n\t\t\t\t//which could cause some already parsed widgets to be parsed again.\r\n\t\t\t\tif(ary._runParse && dojo.parser && dojo.parser.parse){\r\n\t\t\t\t\tif(!tempNode){\r\n\t\t\t\t\t\ttempNode = rNode.ownerDocument.createElement(\"div\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttempNode.appendChild(node);\r\n\t\t\t\t\tdojo.parser.parse(tempNode);\r\n\t\t\t\t\tnode = tempNode.firstChild;\r\n\t\t\t\t\twhile(tempNode.firstChild){\r\n\t\t\t\t\t\ttempNode.removeChild(tempNode.firstChild);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(i == length - 1){\r\n\t\t\t\t\tdomCtr.place(node, rNode, position);\r\n\t\t\t\t}else{\r\n\t\t\t\t\trNode.parentNode.insertBefore(node, rNode);\r\n\t\t\t\t}\r\n\t\t\t\trNode = node;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\tposition: aam(domGeom.position),\r\n\t\t/*=====\r\n\t\tposition: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns border-box objects (x/y/w/h) of all elements in a node list\r\n\t\t\t//\t\tas an Array (*not* a NodeList). Acts like `dojo/dom-geometry-position`, though\r\n\t\t\t//\t\tassumes the node passed is each node in this list.\r\n\r\n\t\t\treturn dojo.map(this, dojo.position); // Array\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\tattr: awc(getSet(domAttr), magicGuard),\r\n\t\t/*=====\r\n\t\tattr: function(property, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tgets or sets the DOM attribute for every element in the\r\n\t\t\t//\t\tNodeList. See also `dojo/dom-attr`\r\n\t\t\t// property: String\r\n\t\t\t//\t\tthe attribute to get/set\r\n\t\t\t// value: String?\r\n\t\t\t//\t\toptional. The value to set the property to\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is an array of attribute values\r\n\t\t\t//\t\tIf a value is passed, the return is this NodeList\r\n\t\t\t// example:\r\n\t\t\t//\t\tMake all nodes with a particular class focusable:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\r\n\t\t\t//\t|\t\tquery(\".focusable\").attr(\"tabIndex\", -1);\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tDisable a group of buttons:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\r\n\t\t\t//\t|\t\tquery(\"button.group\").attr(\"disabled\", true);\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tinnerHTML can be assigned or retrieved as well:\r\n\t\t\t//\t|\t// get the innerHTML (as an array) for each list item\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"], function(query){\r\n\t\t\t//\t|\t\tvar ih = query(\"li.replaceable\").attr(\"innerHTML\");\r\n\t\t\t//\t|\t});\r\n\t\t\treturn; // dojo/NodeList|Array\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\tstyle: awc(getSet(domStyle), magicGuard),\r\n\t\t/*=====\r\n\t\tstyle: function(property, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tgets or sets the CSS property for every element in the NodeList\r\n\t\t\t// property: String\r\n\t\t\t//\t\tthe CSS property to get/set, in JavaScript notation\r\n\t\t\t//\t\t(\"lineHieght\" instead of \"line-height\")\r\n\t\t\t// value: String?\r\n\t\t\t//\t\toptional. The value to set the property to\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is an array of strings.\r\n\t\t\t//\t\tIf a value is passed, the return is this NodeList\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t\treturn; // Array\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\taddClass: aafe(domCls.add),\r\n\t\t/*=====\r\n\t\taddClass: function(className){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadds the specified class to every node in the list\r\n\t\t\t// className: String|Array\r\n\t\t\t//\t\tA String class name to add, or several space-separated class names,\r\n\t\t\t//\t\tor an array of class names.\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\tremoveClass: aafe(domCls.remove),\r\n\t\t/*=====\r\n\t\tremoveClass: function(className){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tremoves the specified class from every node in the list\r\n\t\t\t// className: String|Array?\r\n\t\t\t//\t\tAn optional String class name to remove, or several space-separated\r\n\t\t\t//\t\tclass names, or an array of class names. If omitted, all class names\r\n\t\t\t//\t\twill be deleted.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthis list\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\ttoggleClass: aafe(domCls.toggle),\r\n\t\t/*=====\r\n\t\ttoggleClass: function(className, condition){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds a class to node if not present, or removes if present.\r\n\t\t\t//\t\tPass a boolean condition if you want to explicitly add or remove.\r\n\t\t\t// condition: Boolean?\r\n\t\t\t//\t\tIf passed, true means to add the class, false means to remove.\r\n\t\t\t// className: String\r\n\t\t\t//\t\tthe CSS class to add\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\treplaceClass: aafe(domCls.replace),\r\n\t\t/*=====\r\n\t\treplaceClass: function(addClassStr, removeClassStr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReplaces one or more classes on a node if not present.\r\n\t\t\t//\t\tOperates more quickly than calling `removeClass()` and `addClass()`\r\n\t\t\t// addClassStr: String|Array\r\n\t\t\t//\t\tA String class name to add, or several space-separated class names,\r\n\t\t\t//\t\tor an array of class names.\r\n\t\t\t// removeClassStr: String|Array?\r\n\t\t\t//\t\tA String class name to remove, or several space-separated class names,\r\n\t\t\t//\t\tor an array of class names.\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t },\r\n\t\t =====*/\r\n\r\n\t\tempty: aafe(domCtr.empty),\r\n\t\t/*=====\r\n\t\tempty: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tclears all content from each node in the list. Effectively\r\n\t\t\t//\t\tequivalent to removing all child nodes from every item in\r\n\t\t\t//\t\tthe list.\r\n\t\t\treturn this.forEach(\"item.innerHTML='';\"); // dojo/NodeList\r\n\t\t\t// FIXME: should we be checking for and/or disposing of widgets below these nodes?\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\tremoveAttr: aafe(domAttr.remove),\r\n\t\t/*=====\r\n\t\t removeAttr: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves an attribute from each node in the list.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tthe name of the attribute to remove\r\n\t\t\treturn;\t\t// dojo/NodeList\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\tmarginBox: aam(domGeom.getMarginBox),\r\n\t\t/*=====\r\n\t\tmarginBox: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns margin-box size of nodes\r\n\t\t \treturn; // dojo/NodeList\r\n\t\t },\r\n\t\t =====*/\r\n\r\n\t\t// FIXME: connectPublisher()? connectRunOnce()?\r\n\r\n\t\t/*\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tdestroys every item in the list.\r\n\t\t\tthis.forEach(d.destroy);\r\n\t\t\t// FIXME: should we be checking for and/or disposing of widgets below these nodes?\r\n\t\t},\r\n\t\t*/\r\n\r\n\t\tplace: function(/*String||Node*/ queryOrNode, /*String*/ position){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tplaces elements of this node list relative to the first element matched\r\n\t\t\t//\t\tby queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n\t\t\t// queryOrNode:\r\n\t\t\t//\t\tmay be a string representing any valid CSS3 selector or a DOM node.\r\n\t\t\t//\t\tIn the selector case, only the first matching element will be used\r\n\t\t\t//\t\tfor relative positioning.\r\n\t\t\t// position:\r\n\t\t\t//\t\tcan be one of:\r\n\t\t\t//\r\n\t\t\t//\t\t-\t\"last\" (default)\r\n\t\t\t//\t\t-\t\"first\"\r\n\t\t\t//\t\t-\t\"before\"\r\n\t\t\t//\t\t-\t\"after\"\r\n\t\t\t//\t\t-\t\"only\"\r\n\t\t\t//\t\t-\t\"replace\"\r\n\t\t\t//\r\n\t\t\t//\t\tor an offset in the childNodes property\r\n\t\t\tvar item = query(queryOrNode)[0];\r\n\t\t\treturn this.forEach(function(node){ domCtr.place(node, item, position); }); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\torphan: function(/*String?*/ filter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tremoves elements in this list that match the filter\r\n\t\t\t//\t\tfrom their parents and returns them as a new NodeList.\r\n\t\t\t// filter:\r\n\t\t\t//\t\tCSS selector like \".foo\" or \"div > span\"\r\n\t\t\t// returns:\r\n\t\t\t//\t\tNodeList containing the orphaned elements\r\n\t\t\treturn (filter ? query._filterResult(this, filter) : this).forEach(orphan); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tadopt: function(/*String||Array||DomNode*/ queryOrListOrNode, /*String?*/ position){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tplaces any/all elements in queryOrListOrNode at a\r\n\t\t\t//\t\tposition relative to the first element in this list.\r\n\t\t\t//\t\tReturns a dojo/NodeList of the adopted elements.\r\n\t\t\t// queryOrListOrNode:\r\n\t\t\t//\t\ta DOM node or a query string or a query result.\r\n\t\t\t//\t\tRepresents the nodes to be adopted relative to the\r\n\t\t\t//\t\tfirst element of this NodeList.\r\n\t\t\t// position:\r\n\t\t\t//\t\tcan be one of:\r\n\t\t\t//\r\n\t\t\t//\t\t-\t\"last\" (default)\r\n\t\t\t//\t\t-\t\"first\"\r\n\t\t\t//\t\t-\t\"before\"\r\n\t\t\t//\t\t-\t\"after\"\r\n\t\t\t//\t\t-\t\"only\"\r\n\t\t\t//\t\t-\t\"replace\"\r\n\t\t\t//\r\n\t\t\t//\t\tor an offset in the childNodes property\r\n\t\t\treturn query(queryOrListOrNode).place(this[0], position)._stash(this);\t// dojo/NodeList\r\n\t\t},\r\n\r\n\t\t// FIXME: do we need this?\r\n\t\tquery: function(/*String*/ queryStr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a new list whose members match the passed query,\r\n\t\t\t//\t\tassuming elements of the current NodeList as the root for\r\n\t\t\t//\t\teach search.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\">\r\n\t\t\t//\t|\t\t<p>\r\n\t\t\t//\t|\t\t\tbacon is tasty, <span>dontcha think?</span>\r\n\t\t\t//\t|\t\t</p>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t|\t<div id=\"bar\">\r\n\t\t\t//\t|\t\t<p>great comedians may not be funny <span>in person</span></p>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tIf we are presented with the following definition for a NodeList:\r\n\t\t\t//\t|\trequire([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(dom, query){\r\n\t\t\t//\t|\t\tvar l = new NodeList(dom.byId(\"foo\"), dom.byId(\"bar\"));\r\n\t\t\t//\t\tit's possible to find all span elements under paragraphs\r\n\t\t\t//\t\tcontained by these elements with this sub-query:\r\n\t\t\t//\t|\t\tvar spans = l.query(\"p span\");\r\n\t\t\t//\t|\t});\r\n\r\n\t\t\t// FIXME: probably slow\r\n\t\t\tif(!queryStr){ return this; }\r\n\t\t\tvar ret = new NodeList;\r\n\t\t\tthis.map(function(node){\r\n\t\t\t\t// FIXME: why would we ever get undefined here?\r\n\t\t\t\tquery(queryStr, node).forEach(function(subNode){\r\n\t\t\t\t\tif(subNode !== undefined){\r\n\t\t\t\t\t\tret.push(subNode);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn ret._stash(this);\t// dojo/NodeList\r\n\t\t},\r\n\r\n\t\tfilter: function(/*String|Function*/ filter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\t\"masks\" the built-in javascript filter() method (supported\r\n\t\t\t//\t\tin Dojo via `dojo.filter`) to support passing a simple\r\n\t\t\t//\t\tstring filter in addition to supporting filtering function\r\n\t\t\t//\t\tobjects.\r\n\t\t\t// filter:\r\n\t\t\t//\t\tIf a string, a CSS rule like \".thinger\" or \"div > span\".\r\n\t\t\t// example:\r\n\t\t\t//\t\t\"regular\" JS filter syntax as exposed in dojo.filter:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"*\").filter(function(item){\r\n\t\t\t//\t|\t\t\t// highlight every paragraph\r\n\t\t\t//\t|\t\t\treturn (item.nodeName == \"p\");\r\n\t\t\t//\t|\t\t}).style(\"backgroundColor\", \"yellow\");\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\tthe same filtering using a CSS selector\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"*\").filter(\"p\").styles(\"backgroundColor\", \"yellow\");\r\n\t\t\t//\t|\t});\r\n\t\t\tvar a = arguments, items = this, start = 0;\r\n\t\t\tif(typeof filter == \"string\"){ // inline'd type check\r\n\t\t\t\titems = query._filterResult(this, a[0]);\r\n\t\t\t\tif(a.length == 1){\r\n\t\t\t\t\t// if we only got a string query, pass back the filtered results\r\n\t\t\t\t\treturn items._stash(this); // dojo/NodeList\r\n\t\t\t\t}\r\n\t\t\t\t// if we got a callback, run it over the filtered items\r\n\t\t\t\tstart = 1;\r\n\t\t\t}\r\n\t\t\treturn this._wrap(array.filter(items, a[start], a[start + 1]), this);\t// dojo/NodeList\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t// FIXME: should this be \"copyTo\" and include parenting info?\r\n\t\tclone: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates node clones of each element of this list\r\n\t\t\t//\t\tand returns a new list containing the clones\r\n\t\t},\r\n\t\t*/\r\n\r\n\t\taddContent: function(/*String||DomNode||Object||dojo/NodeList*/ content, /*String||Integer?*/ position){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadd a node, NodeList or some HTML as a string to every item in the\r\n\t\t\t//\t\tlist.  Returns the original list.\r\n\t\t\t// description:\r\n\t\t\t//\t\ta copy of the HTML content is added to each item in the\r\n\t\t\t//\t\tlist, with an optional position argument. If no position\r\n\t\t\t//\t\targument is provided, the content is appended to the end of\r\n\t\t\t//\t\teach item.\r\n\t\t\t// content:\r\n\t\t\t//\t\tDOM node, HTML in string format, a NodeList or an Object. If a DOM node or\r\n\t\t\t//\t\tNodeList, the content will be cloned if the current NodeList has more than one\r\n\t\t\t//\t\telement. Only the DOM nodes are cloned, no event handlers. If it is an Object,\r\n\t\t\t//\t\tit should be an object with at \"template\" String property that has the HTML string\r\n\t\t\t//\t\tto insert. If dojo.string has already been dojo.required, then dojo.string.substitute\r\n\t\t\t//\t\twill be used on the \"template\" to generate the final HTML string. Other allowed\r\n\t\t\t//\t\tproperties on the object are: \"parse\" if the HTML\r\n\t\t\t//\t\tstring should be parsed for widgets (dojo.require(\"dojo.parser\") to get that\r\n\t\t\t//\t\toption to work), and \"templateFunc\" if a template function besides dojo.string.substitute\r\n\t\t\t//\t\tshould be used to transform the \"template\".\r\n\t\t\t// position:\r\n\t\t\t//\t\tcan be one of:\r\n\t\t\t//\r\n\t\t\t//\t\t-\t\"last\"||\"end\" (default)\r\n\t\t\t//\t\t-\t\"first||\"start\"\r\n\t\t\t//\t\t-\t\"before\"\r\n\t\t\t//\t\t-\t\"after\"\r\n\t\t\t//\t\t-\t\"replace\" (replaces nodes in this NodeList with new content)\r\n\t\t\t//\t\t-\t\"only\" (removes other children of the nodes so new content is the only child)\r\n\t\t\t//\r\n\t\t\t//\t\tor an offset in the childNodes property\r\n\t\t\t// example:\r\n\t\t\t//\t\tappends content to the end if the position is omitted\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"h3 > p\").addContent(\"hey there!\");\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tadd something to the front of each element that has a\r\n\t\t\t//\t\t\"thinger\" property:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"[thinger]\").addContent(\"...\", \"first\");\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tadds a header before each element of the list\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".note\").addContent(\"<h4>NOTE:</h4>\", \"before\");\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tadd a clone of a DOM node to the end of every element in\r\n\t\t\t//\t\tthe list, removing it from its existing parent.\r\n\t\t\t//\t|\trequire([\"dojo/dom\", \"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(dom, query){\r\n\t\t\t//\t|\t\tquery(\".note\").addContent(dom.byId(\"foo\"));\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tAppend nodes from a templatized string.\r\n\t\t\t//\t|\trequire([\"dojo/string\", \"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(string, query){\r\n\t\t\t//\t|\t\tquery(\".note\").addContent({\r\n\t\t\t//\t|\t\t\ttemplate: '<b>${id}: </b><span>${name}</span>',\r\n\t\t\t//\t|\t\t\tid: \"user332\",\r\n\t\t\t//\t|\t\t\tname: \"Mr. Anderson\"\r\n\t\t\t//\t|\t\t});\r\n\t\t\t//\t|\t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tAppend nodes from a templatized string that also has widgets parsed.\r\n\t\t\t//\t|\trequire([\"dojo/string\", \"dojo/parser\", \"dojo/query\", \"dojo/NodeList-dom\"\r\n\t\t\t//\t|\t], function(string, parser, query){\r\n\t\t\t//\t|\t\tvar notes = query(\".note\").addContent({\r\n\t\t\t//\t|\t\t\ttemplate: '<button dojoType=\"dijit/form/Button\">${text}</button>',\r\n\t\t\t//\t|\t\t\tparse: true,\r\n\t\t\t//\t|\t\t\ttext: \"Send\"\r\n\t\t\t//\t|\t\t});\r\n\t\t\t//\t|\t});\r\n\t\t\tcontent = this._normalize(content, this[0]);\r\n\t\t\tfor(var i = 0, node; (node = this[i]); i++){\r\n\t\t\t\tif(content.length){\r\n\t\t\t\t\tthis._place(content, node, position, i > 0);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// if it is an empty array, we empty the target node\r\n\t\t\t\t\tdomCtr.empty(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t}\r\n\t});\r\n\r\n\treturn NodeList;\r\n});\r\n"]}
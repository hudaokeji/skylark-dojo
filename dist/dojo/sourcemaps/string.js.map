{"version":3,"sources":["string.js"],"names":["define","kernel","lang","ESCAPE_REGEXP","ESCAPE_MAP","&","<",">","\"","'","/","string","setObject","escape","str","replace","c","rep","num","buf","push","join","pad","text","size","ch","end","out","String","Math","ceil","length","substitute","template","map","transform","thisObject","global","hitch","v","match","key","format","value","getObject","call","toString","trim","prototype","i","test","charAt","substring"],"mappings":";;;;;;;AAAAA,QACC,iBACA,gBACE,SAASC,EAAQC,GAIpB,IAAIC,EAAgB,aAChBC,GACHC,IAAK,QACLC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SACLC,IAAK,UAEFC,KAmKH,OA/JDT,EAAKU,UAAU,cAAeD,GAE9BA,EAAOE,OAAS,SAAmBC,GAKlC,OAAIA,EACGA,EAAIC,QAAQZ,EAAe,SAASa,GAC1C,OAAOZ,EAAWY,KAFF,IAMlBL,EAAOM,IAAM,SAAmBH,EAAgBI,GAQ/C,GAAGA,GAAO,IAAMJ,EAAM,MAAO,GAG7B,IADA,IAAIK,KAEM,EAAND,GACFC,EAAIC,KAAKN,GAELI,IAAQ,GACbJ,GAAOA,EAER,OAAOK,EAAIE,KAAK,KAGjBV,EAAOW,IAAM,SAAmBC,EAAiBC,EAAiBC,EAAgBC,GAiB7ED,IACHA,EAAK,KAEN,IAAIE,EAAMC,OAAOL,GAChBD,EAAMX,EAAOM,IAAIQ,EAAII,KAAKC,MAAMN,EAAOG,EAAII,QAAUN,EAAGM,SACzD,OAAOL,EAAMC,EAAML,EAAMA,EAAMK,GAGhChB,EAAOqB,WAAa,SAAsBC,EACjBC,EACFC,EACDC,GA0DrB,OAJAA,EAAaA,GAAcnC,EAAOoC,OAClCF,EAAYA,EACXjC,EAAKoC,MAAMF,EAAYD,GAAa,SAASI,GAAI,OAAOA,GAElDN,EAASlB,QAAQ,yCACvB,SAASyB,EAAOC,EAAKC,GACpB,IAAIC,EAAQzC,EAAK0C,UAAUH,GAAK,EAAOP,GAIvC,OAHGQ,IACFC,EAAQzC,EAAK0C,UAAUF,GAAQ,EAAON,GAAYS,KAAKT,EAAYO,EAAOF,IAEpEN,EAAUQ,EAAOF,GAAKK,cAIhCnC,EAAOoC,KAAOnB,OAAOoB,UAAUD,KAC9B7C,EAAK6C,KACL,SAASjC,GAER,IAAI,IAAImC,GADRnC,EAAMA,EAAIC,QAAQ,OAAQ,KACVgB,OAAS,EAAGkB,GAAK,EAAGA,IACnC,GAAG,KAAKC,KAAKpC,EAAIqC,OAAOF,IAAI,CAC3BnC,EAAMA,EAAIsC,UAAU,EAAGH,EAAI,GAC3B,MAGF,OAAOnC,GAmBDH","file":"../string.js","sourcesContent":["define([\r\n\t\"./_base/kernel\",\t// kernel.global\r\n\t\"./_base/lang\"\r\n], function(kernel, lang){\r\n\r\n// module:\r\n//\t\tdojo/string\r\nvar ESCAPE_REGEXP = /[&<>'\"\\/]/g;\r\nvar ESCAPE_MAP = {\r\n\t'&': '&amp;',\r\n\t'<': '&lt;',\r\n\t'>': '&gt;',\r\n\t'\"': '&quot;',\r\n\t\"'\": '&#x27;',\r\n\t'/': '&#x2F;'\r\n};\r\nvar string = {\r\n\t// summary:\r\n\t//\t\tString utilities for Dojo\r\n};\r\nlang.setObject(\"dojo.string\", string);\r\n\r\nstring.escape = function(/*String*/str){\r\n\t// summary:\r\n\t//\t\tEfficiently escape a string for insertion into HTML (innerHTML or attributes), replacing &, <, >, \", ', and / characters.\r\n\t// str:\r\n\t//\t\tthe string to escape\r\n\tif(!str){ return \"\"; }\r\n\treturn str.replace(ESCAPE_REGEXP, function(c) {\r\n\t\treturn ESCAPE_MAP[c];\r\n\t});\r\n};\r\n\r\nstring.rep = function(/*String*/str, /*Integer*/num){\r\n\t// summary:\r\n\t//\t\tEfficiently replicate a string `n` times.\r\n\t// str:\r\n\t//\t\tthe string to replicate\r\n\t// num:\r\n\t//\t\tnumber of times to replicate the string\r\n\r\n\tif(num <= 0 || !str){ return \"\"; }\r\n\r\n\tvar buf = [];\r\n\tfor(;;){\r\n\t\tif(num & 1){\r\n\t\t\tbuf.push(str);\r\n\t\t}\r\n\t\tif(!(num >>= 1)){ break; }\r\n\t\tstr += str;\r\n\t}\r\n\treturn buf.join(\"\");\t// String\r\n};\r\n\r\nstring.pad = function(/*String*/text, /*Integer*/size, /*String?*/ch, /*Boolean?*/end){\r\n\t// summary:\r\n\t//\t\tPad a string to guarantee that it is at least `size` length by\r\n\t//\t\tfilling with the character `ch` at either the start or end of the\r\n\t//\t\tstring. Pads at the start, by default.\r\n\t// text:\r\n\t//\t\tthe string to pad\r\n\t// size:\r\n\t//\t\tlength to provide padding\r\n\t// ch:\r\n\t//\t\tcharacter to pad, defaults to '0'\r\n\t// end:\r\n\t//\t\tadds padding at the end if true, otherwise pads at start\r\n\t// example:\r\n\t//\t|\t// Fill the string to length 10 with \"+\" characters on the right.  Yields \"Dojo++++++\".\r\n\t//\t|\tstring.pad(\"Dojo\", 10, \"+\", true);\r\n\r\n\tif(!ch){\r\n\t\tch = '0';\r\n\t}\r\n\tvar out = String(text),\r\n\t\tpad = string.rep(ch, Math.ceil((size - out.length) / ch.length));\r\n\treturn end ? out + pad : pad + out;\t// String\r\n};\r\n\r\nstring.substitute = function(\t/*String*/\t\ttemplate,\r\n\t\t\t\t\t\t\t\t\t/*Object|Array*/map,\r\n\t\t\t\t\t\t\t\t\t/*Function?*/\ttransform,\r\n\t\t\t\t\t\t\t\t\t/*Object?*/\t\tthisObject){\r\n\t// summary:\r\n\t//\t\tPerforms parameterized substitutions on a string. Throws an\r\n\t//\t\texception if any parameter is unmatched.\r\n\t// template:\r\n\t//\t\ta string with expressions in the form `${key}` to be replaced or\r\n\t//\t\t`${key:format}` which specifies a format function. keys are case-sensitive.\r\n\t// map:\r\n\t//\t\thash to search for substitutions\r\n\t// transform:\r\n\t//\t\ta function to process all parameters before substitution takes\r\n\t//\t\tplace, e.g. mylib.encodeXML\r\n\t// thisObject:\r\n\t//\t\twhere to look for optional format function; default to the global\r\n\t//\t\tnamespace\r\n\t// example:\r\n\t//\t\tSubstitutes two expressions in a string from an Array or Object\r\n\t//\t|\t// returns \"File 'foo.html' is not found in directory '/temp'.\"\r\n\t//\t|\t// by providing substitution data in an Array\r\n\t//\t|\tstring.substitute(\r\n\t//\t|\t\t\"File '${0}' is not found in directory '${1}'.\",\r\n\t//\t|\t\t[\"foo.html\",\"/temp\"]\r\n\t//\t|\t);\r\n\t//\t|\r\n\t//\t|\t// also returns \"File 'foo.html' is not found in directory '/temp'.\"\r\n\t//\t|\t// but provides substitution data in an Object structure.  Dotted\r\n\t//\t|\t// notation may be used to traverse the structure.\r\n\t//\t|\tstring.substitute(\r\n\t//\t|\t\t\"File '${name}' is not found in directory '${info.dir}'.\",\r\n\t//\t|\t\t{ name: \"foo.html\", info: { dir: \"/temp\" } }\r\n\t//\t|\t);\r\n\t// example:\r\n\t//\t\tUse a transform function to modify the values:\r\n\t//\t|\t// returns \"file 'foo.html' is not found in directory '/temp'.\"\r\n\t//\t|\tstring.substitute(\r\n\t//\t|\t\t\"${0} is not found in ${1}.\",\r\n\t//\t|\t\t[\"foo.html\",\"/temp\"],\r\n\t//\t|\t\tfunction(str){\r\n\t//\t|\t\t\t// try to figure out the type\r\n\t//\t|\t\t\tvar prefix = (str.charAt(0) == \"/\") ? \"directory\": \"file\";\r\n\t//\t|\t\t\treturn prefix + \" '\" + str + \"'\";\r\n\t//\t|\t\t}\r\n\t//\t|\t);\r\n\t// example:\r\n\t//\t\tUse a formatter\r\n\t//\t|\t// returns \"thinger -- howdy\"\r\n\t//\t|\tstring.substitute(\r\n\t//\t|\t\t\"${0:postfix}\", [\"thinger\"], null, {\r\n\t//\t|\t\t\tpostfix: function(value, key){\r\n\t//\t|\t\t\t\treturn value + \" -- howdy\";\r\n\t//\t|\t\t\t}\r\n\t//\t|\t\t}\r\n\t//\t|\t);\r\n\r\n\tthisObject = thisObject || kernel.global;\r\n\ttransform = transform ?\r\n\t\tlang.hitch(thisObject, transform) : function(v){ return v; };\r\n\r\n\treturn template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n\t\tfunction(match, key, format){\r\n\t\t\tvar value = lang.getObject(key, false, map);\r\n\t\t\tif(format){\r\n\t\t\t\tvalue = lang.getObject(format, false, thisObject).call(thisObject, value, key);\r\n\t\t\t}\r\n\t\t\treturn transform(value, key).toString();\r\n\t\t}); // String\r\n};\r\n\r\nstring.trim = String.prototype.trim ?\r\n\tlang.trim : // aliasing to the native function\r\n\tfunction(str){\r\n\t\tstr = str.replace(/^\\s+/, '');\r\n\t\tfor(var i = str.length - 1; i >= 0; i--){\r\n\t\t\tif(/\\S/.test(str.charAt(i))){\r\n\t\t\t\tstr = str.substring(0, i + 1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n/*=====\r\n string.trim = function(str){\r\n\t // summary:\r\n\t //\t\tTrims whitespace from both sides of the string\r\n\t // str: String\r\n\t //\t\tString to be trimmed\r\n\t // returns: String\r\n\t //\t\tReturns the trimmed string\r\n\t // description:\r\n\t //\t\tThis version of trim() was taken from [Steven Levithan's blog](http://blog.stevenlevithan.com/archives/faster-trim-javascript).\r\n\t //\t\tThe short yet performant version of this function is dojo/_base/lang.trim(),\r\n\t //\t\twhich is part of Dojo base.  Uses String.prototype.trim instead, if available.\r\n\t return \"\";\t// String\r\n };\r\n =====*/\r\n\r\n\treturn string;\r\n});\r\n"]}
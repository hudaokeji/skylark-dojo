{"version":3,"sources":["when.js"],"names":["define","Deferred","Promise","valueOrPromise","callback","errback","progback","receivedPromise","then","nativePromise","arguments","length","resolve","deferred","cancel","reject","progress","promise"],"mappings":";;;;;;;AAAAA,QACC,aACA,qBACE,SAASC,EAAUC,GACrB,aAKA,OAAO,SAAcC,EAAgBC,EAAUC,EAASC,GAyBvD,IAAIC,EAAkBJ,GAAiD,mBAAxBA,EAAeK,KAC1DC,EAAgBF,GAAmBJ,aAA0BD,EAEjE,IAAIK,EACH,OAAGG,UAAUC,OAAS,EACdP,EAAWA,EAASD,GAAkBA,GAEtC,IAAIF,GAAWW,QAAQT,GAE1B,IAAIM,EAAc,CACvB,IAAII,EAAW,IAAIZ,EAASE,EAAeW,QAC3CX,EAAeK,KAAKK,EAASD,QAASC,EAASE,OAAQF,EAASG,UAChEb,EAAiBU,EAASI,QAG3B,OAAGb,GAAYC,GAAWC,EAClBH,EAAeK,KAAKJ,EAAUC,EAASC,GAExCH","file":"../when.js","sourcesContent":["define([\r\n\t\"./Deferred\",\r\n\t\"./promise/Promise\"\r\n], function(Deferred, Promise){\r\n\t\"use strict\";\r\n\r\n\t// module:\r\n\t//\t\tdojo/when\r\n\r\n\treturn function when(valueOrPromise, callback, errback, progback){\r\n\t\t// summary:\r\n\t\t//\t\tTransparently applies callbacks to values and/or promises.\r\n\t\t// description:\r\n\t\t//\t\tAccepts promises but also transparently handles non-promises. If no\r\n\t\t//\t\tcallbacks are provided returns a promise, regardless of the initial\r\n\t\t//\t\tvalue. Foreign promises are converted.\r\n\t\t//\r\n\t\t//\t\tIf callbacks are provided and the initial value is not a promise,\r\n\t\t//\t\tthe callback is executed immediately with no error handling. Returns\r\n\t\t//\t\ta promise if the initial value is a promise, or the result of the\r\n\t\t//\t\tcallback otherwise.\r\n\t\t// valueOrPromise:\r\n\t\t//\t\tEither a regular value or an object with a `then()` method that\r\n\t\t//\t\tfollows the Promises/A specification.\r\n\t\t// callback: Function?\r\n\t\t//\t\tCallback to be invoked when the promise is resolved, or a non-promise\r\n\t\t//\t\tis received.\r\n\t\t// errback: Function?\r\n\t\t//\t\tCallback to be invoked when the promise is rejected.\r\n\t\t// progback: Function?\r\n\t\t//\t\tCallback to be invoked when the promise emits a progress update.\r\n\t\t// returns: dojo/promise/Promise\r\n\t\t//\t\tPromise, or if a callback is provided, the result of the callback.\r\n\r\n\t\tvar receivedPromise = valueOrPromise && typeof valueOrPromise.then === \"function\";\r\n\t\tvar nativePromise = receivedPromise && valueOrPromise instanceof Promise;\r\n\r\n\t\tif(!receivedPromise){\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn callback ? callback(valueOrPromise) : valueOrPromise;\r\n\t\t\t}else{\r\n\t\t\t\treturn new Deferred().resolve(valueOrPromise);\r\n\t\t\t}\r\n\t\t}else if(!nativePromise){\r\n\t\t\tvar deferred = new Deferred(valueOrPromise.cancel);\r\n\t\t\tvalueOrPromise.then(deferred.resolve, deferred.reject, deferred.progress);\r\n\t\t\tvalueOrPromise = deferred.promise;\r\n\t\t}\r\n\r\n\t\tif(callback || errback || progback){\r\n\t\t\treturn valueOrPromise.then(callback, errback, progback);\r\n\t\t}\r\n\t\treturn valueOrPromise;\r\n\t};\r\n});\r\n"]}
{"version":3,"sources":["store/Cache.js"],"names":["define","lang","when","Cache","masterStore","cachingStore","options","delegate","query","directives","results","forEach","object","isLoaded","put","queryEngine","get","id","result","add","remove","this","getIdentity","evict","setObject"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAgB,WACxB,SAASC,EAAMC,GAKf,IAAIC,EAAQ,SAASC,EAAaC,EAAcC,GAE/C,OADAA,EAAUA,MACHL,EAAKM,SAASH,GACpBI,MAAO,SAASA,EAAOC,GACtB,IAAIC,EAAUN,EAAYI,MAAMA,EAAOC,GAMvC,OALAC,EAAQC,QAAQ,SAASC,GACpBN,EAAQO,WAAYP,EAAQO,SAASD,IACxCP,EAAaS,IAAIF,KAGZF,GAGRK,YAAaX,EAAYW,aAAeV,EAAaU,YACrDC,IAAK,SAASC,EAAIR,GACjB,OAAOP,EAAKG,EAAaW,IAAIC,GAAK,SAASC,GAC1C,OAAOA,GAAUhB,EAAKE,EAAYY,IAAIC,EAAIR,GAAa,SAASS,GAI/D,OAHGA,GACFb,EAAaS,IAAII,GAASD,GAAIA,IAExBC,OAIVC,IAAK,SAASP,EAAQH,GACrB,OAAOP,EAAKE,EAAYe,IAAIP,EAAQH,GAAa,SAASS,GAGzD,OADAb,EAAac,IAAID,GAA2B,iBAAVA,EAAqBA,EAASN,EAAQH,GACjES,KAGTJ,IAAK,SAASF,EAAQH,GAGrB,OADAJ,EAAae,OAAQX,GAAcA,EAAWQ,IAAOI,KAAKC,YAAYV,IAC/DV,EAAKE,EAAYU,IAAIF,EAAQH,GAAa,SAASS,GAGzD,OADAb,EAAaS,IAAII,GAA2B,iBAAVA,EAAqBA,EAASN,EAAQH,GACjES,KAGTE,OAAQ,SAASH,EAAIR,GACpB,OAAOP,EAAKE,EAAYgB,OAAOH,EAAIR,GAAa,SAASS,GACxD,OAAOb,EAAae,OAAOH,EAAIR,MAGjCc,MAAO,SAASN,GACf,OAAOZ,EAAae,OAAOH,OA4F9B,OAxFAhB,EAAKuB,UAAU,mBAAoBrB,GAwF5BA","file":"../../store/Cache.js","sourcesContent":["define([\"../_base/lang\",\"../when\" /*=====, \"../_base/declare\", \"./api/Store\" =====*/],\r\nfunction(lang, when /*=====, declare, Store =====*/){\r\n\r\n// module:\r\n//\t\tdojo/store/Cache\r\n\r\nvar Cache = function(masterStore, cachingStore, options){\r\n\toptions = options || {};\r\n\treturn lang.delegate(masterStore, {\r\n\t\tquery: function(query, directives){\r\n\t\t\tvar results = masterStore.query(query, directives);\r\n\t\t\tresults.forEach(function(object){\r\n\t\t\t\tif(!options.isLoaded || options.isLoaded(object)){\r\n\t\t\t\t\tcachingStore.put(object);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn results;\r\n\t\t},\r\n\t\t// look for a queryEngine in either store\r\n\t\tqueryEngine: masterStore.queryEngine || cachingStore.queryEngine,\r\n\t\tget: function(id, directives){\r\n\t\t\treturn when(cachingStore.get(id), function(result){\r\n\t\t\t\treturn result || when(masterStore.get(id, directives), function(result){\r\n\t\t\t\t\tif(result){\r\n\t\t\t\t\t\tcachingStore.put(result, {id: id});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\tadd: function(object, directives){\r\n\t\t\treturn when(masterStore.add(object, directives), function(result){\r\n\t\t\t\t// now put result in cache\r\n\t\t\t\tcachingStore.add(result && typeof result == \"object\" ? result : object, directives);\r\n\t\t\t\treturn result; // the result from the add should be dictated by the masterStore and be unaffected by the cachingStore\r\n\t\t\t});\r\n\t\t},\r\n\t\tput: function(object, directives){\r\n\t\t\t// first remove from the cache, so it is empty until we get a response from the master store\r\n\t\t\tcachingStore.remove((directives && directives.id) || this.getIdentity(object));\r\n\t\t\treturn when(masterStore.put(object, directives), function(result){\r\n\t\t\t\t// now put result in cache\r\n\t\t\t\tcachingStore.put(result && typeof result == \"object\" ? result : object, directives);\r\n\t\t\t\treturn result; // the result from the put should be dictated by the masterStore and be unaffected by the cachingStore\r\n\t\t\t});\r\n\t\t},\r\n\t\tremove: function(id, directives){\r\n\t\t\treturn when(masterStore.remove(id, directives), function(result){\r\n\t\t\t\treturn cachingStore.remove(id, directives);\r\n\t\t\t});\r\n\t\t},\r\n\t\tevict: function(id){\r\n\t\t\treturn cachingStore.remove(id);\r\n\t\t}\r\n\t});\r\n};\r\nlang.setObject(\"dojo.store.Cache\", Cache);\r\n\r\n/*=====\r\nvar __CacheArgs = {\r\n\t// summary:\r\n\t//\t\tThese are additional options for how caching is handled.\r\n\t// isLoaded: Function?\r\n\t//\t\tThis is a function that will be called for each item in a query response to determine\r\n\t//\t\tif it is cacheable. If isLoaded returns true, the item will be cached, otherwise it\r\n\t//\t\twill not be cached. If isLoaded is not provided, all items will be cached.\r\n};\r\n\r\nCache = declare(Store, {\r\n\t// summary:\r\n\t//\t\tThe Cache store wrapper takes a master store and a caching store,\r\n\t//\t\tcaches data from the master into the caching store for faster\r\n\t//\t\tlookup. Normally one would use a memory store for the caching\r\n\t//\t\tstore and a server store like JsonRest for the master store.\r\n\t// example:\r\n\t//\t|\tvar master = new Memory(data);\r\n\t//\t|\tvar cacher = new Memory();\r\n\t//\t|\tvar store = new Cache(master, cacher);\r\n\t//\r\n\tconstructor: function(masterStore, cachingStore, options){\r\n\t\t// masterStore:\r\n\t\t//\t\tThis is the authoritative store, all uncached requests or non-safe requests will\r\n\t\t//\t\tbe made against this store.\r\n\t\t// cachingStore:\r\n\t\t//\t\tThis is the caching store that will be used to store responses for quick access.\r\n\t\t//\t\tTypically this should be a local store.\r\n\t\t// options: __CacheArgs?\r\n\t\t//\t\tThese are additional options for how caching is handled.\r\n\t},\r\n\tquery: function(query, directives){\r\n\t\t// summary:\r\n\t\t//\t\tQuery the underlying master store and cache any results.\r\n\t\t// query: Object|String\r\n\t\t//\t\tThe object or string containing query information. Dependent on the query engine used.\r\n\t\t// directives: dojo/store/api/Store.QueryOptions?\r\n\t\t//\t\tAn optional keyword arguments object with additional parameters describing the query.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tA QueryResults object that can be used to iterate over.\r\n\t},\r\n\tget: function(id, directives){\r\n\t\t// summary:\r\n\t\t//\t\tGet the object with the specific id.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identifier for the object in question.\r\n\t\t// directives: Object?\r\n\t\t//\t\tAny additional parameters needed to describe how the get should be performed.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tA QueryResults object.\r\n\t},\r\n\tadd: function(object, directives){\r\n\t\t// summary:\r\n\t\t//\t\tAdd the given object to the store.\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to add to the store.\r\n\t\t// directives: dojo/store/api/Store.AddOptions?\r\n\t\t//\t\tAny additional parameters needed to describe how the add should be performed.\r\n\t\t// returns: Number\r\n\t\t//\t\tThe new id for the object.\r\n\t},\r\n\tput: function(object, directives){\r\n\t\t// summary:\r\n\t\t//\t\tPut the object into the store (similar to an HTTP PUT).\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to put to the store.\r\n\t\t// directives: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAny additional parameters needed to describe how the put should be performed.\r\n\t\t// returns: Number\r\n\t\t//\t\tThe new id for the object.\r\n\t},\r\n\tremove: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tRemove the object with the specific id.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identifier for the object in question.\r\n\t},\r\n\tevict: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tRemove the object with the given id from the underlying caching store.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identifier for the object in question.\r\n\t}\r\n});\r\n=====*/\r\n\r\nreturn Cache;\r\n});\r\n"]}
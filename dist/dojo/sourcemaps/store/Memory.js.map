{"version":3,"sources":["store/Memory.js"],"names":["define","declare","QueryResults","SimpleQueryEngine","constructor","options","i","this","setData","data","idProperty","index","queryEngine","get","id","getIdentity","object","put","Math","random","overwrite","Error","push","add","remove","splice","query","items","identifier","l","length"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,sBAAuB,4BACnD,SAASC,EAASC,EAAcC,GAShC,OAAOF,EAAQ,oBAHJ,MAMVG,YAAa,SAASC,GAMrB,IAAI,IAAIC,KAAKD,EACZE,KAAKD,GAAKD,EAAQC,GAEnBC,KAAKC,QAAQD,KAAKE,WAInBA,KAAK,KAKLC,WAAY,KAIZC,MAAM,KAINC,YAAaT,EACbU,IAAK,SAASC,GAOb,OAAOP,KAAKE,KAAKF,KAAKI,MAAMG,KAE7BC,YAAa,SAASC,GAMrB,OAAOA,EAAOT,KAAKG,aAEpBO,IAAK,SAASD,EAAQX,GASrB,IAAII,EAAOF,KAAKE,KACfE,EAAQJ,KAAKI,MACbD,EAAaH,KAAKG,WACfI,EAAKE,EAAON,GAAeL,GAAW,OAAQA,EAAWA,EAAQS,GAAKJ,KAAcM,EAASA,EAAON,GAAcQ,KAAKC,SAC3H,GAAGL,KAAMH,EAAM,CAEd,GAAGN,IAAiC,IAAtBA,EAAQe,UACrB,MAAM,IAAIC,MAAM,yBAGjBZ,EAAKE,EAAMG,IAAOE,OAGlBL,EAAMG,GAAML,EAAKa,KAAKN,GAAU,EAEjC,OAAOF,GAERS,IAAK,SAASP,EAAQX,GAWrB,OAFCA,EAAUA,OAAee,WAAY,EAE/Bb,KAAKU,IAAID,EAAQX,IAEzBmB,OAAQ,SAASV,GAOhB,IAAIH,EAAQJ,KAAKI,MACbF,EAAOF,KAAKE,KAChB,GAAGK,KAAMH,EAIR,OAHAF,EAAKgB,OAAOd,EAAMG,GAAK,GAEvBP,KAAKC,QAAQC,IACN,GAGTiB,MAAO,SAASA,EAAOrB,GA8BtB,OAAOH,EAAaK,KAAKK,YAAYc,EAAOrB,EAAxBE,CAAiCA,KAAKE,QAE3DD,QAAS,SAASC,GAKdA,EAAKkB,OAEPpB,KAAKG,WAAaD,EAAKmB,YAAcrB,KAAKG,WAC1CD,EAAOF,KAAKE,KAAOA,EAAKkB,OAExBpB,KAAKE,KAAOA,EAEbF,KAAKI,SACL,IAAI,IAAIL,EAAI,EAAGuB,EAAIpB,EAAKqB,OAAQxB,EAAIuB,EAAGvB,IACtCC,KAAKI,MAAMF,EAAKH,GAAGC,KAAKG,aAAeJ","file":"../../store/Memory.js","sourcesContent":["define([\"../_base/declare\", \"./util/QueryResults\", \"./util/SimpleQueryEngine\" /*=====, \"./api/Store\" =====*/],\r\nfunction(declare, QueryResults, SimpleQueryEngine /*=====, Store =====*/){\r\n\r\n// module:\r\n//\t\tdojo/store/Memory\r\n\r\n// No base class, but for purposes of documentation, the base class is dojo/store/api/Store\r\nvar base = null;\r\n/*===== base = Store; =====*/\r\n\r\nreturn declare(\"dojo.store.Memory\", base, {\r\n\t// summary:\r\n\t//\t\tThis is a basic in-memory object store. It implements dojo/store/api/Store.\r\n\tconstructor: function(options){\r\n\t\t// summary:\r\n\t\t//\t\tCreates a memory object store.\r\n\t\t// options: dojo/store/Memory\r\n\t\t//\t\tThis provides any configuration information that will be mixed into the store.\r\n\t\t//\t\tThis should generally include the data property to provide the starting set of data.\r\n\t\tfor(var i in options){\r\n\t\t\tthis[i] = options[i];\r\n\t\t}\r\n\t\tthis.setData(this.data || []);\r\n\t},\r\n\t// data: Array\r\n\t//\t\tThe array of all the objects in the memory store\r\n\tdata:null,\r\n\r\n\t// idProperty: String\r\n\t//\t\tIndicates the property to use as the identity property. The values of this\r\n\t//\t\tproperty should be unique.\r\n\tidProperty: \"id\",\r\n\r\n\t// index: Object\r\n\t//\t\tAn index of data indices into the data array by id\r\n\tindex:null,\r\n\r\n\t// queryEngine: Function\r\n\t//\t\tDefines the query engine to use for querying the data store\r\n\tqueryEngine: SimpleQueryEngine,\r\n\tget: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves an object by its identity\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to lookup the object\r\n\t\t// returns: Object\r\n\t\t//\t\tThe object in the store that matches the given id.\r\n\t\treturn this.data[this.index[id]];\r\n\t},\r\n\tgetIdentity: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an object's identity\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to get the identity from\r\n\t\t// returns: Number\r\n\t\treturn object[this.idProperty];\r\n\t},\r\n\tput: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tStores an object\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\"\r\n\t\t//\t\tproperty if a specific id is to be used.\r\n\t\t// returns: Number\r\n\t\tvar data = this.data,\r\n\t\t\tindex = this.index,\r\n\t\t\tidProperty = this.idProperty;\r\n\t\tvar id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n\t\tif(id in index){\r\n\t\t\t// object exists\r\n\t\t\tif(options && options.overwrite === false){\r\n\t\t\t\tthrow new Error(\"Object already exists\");\r\n\t\t\t}\r\n\t\t\t// replace the entry in data\r\n\t\t\tdata[index[id]] = object;\r\n\t\t}else{\r\n\t\t\t// add the new object\r\n\t\t\tindex[id] = data.push(object) - 1;\r\n\t\t}\r\n\t\treturn id;\r\n\t},\r\n\tadd: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tCreates an object, throws an error if the object already exists\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\"\r\n\t\t//\t\tproperty if a specific id is to be used.\r\n\t\t// returns: Number\r\n\t\t(options = options || {}).overwrite = false;\r\n\t\t// call put with overwrite being false\r\n\t\treturn this.put(object, options);\r\n\t},\r\n\tremove: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes an object by its identity\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to delete the object\r\n\t\t// returns: Boolean\r\n\t\t//\t\tReturns true if an object was removed, falsy (undefined) if no object matched the id\r\n\t\tvar index = this.index;\r\n\t\tvar data = this.data;\r\n\t\tif(id in index){\r\n\t\t\tdata.splice(index[id], 1);\r\n\t\t\t// now we have to reindex\r\n\t\t\tthis.setData(data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t},\r\n\tquery: function(query, options){\r\n\t\t// summary:\r\n\t\t//\t\tQueries the store for objects.\r\n\t\t// query: Object\r\n\t\t//\t\tThe query to use for retrieving objects from the store.\r\n\t\t// options: dojo/store/api/Store.QueryOptions?\r\n\t\t//\t\tThe optional arguments to apply to the resultset.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tThe results of the query, extended with iterative methods.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tGiven the following store:\r\n\t\t//\r\n\t\t// \t|\tvar store = new Memory({\r\n\t\t// \t|\t\tdata: [\r\n\t\t// \t|\t\t\t{id: 1, name: \"one\", prime: false },\r\n\t\t//\t|\t\t\t{id: 2, name: \"two\", even: true, prime: true},\r\n\t\t//\t|\t\t\t{id: 3, name: \"three\", prime: true},\r\n\t\t//\t|\t\t\t{id: 4, name: \"four\", even: true, prime: false},\r\n\t\t//\t|\t\t\t{id: 5, name: \"five\", prime: true}\r\n\t\t//\t|\t\t]\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t//\t...find all items where \"prime\" is true:\r\n\t\t//\r\n\t\t//\t|\tvar results = store.query({ prime: true });\r\n\t\t//\r\n\t\t//\t...or find all items where \"even\" is true:\r\n\t\t//\r\n\t\t//\t|\tvar results = store.query({ even: true });\r\n\t\treturn QueryResults(this.queryEngine(query, options)(this.data));\r\n\t},\r\n\tsetData: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tSets the given data as the source for this store, and indexes it\r\n\t\t// data: Object[]\r\n\t\t//\t\tAn array of objects to use as the source of data.\r\n\t\tif(data.items){\r\n\t\t\t// just for convenience with the data format IFRS expects\r\n\t\t\tthis.idProperty = data.identifier || this.idProperty;\r\n\t\t\tdata = this.data = data.items;\r\n\t\t}else{\r\n\t\t\tthis.data = data;\r\n\t\t}\r\n\t\tthis.index = {};\r\n\t\tfor(var i = 0, l = data.length; i < l; i++){\r\n\t\t\tthis.index[data[i][this.idProperty]] = i;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n});\r\n"]}
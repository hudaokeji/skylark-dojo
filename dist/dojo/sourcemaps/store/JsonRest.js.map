{"version":3,"sources":["store/JsonRest.js"],"names":["define","xhr","lang","JSON","declare","QueryResults","constructor","options","this","headers","safeMixin","target","idProperty","ascendingPrefix","descendingPrefix","_getTarget","id","charAt","length","get","mixin","Accept","accepts","url","handleAs","getIdentity","object","put","incremental","postData","stringify","Content-Type","If-Match","overwrite","If-None-Match","add","remove","query","hasQuestionMark","indexOf","objectToQuery","start","count","Infinity","rangeParam","Range","sort","sortParam","i","descending","encodeURIComponent","attribute","results","total","then","range","ioArgs","getResponseHeader","match"],"mappings":"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","file":"../../store/JsonRest.js","sourcesContent":["define([\"../_base/xhr\", \"../_base/lang\", \"../json\", \"../_base/declare\", \"./util/QueryResults\" /*=====, \"./api/Store\" =====*/\r\n], function(xhr, lang, JSON, declare, QueryResults /*=====, Store =====*/){\r\n\r\n// No base class, but for purposes of documentation, the base class is dojo/store/api/Store\r\nvar base = null;\r\n/*===== base = Store; =====*/\r\n\r\n/*=====\r\nvar __HeaderOptions = {\r\n\t\t// headers: Object?\r\n\t\t//\t\tAdditional headers to send along with the request.\r\n\t},\r\n\t__PutDirectives = declare(Store.PutDirectives, __HeaderOptions),\r\n\t__QueryOptions = declare(Store.QueryOptions, __HeaderOptions);\r\n=====*/\r\n\r\nreturn declare(\"dojo.store.JsonRest\", base, {\r\n\t// summary:\r\n\t//\t\tThis is a basic store for RESTful communicating with a server through JSON\r\n\t//\t\tformatted data. It implements dojo/store/api/Store.\r\n\r\n\tconstructor: function(options){\r\n\t\t// summary:\r\n\t\t//\t\tThis is a basic store for RESTful communicating with a server through JSON\r\n\t\t//\t\tformatted data.\r\n\t\t// options: dojo/store/JsonRest\r\n\t\t//\t\tThis provides any configuration information that will be mixed into the store\r\n\t\tthis.headers = {};\r\n\t\tdeclare.safeMixin(this, options);\r\n\t},\r\n\r\n\t// headers: Object\r\n\t//\t\tAdditional headers to pass in all requests to the server. These can be overridden\r\n\t//\t\tby passing additional headers to calls to the store.\r\n\theaders: {},\r\n\r\n\t// target: String\r\n\t//\t\tThe target base URL to use for all requests to the server. This string will be\r\n\t//\t\tprepended to the id to generate the URL (relative or absolute) for requests\r\n\t//\t\tsent to the server\r\n\ttarget: \"\",\r\n\r\n\t// idProperty: String\r\n\t//\t\tIndicates the property to use as the identity property. The values of this\r\n\t//\t\tproperty should be unique.\r\n\tidProperty: \"id\",\r\n\r\n\t// rangeParam: String\r\n\t//\t\tUse a query parameter for the requested range. If this is omitted, than the\r\n\t//\t\tRange header will be used. Independent of this, the X-Range header is always set.\r\n\r\n\t// sortParam: String\r\n\t//\t\tThe query parameter to used for holding sort information. If this is omitted, than\r\n\t//\t\tthe sort information is included in a functional query token to avoid colliding\r\n\t//\t\twith the set of name/value pairs.\r\n\r\n\t// ascendingPrefix: String\r\n\t//\t\tThe prefix to apply to sort attribute names that are ascending\r\n\tascendingPrefix: \"+\",\r\n\r\n\t// descendingPrefix: String\r\n\t//\t\tThe prefix to apply to sort attribute names that are ascending\r\n\tdescendingPrefix: \"-\",\r\n\t \r\n\t_getTarget: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tIf the target has no trailing '/', then append it.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity of the requested target\r\n\t\tvar target = this.target;\r\n\t\tif(typeof id != \"undefined\"){\r\n\t\t\tif(target.charAt(target.length-1) == '/'){\r\n\t\t\t\ttarget += id;\r\n\t\t\t}else{\r\n\t\t\t\ttarget += '/' + id;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t},\r\n\t\t\t\t\t\r\n\tget: function(id, options){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves an object by its identity. This will trigger a GET request to the server using\r\n\t\t//\t\tthe url `this.target + id`.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to lookup the object\r\n\t\t// options: Object?\r\n\t\t//\t\tHTTP headers. For consistency with other methods, if a `headers` key exists on this object, it will be\r\n\t\t//\t\tused to provide HTTP headers instead.\r\n\t\t// returns: Object\r\n\t\t//\t\tThe object in the store that matches the given id.\r\n\t\toptions = options || {};\r\n\t\tvar headers = lang.mixin({ Accept: this.accepts }, this.headers, options.headers || options);\r\n\t\treturn xhr(\"GET\", {\r\n\t\t\turl: this._getTarget(id),\r\n\t\t\thandleAs: \"json\",\r\n\t\t\theaders: headers\r\n\t\t});\r\n\t},\r\n\r\n\t// accepts: String\r\n\t//\t\tDefines the Accept header to use on HTTP requests\r\n\taccepts: \"application/javascript, application/json\",\r\n\r\n\tgetIdentity: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an object's identity\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to get the identity from\r\n\t\t// returns: Number\r\n\t\treturn object[this.idProperty];\r\n\t},\r\n\r\n\tput: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tStores an object. This will trigger a PUT request to the server\r\n\t\t//\t\tif the object has an id, otherwise it will trigger a POST request.\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: __PutDirectives?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\"\r\n\t\t//\t\tproperty if a specific id is to be used.\r\n\t\t// returns: dojo/_base/Deferred\r\n\t\toptions = options || {};\r\n\t\tvar id = (\"id\" in options) ? options.id : this.getIdentity(object);\r\n\t\tvar hasId = typeof id != \"undefined\";\r\n\t\treturn xhr(hasId && !options.incremental ? \"PUT\" : \"POST\", {\r\n\t\t\t\turl: this._getTarget(id),\r\n\t\t\t\tpostData: JSON.stringify(object),\r\n\t\t\t\thandleAs: \"json\",\r\n\t\t\t\theaders: lang.mixin({\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\tAccept: this.accepts,\r\n\t\t\t\t\t\"If-Match\": options.overwrite === true ? \"*\" : null,\r\n\t\t\t\t\t\"If-None-Match\": options.overwrite === false ? \"*\" : null\r\n\t\t\t\t}, this.headers, options.headers)\r\n\t\t\t});\r\n\t},\r\n\r\n\tadd: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tAdds an object. This will trigger a PUT request to the server\r\n\t\t//\t\tif the object has an id, otherwise it will trigger a POST request.\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: __PutDirectives?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\"\r\n\t\t//\t\tproperty if a specific id is to be used.\r\n\t\toptions = options || {};\r\n\t\toptions.overwrite = false;\r\n\t\treturn this.put(object, options);\r\n\t},\r\n\r\n\tremove: function(id, options){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes an object by its identity. This will trigger a DELETE request to the server.\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to delete the object\r\n\t\t// options: __HeaderOptions?\r\n\t\t//\t\tHTTP headers.\r\n\t\toptions = options || {};\r\n\t\treturn xhr(\"DELETE\", {\r\n\t\t\turl: this._getTarget(id),\r\n\t\t\theaders: lang.mixin({}, this.headers, options.headers)\r\n\t\t});\r\n\t},\r\n\r\n\tquery: function(query, options){\r\n\t\t// summary:\r\n\t\t//\t\tQueries the store for objects. This will trigger a GET request to the server, with the\r\n\t\t//\t\tquery added as a query string.\r\n\t\t// query: Object\r\n\t\t//\t\tThe query to use for retrieving objects from the store.\r\n\t\t// options: __QueryOptions?\r\n\t\t//\t\tThe optional arguments to apply to the resultset.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tThe results of the query, extended with iterative methods.\r\n\t\toptions = options || {};\r\n\r\n\t\tvar headers = lang.mixin({ Accept: this.accepts }, this.headers, options.headers);\r\n\r\n\t\tvar hasQuestionMark = this.target.indexOf(\"?\") > -1;\r\n\t\tif(query && typeof query == \"object\"){\r\n\t\t\tquery = xhr.objectToQuery(query);\r\n\t\t\tquery = query ? (hasQuestionMark ? \"&\" : \"?\") + query: \"\";\r\n\t\t}\r\n\t\tif(options.start >= 0 || options.count >= 0){\r\n\t\t\theaders[\"X-Range\"] = \"items=\" + (options.start || '0') + '-' +\r\n\t\t\t\t((\"count\" in options && options.count != Infinity) ?\r\n\t\t\t\t\t(options.count + (options.start || 0) - 1) : '');\r\n\t\t\tif(this.rangeParam){\r\n\t\t\t\tquery += (query || hasQuestionMark ? \"&\" : \"?\") + this.rangeParam + \"=\" + headers[\"X-Range\"];\r\n\t\t\t\thasQuestionMark = true;\r\n\t\t\t}else{\r\n\t\t\t\theaders.Range = headers[\"X-Range\"];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(options && options.sort){\r\n\t\t\tvar sortParam = this.sortParam;\r\n\t\t\tquery += (query || hasQuestionMark ? \"&\" : \"?\") + (sortParam ? sortParam + '=' : \"sort(\");\r\n\t\t\tfor(var i = 0; i<options.sort.length; i++){\r\n\t\t\t\tvar sort = options.sort[i];\r\n\t\t\t\tquery += (i > 0 ? \",\" : \"\") + (sort.descending ? this.descendingPrefix : this.ascendingPrefix) + encodeURIComponent(sort.attribute);\r\n\t\t\t}\r\n\t\t\tif(!sortParam){\r\n\t\t\t\tquery += \")\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar results = xhr(\"GET\", {\r\n\t\t\turl: this.target + (query || \"\"),\r\n\t\t\thandleAs: \"json\",\r\n\t\t\theaders: headers\r\n\t\t});\r\n\t\tresults.total = results.then(function(){\r\n\t\t\tvar range = results.ioArgs.xhr.getResponseHeader(\"Content-Range\");\r\n\t\t\tif (!range){\r\n\t\t\t\t// At least Chrome drops the Content-Range header from cached replies.\r\n\t\t\t\trange = results.ioArgs.xhr.getResponseHeader(\"X-Content-Range\");\r\n\t\t\t}\r\n\t\t\treturn range && (range = range.match(/\\/(.*)/)) && +range[1];\r\n\t\t});\r\n\t\treturn QueryResults(results);\r\n\t}\r\n});\r\n\r\n});"]}
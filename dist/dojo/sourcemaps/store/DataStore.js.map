{"version":3,"sources":["store/DataStore.js"],"names":["define","lang","declare","Deferred","array","QueryResults","SimpleQueryEngine","target","constructor","options","mixin","this","idAttribute","store","getIdentityAttributes","e","idProperty","idAttributes","features","getFeatures","get","getIdentity","put","add","queryEngine","_objectConverter","callback","item","convert","object","attributes","getAttributes","i","length","attribute","values","getValues","j","value","isItem","getValue","id","returnedObject","returnedError","deferred","fetchItemByIdentity","identity","onItem","resolve","onError","error","reject","undefined","promise","newItem","save","onComplete","overwrite","Error","hasOwnProperty","setValue","remove","deleteItem","query","fetchHandle","abort","total","converter","fetch","onBegin","count","results","map"],"mappings":"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","file":"../../store/DataStore.js","sourcesContent":["define([\r\n\t\"../_base/lang\", \"../_base/declare\", \"../Deferred\", \"../_base/array\",\r\n\t\"./util/QueryResults\", \"./util/SimpleQueryEngine\" /*=====, \"./api/Store\" =====*/\r\n], function(lang, declare, Deferred, array, QueryResults, SimpleQueryEngine /*=====, Store =====*/){\r\n\r\n// module:\r\n//\t\tdojo/store/DataStore\r\n\r\n\r\n// No base class, but for purposes of documentation, the base class is dojo/store/api/Store\r\nvar base = null;\r\n/*===== base = Store; =====*/\r\n\r\nreturn declare(\"dojo.store.DataStore\", base, {\r\n\t// summary:\r\n\t//\t\tThis is an adapter for using Dojo Data stores with an object store consumer.\r\n\t//\t\tYou can provide a Dojo data store and use this adapter to interact with it through\r\n\t//\t\tthe Dojo object store API\r\n\r\n\ttarget: \"\",\r\n\tconstructor: function(options){\r\n\t\t// options: Object?\r\n\t\t//\t\tThis provides any configuration information that will be mixed into the store,\r\n\t\t//\t\tincluding a reference to the Dojo data store under the property \"store\".\r\n\t\tlang.mixin(this, options);\r\n \t\tif(!\"idProperty\" in options){\r\n\t\t\tvar idAttribute; \r\n\t\t\ttry{\r\n\t\t\t\tidAttribute = this.store.getIdentityAttributes(); \r\n\t\t\t}catch(e){ \r\n\t \t\t// some store are not requiring an item instance to give us the ID attributes \r\n\t \t\t// but some other do and throw errors in that case. \r\n\t\t\t} \r\n\t\t\t// if no idAttribute we have implicit id \r\n\t\t\tthis.idProperty = (!idAttribute || !idAttributes[0]) || this.idProperty; \r\n\t\t}\r\n\t\tvar features = this.store.getFeatures();\r\n\t\t// check the feature set and null out any methods that shouldn't be available\r\n\t\tif(!features[\"dojo.data.api.Read\"]){\r\n\t\t\tthis.get = null;\r\n\t\t}\r\n\t\tif(!features[\"dojo.data.api.Identity\"]){\r\n\t\t\tthis.getIdentity = null;\r\n\t\t}\r\n\t\tif(!features[\"dojo.data.api.Write\"]){\r\n\t\t\tthis.put = this.add = null;\r\n\t\t}\r\n\t},\r\n\t// idProperty: String\r\n\t//\t\tThe object property to use to store the identity of the store items.\r\n\tidProperty: \"id\",\r\n\t// store:\r\n\t//\t\tThe object store to convert to a data store\r\n\tstore: null,\r\n\t// queryEngine: Function\r\n\t//\t\tDefines the query engine to use for querying the data store\r\n\tqueryEngine: SimpleQueryEngine,\r\n\t\r\n\t_objectConverter: function(callback){\r\n\t\tvar store = this.store;\r\n\t\tvar idProperty = this.idProperty;\r\n\t\tfunction convert(item){\r\n\t\t\tvar object = {};\r\n\t\t\tvar attributes = store.getAttributes(item);\r\n\t\t\tfor(var i = 0; i < attributes.length; i++){\r\n\t\t\t\tvar attribute = attributes[i];\r\n\t\t\t\tvar values = store.getValues(item, attribute);\r\n\t\t\t\tif(values.length > 1){\r\n\t\t\t\t\tfor(var j = 0; j < values.length; j++){\r\n\t\t\t\t\t\tvar value = values[j];\r\n\t\t\t\t\t\tif(typeof value == 'object' && store.isItem(value)){\r\n\t\t\t\t\t\t\tvalues[j] = convert(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalue = values;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar value = store.getValue(item, attribute);\r\n\t\t\t\t\tif(typeof value == 'object' && store.isItem(value)){\r\n\t\t\t\t\t\tvalue = convert(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobject[attributes[i]] = value;\r\n\t\t\t}\r\n\t\t\tif(!(idProperty in object) && store.getIdentity){\r\n\t\t\t\tobject[idProperty] = store.getIdentity(item);\r\n\t\t\t}\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\treturn function(item){\r\n\t\t\treturn callback(item && convert(item));\r\n\t\t};\r\n\t},\r\n\tget: function(id, options){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves an object by it's identity. This will trigger a fetchItemByIdentity\r\n\t\t// id: Object?\r\n\t\t//\t\tThe identity to use to lookup the object\r\n\t\tvar returnedObject, returnedError;\r\n\t\tvar deferred = new Deferred();\r\n\t\tthis.store.fetchItemByIdentity({\r\n\t\t\tidentity: id,\r\n\t\t\tonItem: this._objectConverter(function(object){\r\n\t\t\t\tdeferred.resolve(returnedObject = object);\r\n\t\t\t}),\r\n\t\t\tonError: function(error){\r\n\t\t\t\tdeferred.reject(returnedError = error);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(returnedObject !== undefined){\r\n\t\t\t// if it was returned synchronously\r\n\t\t\treturn returnedObject == null ? undefined : returnedObject;\r\n\t\t}\r\n\t\tif(returnedError){\r\n\t\t\tthrow returnedError;\r\n\t\t}\r\n\t\treturn deferred.promise;\r\n\t},\r\n\tput: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tStores an object by its identity.\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: Object?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes a reference to an id\r\n\t\t//\t\tthat the object may be stored with (i.e. { id: \"foo\" }).\r\n\t\toptions = options || {};\r\n\t\tvar id = typeof options.id != \"undefined\" ? options.id : this.getIdentity(object);\r\n\t\tvar store = this.store;\r\n\t\tvar idProperty = this.idProperty;\r\n\t\tvar deferred = new Deferred();\r\n\t\tif(typeof id == \"undefined\"){\r\n\t\t\tstore.newItem(object);\r\n\t\t\tstore.save({\r\n\t\t\t\tonComplete: function(){\r\n\t\t\t\t\tdeferred.resolve(object);\r\n\t\t\t\t},\r\n\t\t\t\tonError: function(error){\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tstore.fetchItemByIdentity({\r\n\t\t\t\tidentity: id,\r\n\t\t\t\tonItem: function(item){\r\n\t\t\t\t\tif(item){\r\n\t\t\t\t\t\tif(options.overwrite === false){\r\n\t\t\t\t\t\t\treturn deferred.reject(new Error(\"Overwriting existing object not allowed\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(var i in object){\r\n\t\t\t\t\t\t\tif(i != idProperty && // don't copy id properties since they are immutable and should be omitted for implicit ids\r\n\t\t\t\t\t\t\t\t\tobject.hasOwnProperty(i) && // don't want to copy methods and inherited properties\r\n\t\t\t\t\t\t\t\t\tstore.getValue(item, i) != object[i]){\r\n\t\t\t\t\t\t\t\tstore.setValue(item, i, object[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(options.overwrite === true){\r\n\t\t\t\t\t\t\treturn deferred.reject(new Error(\"Creating new object not allowed\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstore.newItem(object);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.save({\r\n\t\t\t\t\t\tonComplete: function(){\r\n\t\t\t\t\t\t\tdeferred.resolve(object);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonError: function(error){\r\n\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tonError: function(error){\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn deferred.promise;\r\n\t},\r\n\tadd: function(object, options){\r\n\t\t// summary:\r\n\t\t//\t\tCreates an object, throws an error if the object already exists\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// options: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\"\r\n\t\t//\t\tproperty if a specific id is to be used.\r\n\t\t// returns: Number\r\n\t\t(options = options || {}).overwrite = false;\r\n\t\t// call put with overwrite being false\r\n\t\treturn this.put(object, options);\r\n\t},\r\n\tremove: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes an object by its identity.\r\n\t\t// id: Object\r\n\t\t//\t\tThe identity to use to delete the object\r\n\t\tvar store = this.store;\r\n\t\tvar deferred = new Deferred();\r\n\r\n\t\tthis.store.fetchItemByIdentity({\r\n\t\t\tidentity: id,\r\n\t\t\tonItem: function(item){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tif(item == null){\r\n\t\t\t\t\t\t// no item found, return false\r\n\t\t\t\t\t\tdeferred.resolve(false);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// delete and save the change\r\n\t\t\t\t\t\tstore.deleteItem(item);\r\n\t\t\t\t\t\tstore.save();\r\n\t\t\t\t\t\tdeferred.resolve(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(error){\r\n\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonError: function(error){\r\n\t\t\t\tdeferred.reject(error);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn deferred.promise;\r\n\t},\r\n\tquery: function(query, options){\r\n\t\t// summary:\r\n\t\t//\t\tQueries the store for objects.\r\n\t\t// query: Object\r\n\t\t//\t\tThe query to use for retrieving objects from the store\r\n\t\t// options: Object?\r\n\t\t//\t\tOptional options object as used by the underlying dojo.data Store.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tA query results object that can be used to iterate over results.\r\n\t\tvar fetchHandle;\r\n\t\tvar deferred = new Deferred(function(){ fetchHandle.abort && fetchHandle.abort(); });\r\n\t\tdeferred.total = new Deferred();\r\n\t\tvar converter = this._objectConverter(function(object){return object;});\r\n\t\tfetchHandle = this.store.fetch(lang.mixin({\r\n\t\t\tquery: query,\r\n\t\t\tonBegin: function(count){\r\n\t\t\t\tdeferred.total.resolve(count);\r\n\t\t\t},\r\n\t\t\tonComplete: function(results){\r\n\t\t\t\tdeferred.resolve(array.map(results, converter));\r\n\t\t\t},\r\n\t\t\tonError: function(error){\r\n\t\t\t\tdeferred.reject(error);\r\n\t\t\t}\r\n\t\t}, options));\r\n\t\treturn QueryResults(deferred);\r\n\t},\r\n\tgetIdentity: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tFetch the identity for the given object.\r\n\t\t// object: Object\r\n\t\t//\t\tThe data object to get the identity from.\r\n\t\t// returns: Number\r\n\t\t//\t\tThe id of the given object.\r\n\t\treturn object[this.idProperty];\r\n\t}\r\n});\r\n});\r\n"]}
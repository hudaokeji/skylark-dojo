{"version":3,"sources":["store/api/Store.js"],"names":["define","declare","Store","idProperty","queryEngine","get","id","getIdentity","object","put","directives","add","remove","this","index","data","i","l","length","splice","query","options","transaction","getChildren","parent","getMetadata","PutDirectives","SortInformation","QueryOptions","QueryResults","forEach","callback","thisObject","filter","map","then","errorHandler","observe","listener","includeAllUpdates","total","Transaction","commit","abort"],"mappings":";;;;;;;AAAAA,QAAQ,uBAAwB,SAASC,GAKzC,IAAIC,EAAQD,EAAQ,MAenBE,WAAY,KAcZC,YAAa,KAEbC,IAAK,SAASC,KAQdC,YAAa,SAASC,KAOtBC,IAAK,SAASD,EAAQE,KAStBC,IAAK,SAASH,EAAQE,KAStBE,OAAQ,SAASN,UAKTO,KAAKC,MAAMR,GAGlB,IAFA,IAAIS,EAAOF,KAAKE,KACfZ,EAAaU,KAAKV,WACXa,EAAI,EAAGC,EAAIF,EAAKG,OAAQF,EAAIC,EAAGD,IACtC,GAAGD,EAAKC,GAAGb,IAAeG,EAEzB,YADAS,EAAKI,OAAOH,EAAG,IAKlBI,MAAO,SAASA,EAAOC,KAoBvBC,YAAa,aASbC,YAAa,SAASC,EAAQH,KAU9BI,YAAa,SAASjB,OAkKvB,OAvJAN,EAAMwB,cAAgBzB,EAAQ,SAuB9BC,EAAMyB,gBAAkB1B,EAAQ,SAShCC,EAAM0B,aAAe3B,EAAQ,SAe7BC,EAAM2B,aAAe5B,EAAQ,MAK5B6B,QAAS,SAASC,EAAUC,KAY5BC,OAAQ,SAASF,EAAUC,KAY3BE,IAAK,SAASH,EAAUC,KAYxBG,KAAM,SAASJ,EAAUK,KAWzBC,QAAS,SAASC,EAAUC,KA+B5BC,MAAO,IAGRtC,EAAMuC,YAAcxC,EAAQ,MAK3ByC,OAAQ,aAMRC,MAAO,SAASZ,EAAUC,OAOpB9B","file":"../../../store/api/Store.js","sourcesContent":["define([\"../../_base/declare\"], function(declare){\r\n\r\n// module:\r\n//\t\tdojo/api/Store\r\n\r\nvar Store = declare(null, {\r\n\t// summary:\r\n\t//\t\tThis is an abstract API that data provider implementations conform to.\r\n\t//\t\tThis file defines methods signatures and intentionally leaves all the\r\n\t//\t\tmethods unimplemented.  For more information on the ,\r\n\t//\t\tplease visit: http://dojotoolkit.org/reference-guide/dojo/store.html\r\n\t//\t\tEvery method and property is optional, and is only needed if the functionality\r\n\t//\t\tit provides is required.\r\n\t//\t\tEvery method may return a promise for the specified return value if the\r\n\t//\t\texecution of the operation is asynchronous (except\r\n\t//\t\tfor query() which already defines an async return value).\r\n\r\n\t// idProperty: String\r\n\t//\t\tIf the store has a single primary key, this indicates the property to use as the\r\n\t//\t\tidentity property. The values of this property should be unique.\r\n\tidProperty: \"id\",\r\n\r\n\t// queryEngine: Function\r\n\t//\t\tIf the store can be queried locally (on the client side in JS), this defines\r\n\t//\t\tthe query engine to use for querying the data store.\r\n\t//\t\tThis takes a query and query options and returns a function that can execute\r\n\t//\t\tthe provided query on a JavaScript array. The queryEngine may be replace to\r\n\t//\t\tprovide more sophisticated querying capabilities. For example:\r\n\t//\t\t| var query = store.queryEngine({foo:\"bar\"}, {count:10});\r\n\t//\t\t| query(someArray) -> filtered array\r\n\t//\t\tThe returned query function may have a \"matches\" property that can be\r\n\t//\t\tused to determine if an object matches the query. For example:\r\n\t//\t\t| query.matches({id:\"some-object\", foo:\"bar\"}) -> true\r\n\t//\t\t| query.matches({id:\"some-object\", foo:\"something else\"}) -> false\r\n\tqueryEngine: null,\r\n\r\n\tget: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves an object by its identity\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to lookup the object\r\n\t\t// returns: Object\r\n\t\t//\t\tThe object in the store that matches the given id.\r\n\t},\r\n\tgetIdentity: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an object's identity\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to get the identity from\r\n\t\t// returns: String|Number\r\n\t},\r\n\tput: function(object, directives){\r\n\t\t// summary:\r\n\t\t//\t\tStores an object\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// directives: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAdditional directives for storing objects.\r\n\t\t// returns: Number|String\r\n\t},\r\n\tadd: function(object, directives){\r\n\t\t// summary:\r\n\t\t//\t\tCreates an object, throws an error if the object already exists\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to store.\r\n\t\t// directives: dojo/store/api/Store.PutDirectives?\r\n\t\t//\t\tAdditional directives for creating objects.\r\n\t\t// returns: Number|String\r\n\t},\r\n\tremove: function(id){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes an object by its identity\r\n\t\t// id: Number\r\n\t\t//\t\tThe identity to use to delete the object\r\n\t\tdelete this.index[id];\r\n\t\tvar data = this.data,\r\n\t\t\tidProperty = this.idProperty;\r\n\t\tfor(var i = 0, l = data.length; i < l; i++){\r\n\t\t\tif(data[i][idProperty] == id){\r\n\t\t\t\tdata.splice(i, 1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tquery: function(query, options){\r\n\t\t// summary:\r\n\t\t//\t\tQueries the store for objects. This does not alter the store, but returns a\r\n\t\t//\t\tset of data from the store.\r\n\t\t// query: String|Object|Function\r\n\t\t//\t\tThe query to use for retrieving objects from the store.\r\n\t\t// options: dojo/store/api/Store.QueryOptions\r\n\t\t//\t\tThe optional arguments to apply to the resultset.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tThe results of the query, extended with iterative methods.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tGiven the following store:\r\n\t\t//\r\n\t\t//\t...find all items where \"prime\" is true:\r\n\t\t//\r\n\t\t//\t|\tstore.query({ prime: true }).forEach(function(object){\r\n\t\t//\t|\t\t// handle each object\r\n\t\t//\t|\t});\r\n\t},\r\n\ttransaction: function(){\r\n\t\t// summary:\r\n\t\t//\t\tStarts a new transaction.\r\n\t\t//\t\tNote that a store user might not call transaction() prior to using put,\r\n\t\t//\t\tdelete, etc. in which case these operations effectively could be thought of\r\n\t\t//\t\tas \"auto-commit\" style actions.\r\n\t\t// returns: dojo/store/api/Store.Transaction\r\n\t\t//\t\tThis represents the new current transaction.\r\n\t},\r\n\tgetChildren: function(parent, options){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves the children of an object.\r\n\t\t// parent: Object\r\n\t\t//\t\tThe object to find the children of.\r\n\t\t// options: dojo/store/api/Store.QueryOptions?\r\n\t\t//\t\tAdditional options to apply to the retrieval of the children.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t//\t\tA result set of the children of the parent object.\r\n\t},\r\n\tgetMetadata: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tReturns any metadata about the object. This may include attribution,\r\n\t\t//\t\tcache directives, history, or version information.\r\n\t\t// object: Object\r\n\t\t//\t\tThe object to return metadata for.\r\n\t\t// returns: Object\r\n\t\t//\t\tAn object containing metadata.\r\n\t}\r\n});\r\n\r\nStore.PutDirectives = declare(null, {\r\n\t// summary:\r\n\t//\t\tDirectives passed to put() and add() handlers for guiding the update and\r\n\t//\t\tcreation of stored objects.\r\n\t// id: String|Number?\r\n\t//\t\tIndicates the identity of the object if a new object is created\r\n\t// before: Object?\r\n\t//\t\tIf the collection of objects in the store has a natural ordering,\r\n\t//\t\tthis indicates that the created or updated object should be placed before the\r\n\t//\t\tobject specified by the value of this property. A value of null indicates that the\r\n\t//\t\tobject should be last.\r\n\t// parent: Object?,\r\n\t//\t\tIf the store is hierarchical (with single parenting) this property indicates the\r\n\t//\t\tnew parent of the created or updated object.\r\n\t// overwrite: Boolean?\r\n\t//\t\tIf this is provided as a boolean it indicates that the object should or should not\r\n\t//\t\toverwrite an existing object. A value of true indicates that a new object\r\n\t//\t\tshould not be created, the operation should update an existing object. A\r\n\t//\t\tvalue of false indicates that an existing object should not be updated, a new\r\n\t//\t\tobject should be created (which is the same as an add() operation). When\r\n\t//\t\tthis property is not provided, either an update or creation is acceptable.\r\n});\r\n\r\nStore.SortInformation = declare(null, {\r\n\t// summary:\r\n\t//\t\tAn object describing what attribute to sort on, and the direction of the sort.\r\n\t// attribute: String\r\n\t//\t\tThe name of the attribute to sort on.\r\n\t// descending: Boolean\r\n\t//\t\tThe direction of the sort.  Default is false.\r\n});\r\n\r\nStore.QueryOptions = declare(null, {\r\n\t// summary:\r\n\t//\t\tOptional object with additional parameters for query results.\r\n\t// sort: dojo/store/api/Store.SortInformation[]?\r\n\t//\t\tA list of attributes to sort on, as well as direction\r\n\t//\t\tFor example:\r\n\t//\t\t| [{attribute:\"price, descending: true}].\r\n\t//\t\tIf the sort parameter is omitted, then the natural order of the store may be\r\n\t//\t\tapplied if there is a natural order.\r\n\t// start: Number?\r\n\t//\t\tThe first result to begin iteration on\r\n\t// count: Number?\r\n\t//\t\tThe number of how many results should be returned.\r\n});\r\n\r\nStore.QueryResults = declare(null, {\r\n\t// summary:\r\n\t//\t\tThis is an object returned from query() calls that provides access to the results\r\n\t//\t\tof a query. Queries may be executed asynchronously.\r\n\r\n\tforEach: function(callback, thisObject){\r\n\t\t// summary:\r\n\t\t//\t\tIterates over the query results, based on\r\n\t\t//\t\thttps://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach.\r\n\t\t//\t\tNote that this may executed asynchronously. The callback may be called\r\n\t\t//\t\tafter this function returns.\r\n\t\t// callback:\r\n\t\t//\t\tFunction that is called for each object in the query results\r\n\t\t// thisObject:\r\n\t\t//\t\tThe object to use as |this| in the callback.\r\n\r\n\t},\r\n\tfilter: function(callback, thisObject){\r\n\t\t// summary:\r\n\t\t//\t\tFilters the query results, based on\r\n\t\t//\t\thttps://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter.\r\n\t\t//\t\tNote that this may executed asynchronously. The callback may be called\r\n\t\t//\t\tafter this function returns.\r\n\t\t// callback:\r\n\t\t//\t\tFunction that is called for each object in the query results\r\n\t\t// thisObject:\r\n\t\t//\t\tThe object to use as |this| in the callback.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t},\r\n\tmap: function(callback, thisObject){\r\n\t\t// summary:\r\n\t\t//\t\tMaps the query results, based on\r\n\t\t//\t\thttps://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map.\r\n\t\t//\t\tNote that this may executed asynchronously. The callback may be called\r\n\t\t//\t\tafter this function returns.\r\n\t\t// callback:\r\n\t\t//\t\tFunction that is called for each object in the query results\r\n\t\t// thisObject:\r\n\t\t//\t\tThe object to use as |this| in the callback.\r\n\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t},\r\n\tthen: function(callback, errorHandler){\r\n\t\t// summary:\r\n\t\t//\t\tThis registers a callback for when the query is complete, if the query is asynchronous.\r\n\t\t//\t\tThis is an optional method, and may not be present for synchronous queries.\r\n\t\t// callback:\r\n\t\t//\t\tThis is called when the query is completed successfully, and is passed a single argument\r\n\t\t//\t\tthat is an array representing the query results.\r\n\t\t// errorHandler:\r\n\t\t//\t\tThis is called if the query failed, and is passed a single argument that is the error\r\n\t\t//\t\tfor the failure.\r\n\t},\r\n\tobserve: function(listener, includeAllUpdates){\r\n\t\t// summary:\r\n\t\t//\t\tThis registers a callback for notification of when data is modified in the query results.\r\n\t\t//\t\tThis is an optional method, and is usually provided by dojo/store/Observable.\r\n\t\t// listener: Function\r\n\t\t//\t\tThe listener function is called when objects in the query results are modified\r\n\t\t//\t\tto affect the query result. The listener function is called with the following arguments:\r\n\t\t//\t\t| listener(object, removedFrom, insertedInto);\r\n\t\t//\r\n\t\t//\t\t- The object parameter indicates the object that was create, modified, or deleted.\r\n\t\t//\t\t- The removedFrom parameter indicates the index in the result array where\r\n\t\t//\t\tthe object used to be. If the value is -1, then the object is an addition to\r\n\t\t//\t\tthis result set (due to a new object being created, or changed such that it\r\n\t\t//\t\tis a part of the result set).\r\n\t\t//\t\t- The insertedInto parameter indicates the index in the result array where\r\n\t\t//\t\tthe object should be now. If the value is -1, then the object is a removal\r\n\t\t//\t\tfrom this result set (due to an object being deleted, or changed such that it\r\n\t\t//\t\tis not a part of the result set).\r\n\t\t// includeAllUpdates:\r\n\t\t//\t\tThis indicates whether or not to include object updates that do not affect\r\n\t\t//\t\tthe inclusion or order of the object in the query results. By default this is false,\r\n\t\t//\t\twhich means that if any object is updated in such a way that it remains\r\n\t\t//\t\tin the result set and it's position in result sets is not affected, then the listener\r\n\t\t//\t\twill not be fired.\r\n\r\n\t},\r\n\t// total: Number|Promise?\r\n\t//\t\tThis property should be included in if the query options included the \"count\"\r\n\t//\t\tproperty limiting the result set. This property indicates the total number of objects\r\n\t//\t\tmatching the query (as if \"start\" and \"count\" weren't present). This may be\r\n\t//\t\ta promise if the query is asynchronous.\r\n\ttotal: 0\r\n});\r\n\r\nStore.Transaction = declare(null, {\r\n\t// summary:\r\n\t//\t\tThis is an object returned from transaction() calls that represents the current\r\n\t//\t\ttransaction.\r\n\r\n\tcommit: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCommits the transaction. This may throw an error if it fails. Of if the operation\r\n\t\t//\t\tis asynchronous, it may return a promise that represents the eventual success\r\n\t\t//\t\tor failure of the commit.\r\n\t},\r\n\tabort: function(callback, thisObject){\r\n\t\t// summary:\r\n\t\t//\t\tAborts the transaction. This may throw an error if it fails. Of if the operation\r\n\t\t//\t\tis asynchronous, it may return a promise that represents the eventual success\r\n\t\t//\t\tor failure of the abort.\r\n\t}\r\n});\r\nreturn Store;\r\n});\r\n"]}
{"version":3,"sources":["store/util/QueryResults.js"],"names":["define","array","lang","when","QueryResults","results","isPromise","then","addIterativeMethod","method","args","arguments","result","Array","prototype","unshift","call","apply","delegate","total","length","setObject"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,mBAAoB,cAC9C,SAASC,EAAOC,EAAMC,GAKzB,IAAIC,EAAe,SAASC,GAuB3B,IAAIA,EACH,OAAOA,EAGR,IAAIC,IAAcD,EAAQE,KAK1B,SAASC,EAAmBC,GAG3BJ,EAAQI,GAAU,WACjB,IAAIC,EAAOC,UACPC,EAAST,EAAKE,EAAS,SAASA,GAEnC,OADAQ,MAAMC,UAAUC,QAAQC,KAAKN,EAAML,GAC5BD,EAAaH,EAAMQ,GAAQQ,MAAMhB,EAAOS,MAIhD,GAAc,YAAXD,GAAwBH,EAC1B,OAAOM,GAaV,OA5BGN,IACFD,EAAUH,EAAKgB,SAASb,IAmBzBG,EAAmB,WACnBA,EAAmB,UACnBA,EAAmB,OACC,MAAjBH,EAAQc,QACVd,EAAQc,MAAQhB,EAAKE,EAAS,SAASA,GACtC,OAAOA,EAAQe,UAGVf,GAKR,OAFAH,EAAKmB,UAAU,+BAAgCjB,GAExCA","file":"../../../store/util/QueryResults.js","sourcesContent":["define([\"../../_base/array\", \"../../_base/lang\", \"../../when\"\r\n], function(array, lang, when){\r\n\r\n// module:\r\n//\t\tdojo/store/util/QueryResults\r\n\r\nvar QueryResults = function(results){\r\n\t// summary:\r\n\t//\t\tA function that wraps the results of a store query with additional\r\n\t//\t\tmethods.\r\n\t// description:\r\n\t//\t\tQueryResults is a basic wrapper that allows for array-like iteration\r\n\t//\t\tover any kind of returned data from a query.  While the simplest store\r\n\t//\t\twill return a plain array of data, other stores may return deferreds or\r\n\t//\t\tpromises; this wrapper makes sure that *all* results can be treated\r\n\t//\t\tthe same.\r\n\t//\r\n\t//\t\tAdditional methods include `forEach`, `filter` and `map`.\r\n\t// results: Array|dojo/promise/Promise\r\n\t//\t\tThe result set as an array, or a promise for an array.\r\n\t// returns:\r\n\t//\t\tAn array-like object that can be used for iterating over.\r\n\t// example:\r\n\t//\t\tQuery a store and iterate over the results.\r\n\t//\r\n\t//\t|\tstore.query({ prime: true }).forEach(function(item){\r\n\t//\t|\t\t//\tdo something\r\n\t//\t|\t});\r\n\r\n\tif(!results){\r\n\t\treturn results;\r\n\t}\r\n\r\n\tvar isPromise = !!results.then;\r\n\t// if it is a promise it may be frozen\r\n\tif(isPromise){\r\n\t\tresults = lang.delegate(results);\r\n\t}\r\n\tfunction addIterativeMethod(method){\r\n\t\t// Always add the iterative methods so a QueryResults is\r\n\t\t// returned whether the environment is ES3 or ES5\r\n\t\tresults[method] = function(){\r\n\t\t\tvar args = arguments;\r\n\t\t\tvar result = when(results, function(results){\r\n\t\t\t\tArray.prototype.unshift.call(args, results);\r\n\t\t\t\treturn QueryResults(array[method].apply(array, args));\r\n\t\t\t});\r\n\t\t\t// forEach should only return the result of when()\r\n\t\t\t// when we're wrapping a promise\r\n\t\t\tif(method !== \"forEach\" || isPromise){\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\taddIterativeMethod(\"forEach\");\r\n\taddIterativeMethod(\"filter\");\r\n\taddIterativeMethod(\"map\");\r\n\tif(results.total == null){\r\n\t\tresults.total = when(results, function(results){\r\n\t\t\treturn results.length;\r\n\t\t});\r\n\t}\r\n\treturn results; // Object\r\n};\r\n\r\nlang.setObject(\"dojo.store.util.QueryResults\", QueryResults);\r\n\r\nreturn QueryResults;\r\n\r\n});\r\n"]}
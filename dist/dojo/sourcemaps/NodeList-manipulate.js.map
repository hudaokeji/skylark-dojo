{"version":3,"sources":["NodeList-manipulate.js"],"names":["define","dquery","lang","array","construct","attr","NodeList","getWrapInsertion","node","childNodes","nodeType","makeWrapNode","html","refNode","toDom","ownerDocument","parentNode","cloneNode","extend","_placeMultiple","query","position","nl2","toAdd","i","length","item","this","j","_cloneNode","unshift","place","insertBefore","Array","prototype","splice","apply","innerHTML","value","arguments","addContent","text","set","result","get","val","isArray","index","name","nodeName","toUpperCase","type","newValue","opts","options","opt","multiple","selected","indexOf","checked","push","append","content","appendTo","prepend","prependTo","after","insertAfter","before","remove","orphan","wrap","clone","replaceChild","appendChild","wrapAll","insertion","wrapInner","_wrap","_toArray","_NodeListCtor","replaceWith","_normalize","_place","removeChild","replaceAll","nl","ary"],"mappings":"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","file":"../NodeList-manipulate.js","sourcesContent":["define([\"./query\", \"./_base/lang\", \"./_base/array\", \"./dom-construct\", \"./dom-attr\", \"./NodeList-dom\"], function(dquery, lang, array, construct, attr){\r\n\t// module:\r\n\t//\t\tdojo/NodeList-manipulate\r\n\r\n\t/*=====\r\n\treturn function(){\r\n\t\t// summary:\r\n\t\t//\t\tAdds chainable methods to dojo.query() / NodeList instances for manipulating HTML\r\n\t\t//\t\tand DOM nodes and their properties.\r\n\t};\r\n\t=====*/\r\n\r\n\tvar NodeList = dquery.NodeList;\r\n\r\n\t//TODO: add a way to parse for widgets in the injected markup?\r\n\r\n\r\n\tfunction getWrapInsertion(/*DOMNode*/node){\r\n\t\t// summary:\r\n\t\t//\t\tfinds the innermost element to use for wrap insertion.\r\n\r\n\t\t//Make it easy, assume single nesting, no siblings.\r\n\t\twhile(node.childNodes[0] && node.childNodes[0].nodeType == 1){\r\n\t\t\tnode = node.childNodes[0];\r\n\t\t}\r\n\t\treturn node; //DOMNode\r\n\t}\r\n\r\n\tfunction makeWrapNode(/*DOMNode||String*/html, /*DOMNode*/refNode){\r\n\t\t// summary:\r\n\t\t//\t\tconvert HTML into nodes if it is not already a node.\r\n\t\tif(typeof html == \"string\"){\r\n\t\t\thtml = construct.toDom(html, (refNode && refNode.ownerDocument));\r\n\t\t\tif(html.nodeType == 11){\r\n\t\t\t\t//DocumentFragment cannot handle cloneNode, so choose first child.\r\n\t\t\t\thtml = html.childNodes[0];\r\n\t\t\t}\r\n\t\t}else if(html.nodeType == 1 && html.parentNode){\r\n\t\t\t//This element is already in the DOM clone it, but not its children.\r\n\t\t\thtml = html.cloneNode(false);\r\n\t\t}\r\n\t\treturn html; /*DOMNode*/\r\n\t}\r\n\r\n\tlang.extend(NodeList, {\r\n\t\t_placeMultiple: function(/*String||Node||NodeList*/query, /*String*/position){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprivate method for inserting queried nodes into all nodes in this NodeList\r\n\t\t\t//\t\tat different positions. Differs from NodeList.place because it will clone\r\n\t\t\t//\t\tthe nodes in this NodeList if the query matches more than one element.\r\n\t\t\tvar nl2 = typeof query == \"string\" || query.nodeType ? dquery(query) : query;\r\n\t\t\tvar toAdd = [];\r\n\t\t\tfor(var i = 0; i < nl2.length; i++){\r\n\t\t\t\t//Go backwards in DOM to make dom insertions easier via insertBefore\r\n\t\t\t\tvar refNode = nl2[i];\r\n\t\t\t\tvar length = this.length;\r\n\t\t\t\tfor(var j = length - 1, item; item = this[j]; j--){\r\n\t\t\t\t\tif(i > 0){\r\n\t\t\t\t\t\t//Need to clone the item. This also means\r\n\t\t\t\t\t\t//it needs to be added to the current NodeList\r\n\t\t\t\t\t\t//so it can also be the target of other chaining operations.\r\n\t\t\t\t\t\titem = this._cloneNode(item);\r\n\t\t\t\t\t\ttoAdd.unshift(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(j == length - 1){\r\n\t\t\t\t\t\tconstruct.place(item, refNode, position);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\trefNode.parentNode.insertBefore(item, refNode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\trefNode = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(toAdd.length){\r\n\t\t\t\t//Add the toAdd items to the current NodeList. Build up list of args\r\n\t\t\t\t//to pass to splice.\r\n\t\t\t\ttoAdd.unshift(0);\r\n\t\t\t\ttoAdd.unshift(this.length - 1);\r\n\t\t\t\tArray.prototype.splice.apply(this, toAdd);\r\n\t\t\t}\r\n\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tinnerHTML: function(/*String|DOMNode|NodeList?*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tallows setting the innerHTML of each node in the NodeList,\r\n\t\t\t//\t\tif there is a value passed in, otherwise, reads the innerHTML value of the first node.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method is simpler than the dojo/NodeList.html() method provided by\r\n\t\t\t//\t\t`dojo/NodeList-html`. This method just does proper innerHTML insertion of HTML fragments,\r\n\t\t\t//\t\tand it allows for the innerHTML to be read for the first node in the node list.\r\n\t\t\t//\t\tSince dojo/NodeList-html already took the \"html\" name, this method is called\r\n\t\t\t//\t\t\"innerHTML\". However, if dojo/NodeList-html has not been loaded yet, this\r\n\t\t\t//\t\tmodule will define an \"html\" method that can be used instead. Be careful if you\r\n\t\t\t//\t\tare working in an environment where it is possible that dojo/NodeList-html could\r\n\t\t\t//\t\thave been loaded, since its definition of \"html\" will take precedence.\r\n\t\t\t//\t\tThe nodes represented by the value argument will be cloned if more than one\r\n\t\t\t//\t\tnode is in this NodeList. The nodes in this NodeList are returned in the \"set\"\r\n\t\t\t//\t\tusage of this method, not the HTML that was inserted.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is String, the innerHTML of the first node.\r\n\t\t\t//\t\tIf a value is passed, the return is this dojo/NodeList\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"></div>\r\n\t\t\t//\t|\t<div id=\"bar\"></div>\r\n\t\t\t//\t\tThis code inserts `<p>Hello World</p>` into both divs:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").innerHTML(\"<p>Hello World</p>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tThis code returns `<p>Hello Mars</p>`:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tvar message = query(\"div\").innerHTML();\r\n\t\t\t//\t| \t});\r\n\t\t\tif(arguments.length){\r\n\t\t\t\treturn this.addContent(value, \"only\"); // dojo/NodeList\r\n\t\t\t}else{\r\n\t\t\t\treturn this[0].innerHTML; //String\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*=====\r\n\t\thtml: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsee the information for \"innerHTML\". \"html\" is an alias for \"innerHTML\", but is\r\n\t\t\t//\t\tonly defined if dojo/NodeList-html has not been loaded.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAn alias for the \"innerHTML\" method, but only defined if there is not an existing\r\n\t\t\t//\t\t\"html\" method on dojo/NodeList. Be careful if you are working in an environment\r\n\t\t\t//\t\twhere it is possible that dojo/NodeList-html could have been loaded, since its\r\n\t\t\t//\t\tdefinition of \"html\" will take precedence. If you are not sure if dojo/NodeList-html\r\n\t\t\t//\t\tcould be loaded, use the \"innerHTML\" method.\r\n\t\t\t// value: String|DOMNode|NodeList?\r\n\t\t\t//\t\tThe HTML fragment to use as innerHTML. If value is not passed, then the innerHTML\r\n\t\t\t//\t\tof the first element in this NodeList is returned.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is String, the innerHTML of the first node.\r\n\t\t\t//\t\tIf a value is passed, the return is this dojo/NodeList\r\n\t\t\treturn; // dojo/NodeList|String\r\n\t\t},\r\n\t\t=====*/\r\n\r\n\t\ttext: function(/*String*/value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tallows setting the text value of each node in the NodeList,\r\n\t\t\t//\t\tif there is a value passed in, otherwise, returns the text value for all the\r\n\t\t\t//\t\tnodes in the NodeList in one string.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"></div>\r\n\t\t\t//\t|\t<div id=\"bar\"></div>\r\n\t\t\t//\t\tThis code inserts \"Hello World\" into both divs:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").text(\"Hello World\");\r\n\t\t\t//\t| \t});\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars <span>today</span></p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tThis code returns \"Hello Mars today\":\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tvar message = query(\"div\").text();\r\n\t\t\t//\t| \t});\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is String, the text value of the first node.\r\n\t\t\t//\t\tIf a value is passed, the return is this dojo/NodeList\r\n\t\t\tif(arguments.length){\r\n\t\t\t\tfor(var i = 0, node; node = this[i]; i++){\r\n\t\t\t\t\tif(node.nodeType == 1){\r\n\t\t\t\t\t\tattr.set(node, 'textContent', value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this; // dojo/NodeList\r\n\t\t\t}else{\r\n\t\t\t\tvar result = \"\";\r\n\t\t\t\tfor(i = 0; node = this[i]; i++){\r\n\t\t\t\t\tresult += attr.get(node, 'textContent');\r\n\t\t\t\t}\r\n\t\t\t\treturn result; //String\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tval: function(/*String||Array*/value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIf a value is passed, allows seting the value property of form elements in this\r\n\t\t\t//\t\tNodeList, or properly selecting/checking the right value for radio/checkbox/select\r\n\t\t\t//\t\telements. If no value is passed, the value of the first node in this NodeList\r\n\t\t\t//\t\tis returned.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tif no value is passed, the result is String or an Array, for the value of the\r\n\t\t\t//\t\tfirst node.\r\n\t\t\t//\t\tIf a value is passed, the return is this dojo/NodeList\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<input type=\"text\" value=\"foo\">\r\n\t\t\t//\t|\t<select multiple>\r\n\t\t\t//\t|\t\t<option value=\"red\" selected>Red</option>\r\n\t\t\t//\t|\t\t<option value=\"blue\">Blue</option>\r\n\t\t\t//\t|\t\t<option value=\"yellow\" selected>Yellow</option>\r\n\t\t\t//\t|\t</select>\r\n\t\t\t//\t\tThis code gets and sets the values for the form fields above:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery('[type=\"text\"]').val(); //gets value foo\r\n\t\t\t//\t|\t\tquery('[type=\"text\"]').val(\"bar\"); //sets the input's value to \"bar\"\r\n\t\t\t// \t|\t\tquery(\"select\").val() //gets array value [\"red\", \"yellow\"]\r\n\t\t\t// \t|\t\tquery(\"select\").val([\"blue\", \"yellow\"]) //Sets the blue and yellow options to selected.\r\n\t\t\t//\t| \t});\r\n\r\n\t\t\t//Special work for input elements.\r\n\t\t\tif(arguments.length){\r\n\t\t\t\tvar isArray = lang.isArray(value);\r\n\t\t\t\tfor(var index = 0, node; node = this[index]; index++){\r\n\t\t\t\t\tvar name = node.nodeName.toUpperCase();\r\n\t\t\t\t\tvar type = node.type;\r\n\t\t\t\t\tvar newValue = isArray ? value[index] : value;\r\n\r\n\t\t\t\t\tif(name == \"SELECT\"){\r\n\t\t\t\t\t\tvar opts = node.options;\r\n\t\t\t\t\t\tfor(var i = 0; i < opts.length; i++){\r\n\t\t\t\t\t\t\tvar opt = opts[i];\r\n\t\t\t\t\t\t\tif(node.multiple){\r\n\t\t\t\t\t\t\t\topt.selected = (array.indexOf(value, opt.value) != -1);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\topt.selected = (opt.value == newValue);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(type == \"checkbox\" || type == \"radio\"){\r\n\t\t\t\t\t\tnode.checked = (node.value == newValue);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tnode.value = newValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this; // dojo/NodeList\r\n\t\t\t}else{\r\n\t\t\t\t//node already declared above.\r\n\t\t\t\tnode = this[0];\r\n\t\t\t\tif(!node || node.nodeType != 1){\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\t\t\t\tvalue = node.value || \"\";\r\n\t\t\t\tif(node.nodeName.toUpperCase() == \"SELECT\" && node.multiple){\r\n\t\t\t\t\t//A multivalued selectbox. Do the pain.\r\n\t\t\t\t\tvalue = [];\r\n\t\t\t\t\t//opts declared above in if block.\r\n\t\t\t\t\topts = node.options;\r\n\t\t\t\t\t//i declared above in if block;\r\n\t\t\t\t\tfor(i = 0; i < opts.length; i++){\r\n\t\t\t\t\t\t//opt declared above in if block\r\n\t\t\t\t\t\topt = opts[i];\r\n\t\t\t\t\t\tif(opt.selected){\r\n\t\t\t\t\t\t\tvalue.push(opt.value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!value.length){\r\n\t\t\t\t\t\tvalue = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn value; //String||Array\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tappend: function(/*String||DOMNode||NodeList*/content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tappends the content to every node in the NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe content will be cloned if the length of NodeList\r\n\t\t\t//\t\tis greater than 1. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the appended content.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").append(\"<span>append</span>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p><span>append</span></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p><span>append</span></div>\r\n\t\t\treturn this.addContent(content, \"last\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tappendTo: function(/*String*/query){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tappends nodes in this NodeList to the nodes matched by\r\n\t\t\t//\t\tthe query passed to appendTo.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe nodes in this NodeList will be cloned if the query\r\n\t\t\t//\t\tmatches more than one element. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the matched nodes from the query.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<span>append</span>\r\n\t\t\t//\t|\t<p>Hello Mars</p>\r\n\t\t\t//\t|\t<p>Hello World</p>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"span\").appendTo(\"p\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<p>Hello Mars<span>append</span></p>\r\n\t\t\t//\t|\t<p>Hello World<span>append</span></p>\r\n\t\t\treturn this._placeMultiple(query, \"last\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tprepend: function(/*String||DOMNode||NodeList*/content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprepends the content to every node in the NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe content will be cloned if the length of NodeList\r\n\t\t\t//\t\tis greater than 1. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the appended content.\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").prepend(\"<span>prepend</span>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div id=\"foo\"><span>prepend</span><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><span>prepend</span><p>Hello World</p></div>\r\n\t\t\treturn this.addContent(content, \"first\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tprependTo: function(/*String*/query){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprepends nodes in this NodeList to the nodes matched by\r\n\t\t\t//\t\tthe query passed to prependTo.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe nodes in this NodeList will be cloned if the query\r\n\t\t\t//\t\tmatches more than one element. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the matched nodes from the query.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<span>prepend</span>\r\n\t\t\t//\t|\t<p>Hello Mars</p>\r\n\t\t\t//\t|\t<p>Hello World</p>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"span\").prependTo(\"p\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<p><span>prepend</span>Hello Mars</p>\r\n\t\t\t//\t|\t<p><span>prepend</span>Hello World</p>\r\n\t\t\treturn this._placeMultiple(query, \"first\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tafter: function(/*String||Element||NodeList*/content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPlaces the content after every node in the NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe content will be cloned if the length of NodeList\r\n\t\t\t//\t\tis greater than 1. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the appended content.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").after(\"<span>after</span>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div><span>after</span>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div><span>after</span>\r\n\t\t\treturn this.addContent(content, \"after\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tinsertAfter: function(/*String*/query){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe nodes in this NodeList will be placed after the nodes\r\n\t\t\t//\t\tmatched by the query passed to insertAfter.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe nodes in this NodeList will be cloned if the query\r\n\t\t\t//\t\tmatches more than one element. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the matched nodes from the query.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<span>after</span>\r\n\t\t\t//\t|\t<p>Hello Mars</p>\r\n\t\t\t//\t|\t<p>Hello World</p>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"span\").insertAfter(\"p\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<p>Hello Mars</p><span>after</span>\r\n\t\t\t//\t|\t<p>Hello World</p><span>after</span>\r\n\t\t\treturn this._placeMultiple(query, \"after\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tbefore: function(/*String||DOMNode||NodeList*/content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPlaces the content before every node in the NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe content will be cloned if the length of NodeList\r\n\t\t\t//\t\tis greater than 1. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the appended content.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"div\").before(\"<span>before</span>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<span>before</span><div id=\"foo\"><p>Hello Mars</p></div>\r\n\t\t\t//\t|\t<span>before</span><div id=\"bar\"><p>Hello World</p></div>\r\n\t\t\treturn this.addContent(content, \"before\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tinsertBefore: function(/*String*/query){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe nodes in this NodeList will be placed after the nodes\r\n\t\t\t//\t\tmatched by the query passed to insertAfter.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe nodes in this NodeList will be cloned if the query\r\n\t\t\t//\t\tmatches more than one element. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdojo/NodeList, the nodes currently in this NodeList will be returned,\r\n\t\t\t//\t\tnot the matched nodes from the query.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<span>before</span>\r\n\t\t\t//\t|\t<p>Hello Mars</p>\r\n\t\t\t//\t|\t<p>Hello World</p>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"span\").insertBefore(\"p\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<span>before</span><p>Hello Mars</p>\r\n\t\t\t//\t|\t<span>before</span><p>Hello World</p>\r\n\t\t\treturn this._placeMultiple(query, \"before\"); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\t/*=====\r\n\t\tremove: function(simpleFilter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\talias for dojo/NodeList's orphan method. Removes elements\r\n\t\t\t//\t\tin this list that match the simple filter from their parents\r\n\t\t\t//\t\tand returns them as a new NodeList.\r\n\t\t\t// simpleFilter: String\r\n\t\t\t//\t\tsingle-expression CSS rule. For example, \".thinger\" or\r\n\t\t\t//\t\t\"#someId[attrName='value']\" but not \"div > span\". In short,\r\n\t\t\t//\t\tanything which does not invoke a descent to evaluate but\r\n\t\t\t//\t\tcan instead be used to test a single node is acceptable.\r\n\r\n\t\t\treturn; // dojo/NodeList\r\n\t\t},\r\n\t\t=====*/\r\n\t\tremove: NodeList.prototype.orphan,\r\n\r\n\t\twrap: function(/*String||DOMNode*/html){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWrap each node in the NodeList with html passed to wrap.\r\n\t\t\t// description:\r\n\t\t\t//\t\thtml will be cloned if the NodeList has more than one\r\n\t\t\t//\t\telement. Only DOM nodes are cloned, not any attached\r\n\t\t\t//\t\tevent handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe nodes in the current NodeList will be returned,\r\n\t\t\t//\t\tnot the nodes from html argument.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<b>one</b>\r\n\t\t\t//\t|\t<b>two</b>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\"b\").wrap(\"<div><span></span></div>\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div><span><b>one</b></span></div>\r\n\t\t\t//\t|\t<div><span><b>two</b></span></div>\r\n\t\t\tif(this[0]){\r\n\t\t\t\thtml = makeWrapNode(html, this[0]);\r\n\r\n\t\t\t\t//Now cycle through the elements and do the insertion.\r\n\t\t\t\tfor(var i = 0, node; node = this[i]; i++){\r\n\t\t\t\t\t//Always clone because if html is used to hold one of\r\n\t\t\t\t\t//the \"this\" nodes, then on the clone of html it will contain\r\n\t\t\t\t\t//that \"this\" node, and that would be bad.\r\n\t\t\t\t\tvar clone = this._cloneNode(html);\r\n\t\t\t\t\tif(node.parentNode){\r\n\t\t\t\t\t\tnode.parentNode.replaceChild(clone, node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Find deepest element and insert old node in it.\r\n\t\t\t\t\tvar insertion = getWrapInsertion(clone);\r\n\t\t\t\t\tinsertion.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\twrapAll: function(/*String||DOMNode*/html){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInsert html where the first node in this NodeList lives, then place all\r\n\t\t\t//\t\tnodes in this NodeList as the child of the html.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe nodes in the current NodeList will be returned,\r\n\t\t\t//\t\tnot the nodes from html argument.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".red\").wrapAll('<div class=\"allRed\"></div>');\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"allRed\">\r\n\t\t\t// \t|\t\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\tif(this[0]){\r\n\t\t\t\thtml = makeWrapNode(html, this[0]);\r\n\r\n\t\t\t\t//Place the wrap HTML in place of the first node.\r\n\t\t\t\tthis[0].parentNode.replaceChild(html, this[0]);\r\n\r\n\t\t\t\t//Now cycle through the elements and move them inside\r\n\t\t\t\t//the wrap.\r\n\t\t\t\tvar insertion = getWrapInsertion(html);\r\n\t\t\t\tfor(var i = 0, node; node = this[i]; i++){\r\n\t\t\t\t\tinsertion.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\twrapInner: function(/*String||DOMNode*/html){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFor each node in the NodeList, wrap all its children with the passed in html.\r\n\t\t\t// description:\r\n\t\t\t//\t\thtml will be cloned if the NodeList has more than one\r\n\t\t\t//\t\telement. Only DOM nodes are cloned, not any attached\r\n\t\t\t//\t\tevent handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe nodes in the current NodeList will be returned,\r\n\t\t\t//\t\tnot the nodes from html argument.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".red\").wrapInner('<span class=\"special\"></span>');\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\"><span class=\"special\">Red One</span></div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\"><span class=\"special\">Red Two</span></div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\tif(this[0]){\r\n\t\t\t\thtml = makeWrapNode(html, this[0]);\r\n\t\t\t\tfor(var i = 0; i < this.length; i++){\r\n\t\t\t\t\t//Always clone because if html is used to hold one of\r\n\t\t\t\t\t//the \"this\" nodes, then on the clone of html it will contain\r\n\t\t\t\t\t//that \"this\" node, and that would be bad.\r\n\t\t\t\t\tvar clone = this._cloneNode(html);\r\n\r\n\t\t\t\t\t//Need to convert the childNodes to an array since wrapAll modifies the\r\n\t\t\t\t\t//DOM and can change the live childNodes NodeList.\r\n\t\t\t\t\tthis._wrap(lang._toArray(this[i].childNodes), null, this._NodeListCtor).wrapAll(clone);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\treplaceWith: function(/*String||DOMNode||NodeList*/content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReplaces each node in ths NodeList with the content passed to replaceWith.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe content will be cloned if the length of NodeList\r\n\t\t\t//\t\tis greater than 1. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe nodes currently in this NodeList will be returned, not the replacing content.\r\n\t\t\t//\t\tNote that the returned nodes have been removed from the DOM.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".red\").replaceWith('<div class=\"green\">Green</div>');\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"green\">Green</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"green\">Green</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\tcontent = this._normalize(content, this[0]);\r\n\t\t\tfor(var i = 0, node; node = this[i]; i++){\r\n\t\t\t\tthis._place(content, node, \"before\", i > 0);\r\n\t\t\t\tnode.parentNode.removeChild(node);\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\treplaceAll: function(/*String*/query){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treplaces nodes matched by the query passed to replaceAll with the nodes\r\n\t\t\t//\t\tin this NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe nodes in this NodeList will be cloned if the query\r\n\t\t\t//\t\tmatches more than one element. Only the DOM nodes are cloned, not\r\n\t\t\t//\t\tany attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe nodes currently in this NodeList will be returned, not the matched nodes\r\n\t\t\t//\t\tfrom the query. The nodes currently in this NodeLIst could have\r\n\t\t\t//\t\tbeen cloned, so the returned NodeList will include the cloned nodes.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".red\").replaceAll(\".blue\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"spacer\">___</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\tvar nl = dquery(query);\r\n\t\t\tvar content = this._normalize(this, this[0]);\r\n\t\t\tfor(var i = 0, node; node = nl[i]; i++){\r\n\t\t\t\tthis._place(content, node, \"before\", i > 0);\r\n\t\t\t\tnode.parentNode.removeChild(node);\r\n\t\t\t}\r\n\t\t\treturn this; // dojo/NodeList\r\n\t\t},\r\n\r\n\t\tclone: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClones all the nodes in this NodeList and returns them as a new NodeList.\r\n\t\t\t// description:\r\n\t\t\t//\t\tOnly the DOM nodes are cloned, not any attached event handlers.\r\n\t\t\t// returns:\r\n\t\t\t//\t\ta cloned set of the original nodes.\r\n\t\t\t// example:\r\n\t\t\t//\t\tassume a DOM created by this markup:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t\tRunning this code:\r\n\t\t\t//\t|\trequire([\"dojo/query\", \"dojo/NodeList-manipulate\"\r\n\t\t\t//\t|\t], function(query){\r\n\t\t\t//\t|\t\tquery(\".red\").clone().appendTo(\".container\");\r\n\t\t\t//\t| \t});\r\n\t\t\t//\t\tResults in this DOM structure:\r\n\t\t\t//\t|\t<div class=\"container\">\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t// \t|\t\t<div class=\"blue\">Blue Two</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red One</div>\r\n\t\t\t// \t|\t\t<div class=\"red\">Red Two</div>\r\n\t\t\t//\t|\t</div>\r\n\r\n\t\t\t//TODO: need option to clone events?\r\n\t\t\tvar ary = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++){\r\n\t\t\t\tary.push(this._cloneNode(this[i]));\r\n\t\t\t}\r\n\t\t\treturn this._wrap(ary, this, this._NodeListCtor); // dojo/NodeList\r\n\t\t}\r\n\t});\r\n\r\n\t//set up html method if one does not exist\r\n\tif(!NodeList.prototype.html){\r\n\t\tNodeList.prototype.html = NodeList.prototype.innerHTML;\r\n\t}\r\n\r\n\treturn NodeList;\r\n});\r\n"]}
{"version":3,"sources":["request/handlers.js"],"names":["define","JSON","kernel","array","has","handleXML","add","ActiveXObject","global","lastParser","dp","response","result","data","text","createDocument","p","dom","async","loadXML","e","querySelectorAll","DOMParser","parseFromString","documentElement","some","handleNativeResponse","options","handleAs","Blob","xhr","type","getResponseHeader","handlers","javascript","eval","json","parse","xml","blob","arraybuffer","document","handle","handler","register","name"],"mappings":";;;;;;;AAAAA,QACC,UACA,kBACA,iBACA,SACA,kCACE,SAASC,EAAMC,EAAQC,EAAOC,GAMhC,IAAIC,EACJ,GANAD,EAAIE,IAAI,UAAoC,oBAAlBC,eAC1BH,EAAIE,IAAI,aAAc,SAASE,GAC9B,MAAO,cAAeA,IAIpBJ,EAAI,WAAW,CAEjB,IAMIK,EANAC,GACH,yBACA,yBACA,yBACA,qBAIDL,EAAY,SAASM,GACpB,IAAIC,EAASD,EAASE,KAClBC,EAAOH,EAASG,KAUpB,SAASC,EAAeC,GACtB,IACC,IAAIC,EAAM,IAAIV,cAAcS,GAC5BC,EAAIC,OAAQ,EACZD,EAAIE,QAAQL,GACZF,EAASK,EACTR,EAAaO,EACb,MAAMI,GAAI,OAAO,EAClB,OAAO,EAgBT,OAhCGR,GAAUR,EAAI,gBAAkBQ,EAAOS,kBAAoBjB,EAAI,gBAKjEQ,GAAS,IAAIU,WAAYC,gBAAgBT,EAAM,oBAc5CF,GAAWA,EAAOY,iBAQjBf,GAAeM,EAAeN,IACjCN,EAAMsB,KAAKf,EAAIK,GAIVH,GAIT,IAAIc,EAAuB,SAASf,GACnC,OAAIP,EAAI,qBAAqD,SAA9BO,EAASgB,QAAQC,UAAuC,oBAATC,KAIvElB,EAASmB,IAAInB,SAHZ,IAAIkB,MAAOlB,EAASmB,IAAInB,WAAcoB,KAAMpB,EAASmB,IAAIE,kBAAkB,mBAMhFC,GACHC,WAAc,SAASvB,GACtB,OAAOT,EAAOiC,KAAKxB,EAASG,MAAQ,KAErCsB,KAAQ,SAASzB,GAChB,OAAOV,EAAKoC,MAAM1B,EAASG,MAAQ,OAEpCwB,IAAOjC,EACPkC,KAAQb,EACRc,YAAed,EACfe,SAAYf,GAGb,SAASgB,EAAO/B,GACf,IAAIgC,EAAUV,EAAStB,EAASgB,QAAQC,UAIxC,OAFAjB,EAASE,KAAO8B,EAAUA,EAAQhC,GAAaA,EAASE,MAAQF,EAASG,KAElEH,EAOR,OAJA+B,EAAOE,SAAW,SAASC,EAAMF,GAChCV,EAASY,GAAQF,GAGXD","file":"../../request/handlers.js","sourcesContent":["define([\r\n\t'../json',\r\n\t'../_base/kernel',\r\n\t'../_base/array',\r\n\t'../has',\r\n\t'../has!dom?../selector/_loader' // only included for has() qsa tests\r\n], function(JSON, kernel, array, has){\r\n\thas.add('activex', typeof ActiveXObject !== 'undefined');\r\n\thas.add('dom-parser', function(global){\r\n\t\treturn 'DOMParser' in global;\r\n\t});\r\n\r\n\tvar handleXML;\r\n\tif(has('activex')){\r\n\t\t// GUIDs obtained from http://msdn.microsoft.com/en-us/library/ms757837(VS.85).aspx\r\n\t\tvar dp = [\r\n\t\t\t'Msxml2.DOMDocument.6.0',\r\n\t\t\t'Msxml2.DOMDocument.4.0',\r\n\t\t\t'MSXML2.DOMDocument.3.0',\r\n\t\t\t'MSXML.DOMDocument' // 2.0\r\n\t\t];\r\n\t\tvar lastParser;\r\n\r\n\t\thandleXML = function(response){\r\n\t\t\tvar result = response.data;\r\n\t\t\tvar text = response.text;\r\n\r\n\t\t\tif(result && has('dom-qsa2.1') && !result.querySelectorAll && has('dom-parser')){\r\n\t\t\t\t// http://bugs.dojotoolkit.org/ticket/15631\r\n\t\t\t\t// IE9 supports a CSS3 querySelectorAll implementation, but the DOM implementation\r\n\t\t\t\t// returned by IE9 xhr.responseXML does not. Manually create the XML DOM to gain\r\n\t\t\t\t// the fuller-featured implementation and avoid bugs caused by the inconsistency\r\n\t\t\t\tresult = new DOMParser().parseFromString(text, 'application/xml');\r\n\t\t\t}\r\n\r\n\t\t\tfunction createDocument(p) {\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tvar dom = new ActiveXObject(p);\r\n\t\t\t\t\t\tdom.async = false;\r\n\t\t\t\t\t\tdom.loadXML(text);\r\n\t\t\t\t\t\tresult = dom;\r\n\t\t\t\t\t\tlastParser = p;\r\n\t\t\t\t\t}catch(e){ return false; }\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif(!result || !result.documentElement){\r\n\t\t\t\t// The creation of an ActiveX object is expensive, so we cache the\r\n\t\t\t\t// parser type to avoid trying all parser types each time we handle a\r\n\t\t\t\t// document. There is some concern that some parser types might fail\r\n\t\t\t\t// depending on the document being parsed. If parsing using the cached\r\n\t\t\t\t// parser type fails, we do the more expensive operation of finding one\r\n\t\t\t\t// that works for the given document.\r\n\t\t\t\t// https://bugs.dojotoolkit.org/ticket/15246\r\n\t\t\t\tif(!lastParser || !createDocument(lastParser)) {\r\n\t\t\t\t\tarray.some(dp, createDocument);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t};\r\n\t}\r\n\r\n\tvar handleNativeResponse = function(response) {\r\n\t\tif(!has('native-xhr2-blob') && response.options.handleAs === 'blob' && typeof Blob !== 'undefined'){\r\n\t\t\treturn new Blob([ response.xhr.response ], { type: response.xhr.getResponseHeader('Content-Type') });\r\n\t\t}\r\n\r\n\t\treturn response.xhr.response;\r\n\t}\r\n\r\n\tvar handlers = {\r\n\t\t'javascript': function(response){\r\n\t\t\treturn kernel.eval(response.text || '');\r\n\t\t},\r\n\t\t'json': function(response){\r\n\t\t\treturn JSON.parse(response.text || null);\r\n\t\t},\r\n\t\t'xml': handleXML,\r\n\t\t'blob': handleNativeResponse,\r\n\t\t'arraybuffer': handleNativeResponse,\r\n\t\t'document': handleNativeResponse\r\n\t};\r\n\r\n\tfunction handle(response){\r\n\t\tvar handler = handlers[response.options.handleAs];\r\n\r\n\t\tresponse.data = handler ? handler(response) : (response.data || response.text);\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\thandle.register = function(name, handler){\r\n\t\thandlers[name] = handler;\r\n\t};\r\n\r\n\treturn handle;\r\n});\r\n"]}
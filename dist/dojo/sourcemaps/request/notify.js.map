{"version":3,"sources":["request/notify.js"],"names":["define","Evented","lang","util","pubCount","slice","hub","mixin","onsend","data","this","emit","_onload","_onerror","_ondone","type","event","result","prototype","apply","arguments","call","notify","listener","on","cancel"],"mappings":";;;;;;;AAAAA,QAAQ,aAAc,gBAAiB,UAAW,SAASC,EAASC,EAAMC,GAkBzE,IAAIC,EAAW,EACdC,KAAWA,MAERC,EAAMJ,EAAKK,MAAM,IAAIN,GACxBO,OAAQ,SAASC,GACZL,GACHM,KAAKC,KAAK,SAEXP,KAEDQ,QAAS,SAASH,GACjBC,KAAKC,KAAK,OAAQF,IAEnBI,SAAU,SAASJ,GAClBC,KAAKC,KAAK,OAAQF,IAEnBK,QAAS,SAASL,KACZL,GAAY,IAChBA,EAAW,EACXM,KAAKC,KAAK,UAGZA,KAAM,SAASI,EAAMC,GACpB,IAAIC,EAAShB,EAAQiB,UAAUP,KAAKQ,MAAMT,KAAMU,WAMhD,OAHGV,KAAK,MAAQK,IACfL,KAAK,MAAQK,GAAMI,MAAMT,KAAML,EAAMgB,KAAKD,UAAW,IAE/CH,KAIT,SAASK,EAAOP,EAAMQ,GAarB,OAAOjB,EAAIkB,GAAGT,EAAMQ,GAQrB,OANAD,EAAOX,KAAO,SAASI,EAAMC,EAAOS,GACnC,OAAOnB,EAAIK,KAAKI,EAAMC,EAAOS,IAKvBtB,EAAKmB,OAASA","file":"../../request/notify.js","sourcesContent":["define(['../Evented', '../_base/lang', './util'], function(Evented, lang, util){\r\n\t// module:\r\n\t//\t\tdojo/request/notify\r\n\t// summary:\r\n\t//\t\tGlobal notification API for dojo/request. Notifications will\r\n\t//\t\tonly be emitted if this module is required.\r\n\t//\r\n\t//\t\t| require('dojo/request', 'dojo/request/notify',\r\n\t//\t\t|     function(request, notify){\r\n\t//\t\t|         notify('load', function(response){\r\n\t//\t\t|             if(response.url === 'someUrl.html'){\r\n\t//\t\t|                 console.log('Loaded!');\r\n\t//\t\t|             }\r\n\t//\t\t|         });\r\n\t//\t\t|         request.get('someUrl.html');\r\n\t//\t\t|     }\r\n\t//\t\t| );\r\n\r\n\tvar pubCount = 0,\r\n\t\tslice = [].slice;\r\n\r\n\tvar hub = lang.mixin(new Evented, {\r\n\t\tonsend: function(data){\r\n\t\t\tif(!pubCount){\r\n\t\t\t\tthis.emit('start');\r\n\t\t\t}\r\n\t\t\tpubCount++;\r\n\t\t},\r\n\t\t_onload: function(data){\r\n\t\t\tthis.emit('done', data);\r\n\t\t},\r\n\t\t_onerror: function(data){\r\n\t\t\tthis.emit('done', data);\r\n\t\t},\r\n\t\t_ondone: function(data){\r\n\t\t\tif(--pubCount <= 0){\r\n\t\t\t\tpubCount = 0;\r\n\t\t\t\tthis.emit('stop');\r\n\t\t\t}\r\n\t\t},\r\n\t\temit: function(type, event){\r\n\t\t\tvar result = Evented.prototype.emit.apply(this, arguments);\r\n\r\n\t\t\t// After all event handlers have run, run _on* handler\r\n\t\t\tif(this['_on' + type]){\r\n\t\t\t\tthis['_on' + type].apply(this, slice.call(arguments, 1));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t});\r\n\r\n\tfunction notify(type, listener){\r\n\t\t// summary:\r\n\t\t//\t\tRegister a listener to be notified when an event\r\n\t\t//\t\tin dojo/request happens.\r\n\t\t// type: String?\r\n\t\t//\t\tThe event to listen for. Events emitted: \"start\", \"send\",\r\n\t\t//\t\t\"load\", \"error\", \"done\", \"stop\".\r\n\t\t// listener: Function?\r\n\t\t//\t\tA callback to be run when an event happens.\r\n\t\t// returns:\r\n\t\t//\t\tA signal object that can be used to cancel the listener.\r\n\t\t//\t\tIf remove() is called on this signal object, it will\r\n\t\t//\t\tstop the listener from being executed.\r\n\t\treturn hub.on(type, listener);\r\n\t}\r\n\tnotify.emit = function(type, event, cancel){\r\n\t\treturn hub.emit(type, event, cancel);\r\n\t};\r\n\r\n\t// Attach notify to dojo/request/util to avoid\r\n\t// try{ require('./notify'); }catch(e){}\r\n\treturn util.notify = notify;\r\n});\r\n"]}
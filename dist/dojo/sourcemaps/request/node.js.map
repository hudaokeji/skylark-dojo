{"version":3,"sources":["request/node.js"],"names":["define","require","util","handlers","RequestTimeoutError","http","https","URL","stream","Stream","defaultOptions","method","query","data","undefined","headers","node","url","options","response","parseArgs","deepCreate","def","deferred","dfd","clientRequest","abort","parse","reqOptions","requestOptions","hostname","port","socketPath","agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","path","user","password","auth","req","protocol","request","socketOptions","setTimeout","timeout","setNoDelay","noDelay","initialDelay","keepAlive","setKeepAlive","on","hasSocket","progress","clientResponse","status","statusCode","getHeader","headerName","toLowerCase","body","chunk","push","clearTimeout","text","join","resolve","error","reject","end","pipe","cancel","promise","addCommonMethods"],"mappings":";;;;;;;AAAAA,QACG,UACA,SACA,aACA,gCACA,eACA,gBACA,cACA,kBAGA,SAASC,QAASC,EAAMC,EAAUC,EAAqBC,EAAMC,EAAOC,EAAKC,GAC3E,IAAIC,EAASD,EAAOC,OAGhBC,GACHC,OAAQ,MACRC,MAAO,KACPC,UALAC,EAMAC,YAED,SAASC,EAAKC,EAAKC,GAClB,IAAIC,EAAWjB,EAAKkB,UAAUH,EAAKf,EAAKmB,WAAWX,EAAgBQ,GAAUA,GAAWA,EAAQL,gBAAgBJ,GAChHQ,EAAME,EAASF,IACfC,EAAUC,EAASD,QAEnB,IAAII,EAAMpB,EAAKqB,SACdJ,EACA,SAASK,EAAKL,GACbA,EAASM,cAAcC,UAIzBT,EAAMV,EAAIoB,MAAMV,GAEhB,IAAIW,EAAaT,EAASU,gBACzBC,SAAUb,EAAIa,SACdC,KAAMd,EAAIc,KACVC,WAAYd,EAAQc,WACpBrB,OAAQO,EAAQP,OAChBI,QAASG,EAAQH,QACjBkB,MAAOf,EAAQe,MACfC,IAAKhB,EAAQgB,IACbC,IAAKjB,EAAQiB,IACbC,WAAYlB,EAAQkB,WACpBC,KAAMnB,EAAQmB,KACdC,GAAIpB,EAAQoB,GACZC,QAASrB,EAAQqB,QACjBC,oBAAmD,IAA/BtB,EAAQsB,oBAE1BvB,EAAIwB,OACNb,EAAWa,KAAOxB,EAAIwB,OAEpBvB,EAAQwB,MAAQxB,EAAQyB,YAC1Bf,EAAWgB,MAAQ1B,EAAQwB,MAAM,IAAM,KAAOxB,EAAQyB,UAAU,KAEjE,IAAIE,EAAM1B,EAASM,eAAkC,WAAjBR,EAAI6B,SAAwBxC,EAAQD,GAAM0C,QAAQnB,GAEtF,GAAGV,EAAQ8B,gBACP,YAAa9B,EAAQ8B,eACvBH,EAAII,WAAW/B,EAAQ8B,cAAcE,SAEnC,YAAahC,EAAQ8B,eACvBH,EAAIM,WAAWjC,EAAQ8B,cAAcI,SAEnC,cAAelC,EAAQ8B,eAAc,CACvC,IAAIK,EAAenC,EAAQ8B,cAAcM,UACzCT,EAAIU,aAAaF,GAAgB,EAAGA,GAAgB,GAgDtD,GA5CAR,EAAIW,GAAG,SAAU,WAChBrC,EAASsC,WAAY,EACrBnC,EAAIoC,SAASvC,KAGd0B,EAAIW,GAAG,WAAY,SAASG,GAC3BxC,EAASwC,eAAiBA,EAC1BxC,EAASyC,OAASD,EAAeE,WACjC1C,EAAS2C,UAAY,SAASC,GAC7B,OAAOJ,EAAe5C,QAAQgD,EAAWC,gBAAkB,MAG5D,IAAIC,KACJN,EAAeH,GAAG,OAAQ,SAASU,GAClCD,EAAKE,KAAKD,KAIXP,EAAeH,GAAG,MAAO,WACrBN,GACFkB,aAAalB,GAEd/B,EAASkD,KAAOJ,EAAKK,KAAK,IAC1B,IACCnE,EAASgB,GACTG,EAAIiD,QAAQpD,GACZ,MAAMqD,GACNlD,EAAImD,OAAOD,QAKd3B,EAAIW,GAAG,QAASlC,EAAImD,QAEjBvD,EAAQL,KACiB,iBAAjBK,EAAQL,KACjBgC,EAAI6B,IAAIxD,EAAQL,MAEhBK,EAAQL,KAAK8D,KAAK9B,GAGnBA,EAAI6B,MAGFxD,EAAQgC,QACV,IAAIA,EAAUD,WAAW,WACxB3B,EAAIsD,OAAO,IAAIxE,EAAoBe,KACjCD,EAAQgC,SAGZ,OAAO5B,EAAIuD,QAwEZ,OAFA3E,EAAK4E,iBAAiB9D,GAEfA","file":"../../request/node.js","sourcesContent":["define([\r\n   'require',\r\n   './util',\r\n   './handlers',\r\n   '../errors/RequestTimeoutError',\r\n   '../node!http',\r\n   '../node!https',\r\n   '../node!url',\r\n   '../node!stream'/*=====,\r\n\t'../request',\r\n\t'../_base/declare' =====*/\r\n], function(require, util, handlers, RequestTimeoutError, http, https, URL, stream/*=====, request, declare =====*/){\r\n\tvar Stream = stream.Stream,\r\n\t\tundefined;\r\n\r\n\tvar defaultOptions = {\r\n\t\tmethod: 'GET',\r\n\t\tquery: null,\r\n\t\tdata: undefined,\r\n\t\theaders: {}\r\n\t};\r\n\tfunction node(url, options){\r\n\t\tvar response = util.parseArgs(url, util.deepCreate(defaultOptions, options), options && options.data instanceof Stream);\r\n\t\turl = response.url;\r\n\t\toptions = response.options;\r\n\r\n\t\tvar def = util.deferred(\r\n\t\t\tresponse,\r\n\t\t\tfunction(dfd, response){\r\n\t\t\t\tresponse.clientRequest.abort();\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\turl = URL.parse(url);\r\n\r\n\t\tvar reqOptions = response.requestOptions = {\r\n\t\t\thostname: url.hostname,\r\n\t\t\tport: url.port,\r\n\t\t\tsocketPath: options.socketPath,\r\n\t\t\tmethod: options.method,\r\n\t\t\theaders: options.headers,\r\n\t\t\tagent: options.agent,\r\n\t\t\tpfx: options.pfx,\r\n\t\t\tkey: options.key,\r\n\t\t\tpassphrase: options.passphrase,\r\n\t\t\tcert: options.cert,\r\n\t\t\tca: options.ca,\r\n\t\t\tciphers: options.ciphers,\r\n\t\t\trejectUnauthorized: options.rejectUnauthorized === false ? false : true\r\n\t\t};\r\n\t\tif(url.path){\r\n\t\t\treqOptions.path = url.path;\r\n\t\t}\r\n\t\tif(options.user || options.password){\r\n\t\t\treqOptions.auth = (options.user||'') + ':' + (options.password||'');\r\n\t\t}\r\n\t\tvar req = response.clientRequest = (url.protocol === 'https:' ? https : http).request(reqOptions);\r\n\r\n\t\tif(options.socketOptions){\r\n\t\t\tif('timeout' in options.socketOptions){\r\n\t\t\t\treq.setTimeout(options.socketOptions.timeout);\r\n\t\t\t}\r\n\t\t\tif('noDelay' in options.socketOptions){\r\n\t\t\t\treq.setNoDelay(options.socketOptions.noDelay);\r\n\t\t\t}\r\n\t\t\tif('keepAlive' in options.socketOptions){\r\n\t\t\t\tvar initialDelay = options.socketOptions.keepAlive;\r\n\t\t\t\treq.setKeepAlive(initialDelay >= 0, initialDelay || 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treq.on('socket', function(){\r\n\t\t\tresponse.hasSocket = true;\r\n\t\t\tdef.progress(response);\r\n\t\t});\r\n\r\n\t\treq.on('response', function(clientResponse){\r\n\t\t\tresponse.clientResponse = clientResponse;\r\n\t\t\tresponse.status = clientResponse.statusCode;\r\n\t\t\tresponse.getHeader = function(headerName){\r\n\t\t\t\treturn clientResponse.headers[headerName.toLowerCase()] || null;\r\n\t\t\t};\r\n\r\n\t\t\tvar body = [];\r\n\t\t\tclientResponse.on('data', function(chunk){\r\n\t\t\t\tbody.push(chunk);\r\n\r\n\t\t\t\t// TODO: progress updates via the deferred\r\n\t\t\t});\r\n\t\t\tclientResponse.on('end', function(){\r\n\t\t\t\tif(timeout){\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t}\r\n\t\t\t\tresponse.text = body.join('');\r\n\t\t\t\ttry{\r\n\t\t\t\t\thandlers(response);\r\n\t\t\t\t\tdef.resolve(response);\r\n\t\t\t\t}catch(error){\r\n\t\t\t\t\tdef.reject(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treq.on('error', def.reject);\r\n\r\n\t\tif(options.data){\r\n\t\t\tif(typeof options.data === 'string'){\r\n\t\t\t\treq.end(options.data);\r\n\t\t\t}else{\r\n\t\t\t\toptions.data.pipe(req);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\treq.end();\r\n\t\t}\r\n\r\n\t\tif(options.timeout){\r\n\t\t\tvar timeout = setTimeout(function(){\r\n\t\t\t\tdef.cancel(new RequestTimeoutError(response));\r\n\t\t\t}, options.timeout);\r\n\t\t}\r\n\r\n\t\treturn def.promise;\r\n\t}\r\n\r\n\t/*=====\r\n\tnode = function(url, options){\r\n\t\t// summary:\r\n\t\t//\t\tSends a request using the included http or https interface from node.js\r\n\t\t//\t\twith the given URL and options.\r\n\t\t// url: String\r\n\t\t//\t\tURL to request\r\n\t\t// options: dojo/request/node.__Options?\r\n\t\t//\t\tOptions for the request.\r\n\t\t// returns: dojo/request.__Promise\r\n\t};\r\n\tnode.__BaseOptions = declare(request.__BaseOptions, {\r\n\t\t// data: String|Object|Stream?\r\n\t\t//\t\tData to transfer. This is ignored for GET and DELETE\r\n\t\t//\t\trequests.\r\n\t\t// headers: Object?\r\n\t\t//\t\tHeaders to use for the request.\r\n\t\t// user: String?\r\n\t\t//\t\tUsername to use during the request.\r\n\t\t// password: String?\r\n\t\t//\t\tPassword to use during the request.\r\n\t});\r\n\tnode.__MethodOptions = declare(null, {\r\n\t\t// method: String?\r\n\t\t//\t\tThe HTTP method to use to make the request. Must be\r\n\t\t//\t\tuppercase. Default is `\"GET\"`.\r\n\t});\r\n\tnode.__Options = declare([node.__BaseOptions, node.__MethodOptions]);\r\n\r\n\tnode.get = function(url, options){\r\n\t\t// summary:\r\n\t\t//\t\tSend an HTTP GET request using XMLHttpRequest with the given URL and options.\r\n\t\t// url: String\r\n\t\t//\t\tURL to request\r\n\t\t// options: dojo/request/node.__BaseOptions?\r\n\t\t//\t\tOptions for the request.\r\n\t\t// returns: dojo/request.__Promise\r\n\t};\r\n\tnode.post = function(url, options){\r\n\t\t// summary:\r\n\t\t//\t\tSend an HTTP POST request using XMLHttpRequest with the given URL and options.\r\n\t\t// url: String\r\n\t\t//\t\tURL to request\r\n\t\t// options: dojo/request/node.__BaseOptions?\r\n\t\t//\t\tOptions for the request.\r\n\t\t// returns: dojo/request.__Promise\r\n\t};\r\n\tnode.put = function(url, options){\r\n\t\t// summary:\r\n\t\t//\t\tSend an HTTP PUT request using XMLHttpRequest with the given URL and options.\r\n\t\t// url: String\r\n\t\t//\t\tURL to request\r\n\t\t// options: dojo/request/node.__BaseOptions?\r\n\t\t//\t\tOptions for the request.\r\n\t\t// returns: dojo/request.__Promise\r\n\t};\r\n\tnode.del = function(url, options){\r\n\t\t// summary:\r\n\t\t//\t\tSend an HTTP DELETE request using XMLHttpRequest with the given URL and options.\r\n\t\t// url: String\r\n\t\t//\t\tURL to request\r\n\t\t// options: dojo/request/node.__BaseOptions?\r\n\t\t//\t\tOptions for the request.\r\n\t\t// returns: dojo/request.__Promise\r\n\t};\r\n\t=====*/\r\n\r\n\tutil.addCommonMethods(node);\r\n\r\n\treturn node;\r\n});\r\n"]}
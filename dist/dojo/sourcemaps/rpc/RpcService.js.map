{"version":3,"sources":["rpc/RpcService.js"],"names":["define","array","declare","Deferred","kernel","lang","_Url","xhr","constructor","args","isString","url","def","get","handleAs","sync","addCallback","this","addErrback","Error","smdStr","processSmd","eval","serviceUrl","timeout","strictArgChecks","parseResults","obj","errorCallback","deferredRequestHandler","data","errback","message","resultCallback","hitch","err","error","code","id","errorObject","callback","generateMethod","method","parameters","arguments","length","bind","_toArray","object","methods","forEach","m","name","serviceURL","isFunction","required","smd"],"mappings":";;;;;;;AAAAA,QACC,iBAAkB,mBAAoB,oBAAqB,kBAAkB,gBAC7E,eAAgB,gBACd,SAASC,EAAOC,EAASC,EAAUC,EAAQC,EAAMC,EAAMC,GAK1D,OAAOL,EAAQ,sBAAuB,MAIrCM,YAAa,SAASC,GAgBrB,GAAGA,EAEF,GAAKJ,EAAKK,SAASD,IAAWA,aAAgBH,EAAM,CACnD,GAAIG,aAAgBH,EACnB,IAAIK,EAAMF,EAAO,QAEjBE,EAAMF,EAEP,IAAIG,EAAML,EAAIM,KACbF,IAAKA,EACLG,SAAU,wBACVC,MAAM,IAGPH,EAAII,YAAYC,KAAM,cACtBL,EAAIM,WAAW,WACd,MAAM,IAAIC,MAAM,2BAA6BV,UAGtCA,EAAKW,OACbH,KAAKI,WAAWjB,EAAOkB,KAAK,IAAIb,EAAKW,OAAO,OASzCX,EAAKc,aACPN,KAAKM,WAAad,EAAKc,YAGxBN,KAAKO,QAAUf,EAAKe,SAAW,EAE5B,oBAAqBf,IACvBQ,KAAKQ,gBAAkBhB,EAAKgB,iBAG7BR,KAAKI,WAAWZ,KAKnBgB,iBAAiB,EACjBF,WAAY,GAEZG,aAAc,SAASC,GAOtB,OAAOA,GAGRC,cAAe,SAAmCC,GAKjD,OAAO,SAASC,GACfD,EAAuBE,QAAQD,EAAKE,WAItCC,eAAgB,SAAmCJ,GAMlD,OAAOxB,EAAK6B,MAAMjB,KACjB,SAASU,GAEP,IAAIQ,EADS,MAAXR,EAAIS,OAEiB,iBAAbT,EAAIS,QACbD,EAAM,IAAIhB,MAAMQ,EAAIS,MAAMJ,UACtBK,KAAOV,EAAIS,MAAMC,KACrBF,EAAIC,MAAQT,EAAIS,MAAMA,OAEtBD,EAAM,IAAIhB,MAAMQ,EAAIS,OAErBD,EAAIG,GAAKX,EAAIW,GACbH,EAAII,YAAcZ,EAClBE,EAAuBE,QAAQI,IAE/BN,EAAuBW,SAASvB,KAAKS,aAAaC,OAMtDc,eAAgB,SAAoBC,EAAkBC,EAAuBhC,GAU5E,OAAON,EAAK6B,MAAMjB,KAAM,WACvB,IAAIY,EAAyB,IAAI1B,EAGjC,GAAKc,KAAoB,iBACT,MAAd0B,GACAC,UAAUC,QAAUF,EAAWE,OAGhC,MAAM,IAAI1B,MAAM,mDAKjB,OAHCF,KAAK6B,KAAKJ,EAAQrC,EAAK0C,SAASH,WAAYf,EAAwBlB,GAG9DkB,KAITR,WAAY,SAAS2B,GAOjBA,EAAOC,SACThD,EAAMiD,QAAQF,EAAOC,QAAS,SAASE,GACtC,GAAGA,GAAKA,EAAEC,OACTnC,KAAKkC,EAAEC,MAAQnC,KAAKwB,eAAgBU,EAAEC,KACjCD,EAAER,WACFQ,EAAExC,KAAKwC,EAAE5B,YAAY4B,EAAEE,aACxBhD,EAAKiD,WAAWrC,KAAKkC,EAAEC,QAC1B,MAAM,IAAIjC,MAAM,+BAAiCgC,EAAEC,KAAO,OAI1DnC,MAGJA,KAAKM,WAAayB,EAAOzB,YAAYyB,EAAOK,WAC5CpC,KAAKsC,SAAWP,EAAOO,SACvBtC,KAAKuC,IAAMR","file":"../../rpc/RpcService.js","sourcesContent":["define([\r\n\t\"../_base/array\", \"../_base/declare\", \"../_base/Deferred\", \"../_base/kernel\",\"../_base/lang\",\r\n\t\"../_base/url\", \"../_base/xhr\"\r\n], function(array, declare, Deferred, kernel, lang, _Url, xhr){\r\n\r\n// module:\r\n//\t\tdojo/rpc/RpcService\r\n\r\nreturn declare(\"dojo.rpc.RpcService\", null, {\r\n\t// summary:\r\n\t//\t\tTODOC\r\n\r\n\tconstructor: function(args){\r\n\t\t// summary:\r\n\t\t//\t\tTake a string as a url to retrieve an smd or an object that is an smd or partial smd to use\r\n\t\t//\t\tas a definition for the service\r\n\t\t//\r\n\t\t// args: object\r\n\t\t//\t\tTakes a number of properties as kwArgs for defining the service.  It also\r\n\t\t//\t\taccepts a string.  When passed a string, it is treated as a url from\r\n\t\t//\t\twhich it should synchronously retrieve an smd file.  Otherwise it is a kwArgs\r\n\t\t//\t\tobject.  It accepts serviceUrl, to manually define a url for the rpc service\r\n\t\t//\t\tallowing the rpc system to be used without an smd definition. strictArgChecks\r\n\t\t//\t\tforces the system to verify that the # of arguments provided in a call\r\n\t\t//\t\tmatches those defined in the smd.  smdString allows a developer to pass\r\n\t\t//\t\ta jsonString directly, which will be converted into an object or alternatively\r\n\t\t//\t\tsmdObject is accepts an smdObject directly.\r\n\t\t//\r\n\t\tif(args){\r\n\t\t\t//if the arg is a string, we assume it is a url to retrieve an smd definition from\r\n\t\t\tif( (lang.isString(args)) || (args instanceof _Url)){\r\n\t\t\t\tif (args instanceof _Url){\r\n\t\t\t\t\tvar url = args + \"\";\r\n\t\t\t\t}else{\r\n\t\t\t\t\turl = args;\r\n\t\t\t\t}\r\n\t\t\t\tvar def = xhr.get({\r\n\t\t\t\t\turl: url,\r\n\t\t\t\t\thandleAs: \"json-comment-optional\",\r\n\t\t\t\t\tsync: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdef.addCallback(this, \"processSmd\");\r\n\t\t\t\tdef.addErrback(function(){\r\n\t\t\t\t\tthrow new Error(\"Unable to load SMD from \" + args);\r\n\t\t\t\t});\r\n\r\n\t\t\t}else if(args.smdStr){\r\n\t\t\t\tthis.processSmd(kernel.eval(\"(\"+args.smdStr+\")\"));\r\n\t\t\t}else{\r\n\t\t\t\t// otherwise we assume it's an arguments object with the following\r\n\t\t\t\t// (optional) properties:\r\n\t\t\t\t//\t\t- serviceUrl\r\n\t\t\t\t//\t\t- strictArgChecks\r\n\t\t\t\t//\t\t- smdStr\r\n\t\t\t\t//\t\t- smdObj\r\n\r\n\t\t\t\tif(args.serviceUrl){\r\n\t\t\t\t\tthis.serviceUrl = args.serviceUrl;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.timeout = args.timeout || 0;\r\n\r\n\t\t\t\tif(\"strictArgChecks\" in args){\r\n\t\t\t\t\tthis.strictArgChecks = args.strictArgChecks;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.processSmd(args);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tstrictArgChecks: true,\r\n\tserviceUrl: \"\",\r\n\r\n\tparseResults: function(obj){\r\n\t\t// summary:\r\n\t\t//\t\tparse the results coming back from an rpc request.  this\r\n\t\t//\t\tbase implementation, just returns the full object\r\n\t\t//\t\tsubclasses should parse and only return the actual results\r\n\t\t// obj: Object\r\n\t\t//\t\tObject that is the return results from an rpc request\r\n\t\treturn obj;\r\n\t},\r\n\r\n\terrorCallback: function(/* dojo/_base/Deferred */ deferredRequestHandler){\r\n\t\t// summary:\r\n\t\t//\t\tcreate callback that calls the Deferred errback method\r\n\t\t// deferredRequestHandler: Deferred\r\n\t\t//\t\tThe deferred object handling a request.\r\n\t\treturn function(data){\r\n\t\t\tdeferredRequestHandler.errback(data.message);\r\n\t\t};\r\n\t},\r\n\r\n\tresultCallback: function(/* dojo/_base/Deferred */ deferredRequestHandler){\r\n\t\t// summary:\r\n\t\t//\t\tcreate callback that calls the Deferred's callback method\r\n\t\t// deferredRequestHandler: Deferred\r\n\t\t//\t\tThe deferred object handling a request.\r\n\r\n\t\treturn lang.hitch(this,\r\n\t\t\tfunction(obj){\r\n\t\t\t\tif(obj.error!=null){\r\n\t\t\t\t\tvar err;\r\n\t\t\t\t\tif(typeof obj.error == 'object'){\r\n\t\t\t\t\t\terr = new Error(obj.error.message);\r\n\t\t\t\t\t\terr.code = obj.error.code;\r\n\t\t\t\t\t\terr.error = obj.error.error;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\terr = new Error(obj.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\terr.id = obj.id;\r\n\t\t\t\t\terr.errorObject = obj;\r\n\t\t\t\t\tdeferredRequestHandler.errback(err);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdeferredRequestHandler.callback(this.parseResults(obj));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t},\r\n\r\n\tgenerateMethod: function(/*string*/ method, /*array*/ parameters, /*string*/ url){\r\n\t\t// summary:\r\n\t\t//\t\tgenerate the local bind methods for the remote object\r\n\t\t// method: string\r\n\t\t//\t\tThe name of the method we are generating\r\n\t\t// parameters: array\r\n\t\t//\t\tthe array of parameters for this call.\r\n\t\t// url: string\r\n\t\t//\t\tthe service url for this call\r\n\r\n\t\treturn lang.hitch(this, function(){\r\n\t\t\tvar deferredRequestHandler = new Deferred();\r\n\r\n\t\t\t// if params weren't specified, then we can assume it's varargs\r\n\t\t\tif( (this.strictArgChecks) &&\r\n\t\t\t\t(parameters != null) &&\r\n\t\t\t\t(arguments.length != parameters.length)\r\n\t\t\t){\r\n\t\t\t\t// put error stuff here, no enough params\r\n\t\t\t\tthrow new Error(\"Invalid number of parameters for remote method.\");\r\n\t\t\t}else{\r\n\t\t\t\tthis.bind(method, lang._toArray(arguments), deferredRequestHandler, url);\r\n\t\t\t}\r\n\r\n\t\t\treturn deferredRequestHandler;\r\n\t\t});\r\n\t},\r\n\r\n\tprocessSmd: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tcallback method for receipt of a smd object.  Parse the smd\r\n\t\t//\t\tand generate functions based on the description\r\n\t\t// object:\r\n\t\t//\t\tsmd object defining this service.\r\n\r\n\t\tif(object.methods){\r\n\t\t\tarray.forEach(object.methods, function(m){\r\n\t\t\t\tif(m && m.name){\r\n\t\t\t\t\tthis[m.name] = this.generateMethod(\tm.name,\r\n\t\t\t\t\t\t\t\t\t\tm.parameters,\r\n\t\t\t\t\t\t\t\t\t\tm.url||m.serviceUrl||m.serviceURL);\r\n\t\t\t\t\tif(!lang.isFunction(this[m.name])){\r\n\t\t\t\t\t\tthrow new Error(\"RpcService: Failed to create\" + m.name + \"()\");\r\n\t\t\t\t\t\t/*console.log(\"RpcService: Failed to create\", m.name, \"()\");*/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t\tthis.serviceUrl = object.serviceUrl||object.serviceURL;\r\n\t\tthis.required = object.required;\r\n\t\tthis.smd = object;\r\n\t}\r\n});\r\n\r\n});\r\n"]}
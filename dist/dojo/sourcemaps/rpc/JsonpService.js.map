{"version":3,"sources":["rpc/JsonpService.js"],"names":["define","array","declare","lang","RpcService","script","constructor","args","requiredArgs","this","required","mixin","forEach","req","undefined","Error","strictArgChecks","bind","method","parameters","deferredRequestHandler","url","get","serviceUrl","callbackParamName","content","createRequest","timeout","handleAs","preventCache","addCallbacks","resultCallback","errorCallback","params","isArrayLike","length"],"mappings":";;;;;;;AAAAA,QACC,iBAAkB,mBAAoB,gBAAiB,eAAgB,gBACvE,SAASC,EAAOC,EAASC,EAAMC,EAAYC,GAK5C,OAAOH,EAAQ,wBAAyBE,GAMvCE,YAAa,SAASC,EAAMC,GACxBC,KAAKC,WACJF,GACFL,EAAKQ,MAAMF,KAAKC,SAAUF,GAG3BP,EAAMW,QAAQH,KAAKC,SAAU,SAASG,GACrC,GAAQ,IAALA,QAAgBC,GAALD,EACb,MAAM,IAAIE,MAAM,wCAAwCF,OAM5DG,iBAAiB,EAEjBC,KAAM,SAASC,EAAQC,EAAYC,EAAwBC,GAYhDhB,EAAOiB,KAChBD,IAAKA,GAAKZ,KAAKc,WACfC,kBAAmBf,KAAKe,mBAAmB,WAC3CC,QAAShB,KAAKiB,cAAcP,GAC5BQ,QAASlB,KAAKkB,QACdC,SAAU,OACVC,cAAc,IAEXC,aAAarB,KAAKsB,eAAeX,GAAyBX,KAAKuB,cAAcZ,KAGlFM,cAAe,SAASP,GAMvB,IAAIc,EAAU9B,EAAK+B,YAAYf,IAAkC,GAAnBA,EAAWgB,OACvDhB,EAAW,MAEb,OADAhB,EAAKQ,MAAMsB,EAAOxB,KAAKC,UAChBuB","file":"../../rpc/JsonpService.js","sourcesContent":["define([\r\n\t\"../_base/array\", \"../_base/declare\", \"../_base/lang\", \"./RpcService\", \"../io/script\"],\r\n\tfunction(array, declare, lang, RpcService, script){\r\n\r\n// module:\r\n//\t\tdojo/rpc/JsonpService\r\n\r\nreturn declare(\"dojo.rpc.JsonpService\", RpcService, {\r\n\t// summary:\r\n\t//\t\tGeneric JSONP service.  Minimally extends RpcService to allow\r\n\t//\t\teasy definition of nearly any JSONP style service. Example\r\n\t//\t\tSMD files exist in dojox.data\r\n\r\n\tconstructor: function(args, requiredArgs){\r\n\t\tif(this.required){\r\n\t\t\tif(requiredArgs){\r\n\t\t\t\tlang.mixin(this.required, requiredArgs);\r\n\t\t\t}\r\n\r\n\t\t\tarray.forEach(this.required, function(req){\r\n\t\t\t\tif(req==\"\" || req==undefined){\r\n\t\t\t\t\tthrow new Error(\"Required Service Argument not found: \"+req);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tstrictArgChecks: false,\r\n\r\n\tbind: function(method, parameters, deferredRequestHandler, url){\r\n\t\t// summary:\r\n\t\t//\t\tJSONP bind method. Takes remote method, parameters,\r\n\t\t//\t\tdeferred, and a url, calls createRequest to make a JSON-RPC\r\n\t\t//\t\tenvelope and passes that off with bind.\r\n\t\t// method: string\r\n\t\t//\t\tThe name of the method we are calling\r\n\t\t// parameters: array\r\n\t\t//\t\tThe parameters we are passing off to the method\r\n\t\t// deferredRequestHandler: deferred\r\n\t\t//\t\tThe Deferred object for this particular request\r\n\r\n\t\tvar def = script.get({\r\n\t\t\turl: url||this.serviceUrl,\r\n\t\t\tcallbackParamName: this.callbackParamName||\"callback\",\r\n\t\t\tcontent: this.createRequest(parameters),\r\n\t\t\ttimeout: this.timeout,\r\n\t\t\thandleAs: \"json\",\r\n\t\t\tpreventCache: true\r\n\t\t});\r\n\t\tdef.addCallbacks(this.resultCallback(deferredRequestHandler), this.errorCallback(deferredRequestHandler));\r\n\t},\r\n\r\n\tcreateRequest: function(parameters){\r\n\t\t// summary:\r\n\t\t//\t\tcreate a JSONP req\r\n\t\t// params: array\r\n\t\t//\t\tThe array of parameters for this request;\r\n\r\n\t\tvar params = (lang.isArrayLike(parameters) && parameters.length==1) ?\r\n\t\t\t\tparameters[0] : {};\r\n\t\tlang.mixin(params,this.required);\r\n\t\treturn params;\r\n\t}\r\n});\r\n\r\n});\r\n"]}
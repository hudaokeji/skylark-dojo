{"version":3,"sources":["data/ObjectStore.js"],"names":["define","lang","Evented","declare","Deferred","array","connect","regexp","convertRegex","character","objectStore","constructor","options","this","_dirtyObjects","labelAttribute","labelProperty","mixin","getValue","item","property","defaultValue","get","getValues","val","Array","undefined","getAttributes","res","i","hasOwnProperty","charAt","push","hasAttribute","attribute","containsValue","value","indexOf","isItem","Date","isItemLoaded","load","loadItem","args","when","result","func","Error","onError","onItem","call","scope","close","request","abort","fetch","self","delegate","queryOptions","query","required","RegExp","escapeString","replace","ignoreCase","toString","original","results","errorHandler","error","total","totalCount","onBegin","length","onComplete","cancel","observe","observing","object","removedFrom","insertedInto","onNew","onDelete","idProperty","onSet","onFetch","store","getFeatures","dojo.data.api.Read","dojo.data.api.Identity","dojo.data.api.Write","put","dojo.data.api.Notification","getLabel","getLabelAttributes","getIdentity","getIdentityAttributes","fetchItemByIdentity","identity","newItem","data","parentInfo","values","parent","concat","__parent","setValue","save","deleteItem","changing","old","setValues","isArray","unsetAttribute","_deleting","__isDirty","dirty","_saveNotNeeded","kwArgs","actions","savingObjects","dirtyObjects","left","revertOnError","postCommitDirtyObjects","revert","transaction","overwrite","remove","splice","commit","e","j","isDirty"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAiB,aAAc,mBAAoB,oBAAqB,iBAC/E,mBAAoB,aAClB,SAASC,EAAMC,EAASC,EAASC,EAAUC,EAAOC,EAASC,GAK9D,SAASC,EAAaC,GACrB,MAAoB,KAAbA,EAAmB,KAAoB,KAAbA,EAAmB,IAAMA,EAE3D,OAAON,EAAQ,yBAA0BD,IAKvCQ,YAAa,KACbC,YAAa,SAASC,GAQrBC,KAAKC,iBACFF,EAAQG,iBAEVH,EAAQI,cAAgBJ,EAAQG,gBAEjCd,EAAKgB,MAAMJ,KAAMD,IAElBI,cAAe,QAEfE,SAAU,SAAoBC,EAAgBC,EAAoBC,GAUjE,MAA2B,mBAAbF,EAAKG,IAAqBH,EAAKG,IAAIF,GAChDA,KAAYD,EACXA,EAAKC,GAAYC,GAEpBE,UAAW,SAASJ,EAAMC,GASzB,IAAII,EAAMX,KAAKK,SAASC,EAAKC,GAC7B,OAAOI,aAAeC,MAAQD,OAAcE,IAARF,MAA0BA,IAG/DG,cAAe,SAASR,GAMvB,IAAIS,KACJ,IAAI,IAAIC,KAAKV,GACTA,EAAKW,eAAeD,IAAuB,KAAfA,EAAEE,OAAO,IAA4B,KAAfF,EAAEE,OAAO,IAC7DH,EAAII,KAAKH,GAGX,OAAOD,GAGRK,aAAc,SAASd,EAAKe,GAO3B,OAAOA,KAAaf,GAGrBgB,cAAe,SAAShB,EAAMe,EAAWE,GASxC,OAAO/B,EAAMgC,QAAQxB,KAAKU,UAAUJ,EAAKe,GAAWE,IAAU,GAI/DE,OAAQ,SAASnB,GAQhB,MAAuB,iBAARA,GAAqBA,KAAUA,aAAgBoB,OAG/DC,aAAc,SAASrB,GAMtB,OAAOA,GAA6B,mBAAdA,EAAKsB,MAG5BC,SAAU,SAASC,GAiBlB,IAAIxB,EAcJ,MAb6B,mBAAnBwB,EAAKxB,KAAKsB,KACnBrC,EAASwC,KAAKD,EAAKxB,KAAKsB,OAAQ,SAASI,GACxC1B,EAAO0B,EACP,IAAIC,EAAOD,aAAkBE,MAAQJ,EAAKK,QAAUL,EAAKM,OACtDH,GACFA,EAAKI,KAAKP,EAAKQ,MAAON,KAGhBF,EAAKM,QAGbN,EAAKM,OAAOC,KAAKP,EAAKQ,MAAOR,EAAKxB,MAE5BA,GAERiC,MAAO,SAASC,GAGf,OAAOA,GAAWA,EAAQC,OAASD,EAAQC,SAE5CC,MAAO,SAASZ,GAKf,IAAIa,EAAO3C,KACPsC,GAFJR,EAAO1C,EAAKwD,SAASd,EAAMA,GAAQA,EAAKe,eAEvBP,OAASK,EACtBG,EAAQhB,EAAKgB,MACjB,GAAmB,iBAATA,EAET,IAAI,IAAI9B,KADR8B,EAAQ1D,EAAKwD,SAASE,GACH,CAElB,IAAIC,EAAWD,EAAM9B,GACC,iBAAZ+B,IACTD,EAAM9B,GAAKgC,OAAO,IAAMtD,EAAOuD,aAAaF,EAAU,QAAQG,QAAQ,aAAcvD,GAAgB,IAAKmC,EAAKqB,WAAa,KAAO,KAClIL,EAAM9B,GAAGoC,SAAW,SAAUC,GAC7B,OAAO,WACN,OAAOA,GAFW,CAIjBN,IAKN,IAAIO,EAAUtD,KAAKH,YAAYiD,MAAMA,EAAOhB,GAiB5C,SAASyB,EAAaC,GAClB1B,EAAKK,SACPL,EAAKK,QAAQE,KAAKC,EAAOkB,EAAO1B,GAkClC,OApDAvC,EAASwC,KAAKuB,EAAQG,MAAO,SAASC,GACrCnE,EAASwC,KAAKuB,EAAS,SAASA,GAI/B,GAHGxB,EAAK6B,SACP7B,EAAK6B,QAAQtB,KAAKC,EAAOoB,GAAcJ,EAAQM,OAAQ9B,GAErDA,EAAKM,OACP,IAAI,IAAIpB,EAAE,EAAGA,EAAEsC,EAAQM,OAAO5C,IAC7Bc,EAAKM,OAAOC,KAAKC,EAAOgB,EAAQtC,GAAIc,GAMtC,OAHGA,EAAK+B,YACP/B,EAAK+B,WAAWxB,KAAKC,EAAOR,EAAKM,OAAS,KAAOkB,EAASxB,GAEpDwB,GACLC,IACDA,GAMHzB,EAAKW,MAAQ,WAETa,EAAQQ,QACVR,EAAQQ,UAGPR,EAAQS,UACP/D,KAAKgE,WAEPhE,KAAKgE,UAAUF,SAEhB9D,KAAKgE,UAAYV,EAAQS,QAAQ,SAASE,EAAQC,EAAaC,GAC9D,IAAiD,GAA9C3E,EAAMgC,QAAQmB,EAAK1C,cAAegE,GACpC,IAAmB,GAAhBC,EACFvB,EAAKyB,MAAMH,QAEP,IAAoB,GAAjBE,EACPxB,EAAK0B,SAASJ,QAGd,IAAI,IAAIjD,KAAKiD,EACTjD,GAAK2B,EAAK9C,YAAYyE,YACxB3B,EAAK4B,MAAMN,EAAQjD,EAAG,KAAMiD,EAAOjD,MAKrC,IAEJhB,KAAKwE,QAAQlB,GACbxB,EAAK2C,MAAQzE,KACN8B,GAER4C,YAAa,WAIZ,OACCC,uBAAwB3E,KAAKH,YAAYY,IACzCmE,0BAA0B,EAC1BC,wBAAyB7E,KAAKH,YAAYiF,IAC1CC,8BAA8B,IAIhCC,SAAU,SAAkC1E,GAG3C,GAAGN,KAAKyB,OAAOnB,GACd,OAAON,KAAKK,SAASC,EAAKN,KAAKG,gBAKjC8E,mBAAoB,SAAkC3E,GAGrD,OAAQN,KAAKG,gBAMd+E,YAAa,SAAS5E,GAIrB,OAAON,KAAKH,YAAYqF,YAAclF,KAAKH,YAAYqF,YAAY5E,GAAQA,EAAKN,KAAKH,YAAYyE,YAAc,OAGhHa,sBAAuB,SAAS7E,GAM/B,OAAQN,KAAKH,YAAYyE,aAG1Bc,oBAAqB,SAAStD,GAG7B,IAAIxB,EAUJ,OATAf,EAASwC,KAAK/B,KAAKH,YAAYY,IAAIqB,EAAKuD,UACvC,SAASrD,GACR1B,EAAO0B,EACPF,EAAKM,OAAOC,KAAKP,EAAKQ,MAAON,IAE9B,SAASwB,GACR1B,EAAKK,QAAQE,KAAKP,EAAKQ,MAAOkB,KAGzBlD,GAGRgF,QAAS,SAASC,EAAMC,GASvB,GAAGA,EAAW,CAEb,IAAIC,EAASzF,KAAKK,SAASmF,EAAWE,OAAOF,EAAWnE,cAExDoE,EAASA,EAAOE,QAAQJ,IACxBA,EAAKK,SAAWH,EAChBzF,KAAK6F,SAASL,EAAWE,OAAQF,EAAWnE,UAAWoE,GAIxD,OAFAzF,KAAKC,cAAckB,MAAM8C,OAAOsB,EAAMO,MAAM,IAC5C9F,KAAKoE,MAAMmB,GACJA,GAERQ,WAAY,SAASzF,GAQpBN,KAAKgG,SAAS1F,GAAM,GAEpBN,KAAKqE,SAAS/D,IAEfuF,SAAU,SAASvF,EAAMe,EAAWE,GAKnC,IAAI0E,EAAM3F,EAAKe,GACfrB,KAAKgG,SAAS1F,GACdA,EAAKe,GAAWE,EAChBvB,KAAKuE,MAAMjE,EAAKe,EAAU4E,EAAI1E,IAE/B2E,UAAW,SAAS5F,EAAMe,EAAWoE,GAMpC,IAAIrG,EAAK+G,QAAQV,GAChB,MAAM,IAAIvD,MAAM,+DAEjBlC,KAAK6F,SAASvF,EAAKe,EAAUoE,IAG9BW,eAAgB,SAAS9F,EAAMe,GAK9BrB,KAAKgG,SAAS1F,GACd,IAAI2F,EAAM3F,EAAKe,UACRf,EAAKe,GACZrB,KAAKuE,MAAMjE,EAAKe,EAAU4E,OAAIpF,IAG/BmF,SAAU,SAAS/B,EAAOoC,GAWzBpC,EAAOqC,WAAY,EAGnB,IAAI,IAAItF,EAAE,EAAGA,EAAEhB,KAAKC,cAAc2D,OAAQ5C,IAAI,CAC7C,IAAIuF,EAAQvG,KAAKC,cAAce,GAC/B,GAAGiD,GAAQsC,EAAMtC,OAQhB,YAPGoC,IAEFE,EAAMtC,QAAS,EACXjE,KAAKwG,iBACRD,EAAMT,MAAO,KAMjB,IAAIG,EAAMhC,aAAkBrD,YAC5B,IAAII,KAAKiD,EACLA,EAAOhD,eAAeD,KACxBiF,EAAIjF,GAAKiD,EAAOjD,IAGlBhB,KAAKC,cAAckB,MAAM8C,QAASoC,GAAapC,EAAQgC,IAAKA,EAAKH,MAAO9F,KAAKwG,kBAG9EV,KAAM,SAASW,GAmBdA,EAASA,MACT,IAAIzE,EAAQ0E,KACRC,KACAhE,EAAO3C,KACP4G,EAAe5G,KAAKC,cACpB4G,EAAOD,EAAahD,OACxB,IAYC,GAXAnE,EAAQA,QAAQgH,EAAO,UAAU,WAChC,IAA4B,IAAzBA,EAAOK,cAAwB,CACjC,IAAIC,EAAyBH,EAC7BA,EAAeD,EACfhE,EAAKqE,SACLrE,EAAK1C,cAAgB8G,OAGrBpE,EAAK1C,cAAgB2G,EAAajB,OAAOgB,KAGxC3G,KAAKH,YAAYoH,YACnB,IAAIA,EAAcjH,KAAKH,YAAYoH,cAEpC,IAAI,IAAIjG,EAAI,EAAGA,EAAI4F,EAAahD,OAAQ5C,IAAI,CAC3C,IAAIuF,EAAQK,EAAa5F,GACrBiD,EAASsC,EAAMtC,OACfgC,EAAMM,EAAMN,WACThC,EAAOqC,UACXrC,EACFjC,EAAShC,KAAKH,YAAYiF,IAAIb,GAASiD,YAAajB,SAE/B,IAAPA,IACdjE,EAAShC,KAAKH,YAAYsH,OAAOnH,KAAKkF,YAAYe,KAEnDU,EAAcxF,KAAKoF,GACnBK,EAAaQ,OAAOpG,IAAI,GACxBzB,EAASwC,KAAKC,EAAQ,SAAST,KACvBsF,GACHJ,EAAO5C,YACT4C,EAAO5C,WAAWxB,KAAKoE,EAAOnE,MAAOoE,IAGtC,SAASnF,GAGVsF,GAAQ,EACRJ,EAAOtE,QAAQE,KAAKoE,EAAOnE,MAAOf,KAIjC0F,GACFA,EAAYI,SAEb,MAAMC,GACNb,EAAOtE,QAAQE,KAAKoE,EAAOnE,MAAOf,SAIpCyF,OAAQ,WAKP,IADA,IAAIJ,EAAe5G,KAAKC,cAChBe,EAAI4F,EAAahD,OAAQ5C,EAAI,GAAG,CAEvC,IAAIuF,EAAQK,IADZ5F,GAEIiD,EAASsC,EAAMtC,OACfgC,EAAMM,EAAMN,IAChB,GAAGhC,GAAUgC,EAAI,CAEhB,IAAI,IAAIsB,KAAKtB,EACTA,EAAIhF,eAAesG,IAAMtD,EAAOsD,KAAOtB,EAAIsB,KAC7CvH,KAAKuE,MAAMN,EAAQsD,EAAGtD,EAAOsD,GAAItB,EAAIsB,IACrCtD,EAAOsD,GAAKtB,EAAIsB,IAGlB,IAAIA,KAAKtD,EACJgC,EAAIhF,eAAesG,KACtBvH,KAAKuE,MAAMN,EAAQsD,EAAGtD,EAAOsD,WACtBtD,EAAOsD,SAGPtB,EAKTjG,KAAKoE,MAAM6B,GAHXjG,KAAKqE,SAASJ,UAKPA,GAAUgC,GAAKK,UACvBM,EAAaQ,OAAOpG,EAAG,KAIzBwG,QAAS,SAASlH,GAKjB,OAAIA,EAGGA,EAAKgG,YAFFtG,KAAKC,cAAc2D,QAO9BW,MAAO,aAIPH,MAAO,aAIPC,SAAU,aAKVG,QAAS,SAASlB","file":"../../data/ObjectStore.js","sourcesContent":["define([\"../_base/lang\", \"../Evented\", \"../_base/declare\", \"../_base/Deferred\", \"../_base/array\", \r\n\t\"../_base/connect\", \"../regexp\"\r\n], function(lang, Evented, declare, Deferred, array, connect, regexp){\r\n\r\n// module:\r\n//\t\tdojo/data/ObjectStore\r\n\r\nfunction convertRegex(character){\r\n\treturn character == '*' ? '.*' : character == '?' ? '.' : character; \r\n}\r\nreturn declare(\"dojo.data.ObjectStore\", [Evented],{\r\n\t\t// summary:\r\n\t\t//\t\tA Dojo Data implementation that wraps Dojo object stores for backwards\r\n\t\t//\t\tcompatibility.\r\n\r\n\t\tobjectStore: null,\r\n\t\tconstructor: function(options){\r\n\t\t\t// options:\r\n\t\t\t//\t\tThe configuration information to pass into the data store.\r\n\t\t\t//\r\n\t\t\t//\t\t- options.objectStore:\r\n\t\t\t//\r\n\t\t\t//\t\tThe object store to use as the source provider for this data store\r\n\t\t\t\r\n\t\t\tthis._dirtyObjects = [];\r\n\t\t\tif(options.labelAttribute){\r\n\t\t\t\t// accept the old labelAttribute to make it easier to switch from old data stores\r\n\t\t\t\toptions.labelProperty = options.labelAttribute; \r\n\t\t\t}\r\n\t\t\tlang.mixin(this, options);\r\n\t\t},\r\n\t\tlabelProperty: \"label\",\r\n\r\n\t\tgetValue: function(/*Object*/ item, /*String*/property, /*value?*/defaultValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the value of an item's 'property'\r\n\t\t\t// item:\r\n\t\t\t//\t\tThe item to get the value from\r\n\t\t\t// property:\r\n\t\t\t//\t\tproperty to look up value for\r\n\t\t\t// defaultValue:\r\n\t\t\t//\t\tthe default value\r\n\r\n\t\t\treturn typeof item.get === \"function\" ? item.get(property) :\r\n\t\t\t\tproperty in item ?\r\n\t\t\t\t\titem[property] : defaultValue;\r\n\t\t},\r\n\t\tgetValues: function(item, property){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the value of an item's 'property' and returns\r\n\t\t\t//\t\tit. If this value is an array it is just returned,\r\n\t\t\t//\t\tif not, the value is added to an array and that is returned.\r\n\t\t\t// item: Object\r\n\t\t\t// property: String\r\n\t\t\t//\t\tproperty to look up value for\r\n\r\n\t\t\tvar val = this.getValue(item,property);\r\n\t\t\treturn val instanceof Array ? val : val === undefined ? [] : [val];\r\n\t\t},\r\n\r\n\t\tgetAttributes: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the available attributes of an item's 'property' and returns\r\n\t\t\t//\t\tit as an array.\r\n\t\t\t// item: Object\r\n\r\n\t\t\tvar res = [];\r\n\t\t\tfor(var i in item){\r\n\t\t\t\tif(item.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_')){\r\n\t\t\t\t\tres.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t},\r\n\r\n\t\thasAttribute: function(item,attribute){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks to see if item has attribute\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item to check\r\n\t\t\t// attribute: String\r\n\t\t\t//\t\tThe attribute to check\r\n\t\t\treturn attribute in item;\r\n\t\t},\r\n\r\n\t\tcontainsValue: function(item, attribute, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks to see if 'item' has 'value' at 'attribute'\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item to check\r\n\t\t\t// attribute: String\r\n\t\t\t//\t\tThe attribute to check\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe value to look for\r\n\t\t\treturn array.indexOf(this.getValues(item,attribute),value) > -1;\r\n\t\t},\r\n\r\n\r\n\t\tisItem: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks to see if the argument is an item\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item to check\r\n\r\n\t\t\t// we have no way of determining if it belongs, we just have object returned from\r\n\t\t\t// service queries\r\n\t\t\treturn (typeof item == 'object') && item && !(item instanceof Date);\r\n\t\t},\r\n\r\n\t\tisItemLoaded: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks to see if the item is loaded.\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item to check\r\n\r\n\t\t\treturn item && typeof item.load !== \"function\";\r\n\t\t},\r\n\r\n\t\tloadItem: function(args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLoads an item and calls the callback handler. Note, that this will call the callback\r\n\t\t\t//\t\thandler even if the item is loaded. Consequently, you can use loadItem to ensure\r\n\t\t\t//\t\tthat an item is loaded is situations when the item may or may not be loaded yet.\r\n\t\t\t//\t\tIf you access a value directly through property access, you can use this to load\r\n\t\t\t//\t\ta lazy value as well (doesn't need to be an item).\r\n\t\t\t// args: Object\r\n\t\t\t//\t\tSee dojo/data/api/Read.fetch()\r\n\t\t\t// example:\r\n\t\t\t//\t|\tstore.loadItem({\r\n\t\t\t//\t|\t\titem: item, // this item may or may not be loaded\r\n\t\t\t//\t|\t\tonItem: function(item){\r\n\t\t\t//\t|\t\t\t// do something with the item\r\n\t\t\t//\t|\t\t}\r\n\t\t\t//\t|\t});\r\n\r\n\t\t\tvar item;\r\n\t\t\tif(typeof args.item.load === \"function\"){\r\n\t\t\t\tDeferred.when(args.item.load(), function(result){\r\n\t\t\t\t\titem = result; // in synchronous mode this can allow loadItem to return the value\r\n\t\t\t\t\tvar func = result instanceof Error ? args.onError : args.onItem;\r\n\t\t\t\t\tif(func){\r\n\t\t\t\t\t\tfunc.call(args.scope, result);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else if(args.onItem){\r\n\t\t\t\t// even if it is already loaded, we will use call the callback, this makes it easier to\r\n\t\t\t\t// use when it is not known if the item is loaded (you can always safely call loadItem).\r\n\t\t\t\targs.onItem.call(args.scope, args.item);\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t},\r\n\t\tclose: function(request){\r\n\t\t\t// summary:\r\n\t\t\t// \t\tSee dojo/data/api/Read.close()\r\n\t\t\treturn request && request.abort && request.abort();\r\n\t\t},\r\n\t\tfetch: function(args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Read.fetch()\r\n\r\n\t\t\targs = lang.delegate(args, args && args.queryOptions);\r\n\t\t\tvar self = this;\r\n\t\t\tvar scope = args.scope || self;\r\n\t\t\tvar query = args.query;\r\n\t\t\tif(typeof query == \"object\"){ // can be null, but that is ignore by for-in\r\n\t\t\t\tquery = lang.delegate(query); // don't modify the original\r\n\t\t\t\tfor(var i in query){\r\n\t\t\t\t\t// find any strings and convert them to regular expressions for wildcard support\r\n\t\t\t\t\tvar required = query[i];\r\n\t\t\t\t\tif(typeof required == \"string\"){\r\n\t\t\t\t\t\tquery[i] = RegExp(\"^\" + regexp.escapeString(required, \"*?\\\\\").replace(/\\\\.|\\*|\\?/g, convertRegex) + \"$\", args.ignoreCase ? \"mi\" : \"m\");\r\n\t\t\t\t\t\tquery[i].toString = (function(original){\r\n\t\t\t\t\t\t\treturn function(){\r\n\t\t\t\t\t\t\t\treturn original;\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})(required);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar results = this.objectStore.query(query, args);\r\n\t\t\tDeferred.when(results.total, function(totalCount){\r\n\t\t\t\tDeferred.when(results, function(results){\r\n\t\t\t\t\tif(args.onBegin){\r\n\t\t\t\t\t\targs.onBegin.call(scope, totalCount || results.length, args);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(args.onItem){\r\n\t\t\t\t\t\tfor(var i=0; i<results.length;i++){\r\n\t\t\t\t\t\t\targs.onItem.call(scope, results[i], args);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(args.onComplete){\r\n\t\t\t\t\t\targs.onComplete.call(scope, args.onItem ? null : results, args);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t}, errorHandler);\r\n\t\t\t}, errorHandler);\r\n\t\t\tfunction errorHandler(error){\r\n\t\t\t\tif(args.onError){\r\n\t\t\t\t\targs.onError.call(scope, error, args);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\targs.abort = function(){\r\n\t\t\t\t// abort the request\r\n\t\t\t\tif(results.cancel){\r\n\t\t\t\t\tresults.cancel();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif(results.observe){\r\n\t\t\t\tif(this.observing){\r\n\t\t\t\t\t// if we were previously observing, cancel the last time to avoid multiple notifications. Just the best we can do for the impedance mismatch between APIs\r\n\t\t\t\t\tthis.observing.cancel();\r\n\t\t\t\t}\r\n\t\t\t\tthis.observing = results.observe(function(object, removedFrom, insertedInto){\r\n\t\t\t\t\tif(array.indexOf(self._dirtyObjects, object) == -1){\r\n\t\t\t\t\t\tif(removedFrom == -1){\r\n\t\t\t\t\t\t\tself.onNew(object);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(insertedInto == -1){\r\n\t\t\t\t\t\t\tself.onDelete(object);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tfor(var i in object){\r\n\t\t\t\t\t\t\t\tif(i != self.objectStore.idProperty){\r\n\t\t\t\t\t\t\t\t\tself.onSet(object, i, null, object[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\t\t\t}\r\n\t\t\tthis.onFetch(results);\r\n\t\t\targs.store = this;\r\n\t\t\treturn args;\r\n\t\t},\r\n\t\tgetFeatures: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn the store feature set\r\n\r\n\t\t\treturn {\r\n\t\t\t\t\"dojo.data.api.Read\": !!this.objectStore.get,\r\n\t\t\t\t\"dojo.data.api.Identity\": true,\r\n\t\t\t\t\"dojo.data.api.Write\": !!this.objectStore.put,\r\n\t\t\t\t\"dojo.data.api.Notification\": true\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tgetLabel: function(/* dojo/data/api/Item */ item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\t\t\tif(this.isItem(item)){\r\n\t\t\t\treturn this.getValue(item,this.labelProperty); //String\r\n\t\t\t}\r\n\t\t\treturn undefined; //undefined\r\n\t\t},\r\n\r\n\t\tgetLabelAttributes: function(/* dojo/data/api/Item */ item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\t\t\treturn [this.labelProperty]; //array\r\n\t\t},\r\n\r\n\t\t//Identity API Support\r\n\r\n\r\n\t\tgetIdentity: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns the identity of the given item\r\n\t\t\t//\t\tSee dojo/data/api/Read.getIdentity()\r\n\t\t\treturn this.objectStore.getIdentity ? this.objectStore.getIdentity(item) : item[this.objectStore.idProperty || \"id\"];\r\n\t\t},\r\n\r\n\t\tgetIdentityAttributes: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns the attributes which are used to make up the\r\n\t\t\t//\t\tidentity of an item.\tBasically returns this.objectStore.idProperty\r\n\t\t\t//\t\tSee dojo/data/api/Read.getIdentityAttributes()\r\n\r\n\t\t\treturn [this.objectStore.idProperty];\r\n\t\t},\r\n\r\n\t\tfetchItemByIdentity: function(args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfetch an item by its identity, by looking in our index of what we have loaded\r\n\t\t\tvar item;\r\n\t\t\tDeferred.when(this.objectStore.get(args.identity),\r\n\t\t\t\tfunction(result){\r\n\t\t\t\t\titem = result;\r\n\t\t\t\t\targs.onItem.call(args.scope, result);\r\n\t\t\t\t},\r\n\t\t\t\tfunction(error){\r\n\t\t\t\t\targs.onError.call(args.scope, error);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\treturn item;\r\n\t\t},\r\n\r\n\t\tnewItem: function(data, parentInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadds a new item to the store at the specified point.\r\n\t\t\t//\t\tTakes two parameters, data, and options.\r\n\t\t\t// data: Object\r\n\t\t\t//\t\tThe data to be added in as an item.\r\n\t\t\t// data: Object\r\n\t\t\t//\t\tSee dojo/data/api/Write.newItem()\r\n\t\t\t\t\t\r\n\t\t\tif(parentInfo){\r\n\t\t\t\t// get the previous value or any empty array\r\n\t\t\t\tvar values = this.getValue(parentInfo.parent,parentInfo.attribute,[]);\r\n\t\t\t\t// set the new value\r\n\t\t\t\tvalues = values.concat([data]);\r\n\t\t\t\tdata.__parent = values;\r\n\t\t\t\tthis.setValue(parentInfo.parent, parentInfo.attribute, values);\r\n\t\t\t}\r\n\t\t\tthis._dirtyObjects.push({object:data, save: true});\r\n\t\t\tthis.onNew(data);\r\n\t\t\treturn data;\r\n\t\t},\r\n\t\tdeleteItem: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tdeletes item and any references to that item from the store.\r\n\t\t\t// item:\r\n\t\t\t//\t\titem to delete\r\n\r\n\t\t\t// If the desire is to delete only one reference, unsetAttribute or\r\n\t\t\t// setValue is the way to go.\r\n\t\t\tthis.changing(item, true);\r\n\r\n\t\t\tthis.onDelete(item);\r\n\t\t},\r\n\t\tsetValue: function(item, attribute, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsets 'attribute' on 'item' to 'value'\r\n\t\t\t//\t\tSee dojo/data/api/Write.setValue()\r\n\t\t\t\r\n\t\t\tvar old = item[attribute];\r\n\t\t\tthis.changing(item);\r\n\t\t\titem[attribute]=value;\r\n\t\t\tthis.onSet(item,attribute,old,value);\r\n\t\t},\r\n\t\tsetValues: function(item, attribute, values){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsets 'attribute' on 'item' to 'value' value\r\n\t\t\t//\t\tmust be an array.\r\n\t\t\t//\t\tSee dojo/data/api/Write.setValues()\r\n\r\n\t\t\tif(!lang.isArray(values)){\r\n\t\t\t\tthrow new Error(\"setValues expects to be passed an Array object as its value\");\r\n\t\t\t}\r\n\t\t\tthis.setValue(item,attribute,values);\r\n\t\t},\r\n\r\n\t\tunsetAttribute: function(item, attribute){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tunsets 'attribute' on 'item'\r\n\t\t\t//\t\tSee dojo/data/api/Write.unsetAttribute()\r\n\r\n\t\t\tthis.changing(item);\r\n\t\t\tvar old = item[attribute];\r\n\t\t\tdelete item[attribute];\r\n\t\t\tthis.onSet(item,attribute,old,undefined);\r\n\t\t},\r\n\r\n\t\tchanging: function(object,_deleting){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadds an object to the list of dirty objects.  This object\r\n\t\t\t//\t\tcontains a reference to the object itself as well as a\r\n\t\t\t//\t\tcloned and trimmed version of old object for use with\r\n\t\t\t//\t\trevert.\r\n\t\t\t// object: Object\r\n\t\t\t//\t\tIndicates that the given object is changing and should be marked as \r\n\t\t\t// \t\tdirty for the next save\r\n\t\t\t// _deleting: [private] Boolean\r\n\t\t\t\r\n\t\t\tobject.__isDirty = true;\r\n\t\t\t//if an object is already in the list of dirty objects, don't add it again\r\n\t\t\t//or it will overwrite the premodification data set.\r\n\t\t\tfor(var i=0; i<this._dirtyObjects.length; i++){\r\n\t\t\t\tvar dirty = this._dirtyObjects[i];\r\n\t\t\t\tif(object==dirty.object){\r\n\t\t\t\t\tif(_deleting){\r\n\t\t\t\t\t\t// we are deleting, no object is an indicator of deletiong\r\n\t\t\t\t\t\tdirty.object = false;\r\n\t\t\t\t\t\tif(!this._saveNotNeeded){\r\n\t\t\t\t\t\t\tdirty.save = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar old = object instanceof Array ? [] : {};\r\n\t\t\tfor(i in object){\r\n\t\t\t\tif(object.hasOwnProperty(i)){\r\n\t\t\t\t\told[i] = object[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._dirtyObjects.push({object: !_deleting && object, old: old, save: !this._saveNotNeeded});\r\n\t\t},\r\n\r\n\t\tsave: function(kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSaves the dirty data using object store provider. See dojo/data/api/Write for API.\r\n\t\t\t// kwArgs:\r\n\t\t\t//\t\t- kwArgs.global:\r\n\t\t\t//\t\t  This will cause the save to commit the dirty data for all\r\n\t\t\t//\t\t  ObjectStores as a single transaction.\r\n\t\t\t//\r\n\t\t\t//\t\t- kwArgs.revertOnError:\r\n\t\t\t//\t\t  This will cause the changes to be reverted if there is an\r\n\t\t\t//\t\t  error on the save. By default a revert is executed unless\r\n\t\t\t//\t\t  a value of false is provide for this parameter.\r\n\t\t\t//\r\n\t\t\t//\t\t- kwArgs.onError:\r\n\t\t\t//\t\t  Called when an error occurs in the commit\r\n\t\t\t//\r\n\t\t\t//\t\t- kwArgs.onComplete:\r\n\t\t\t//\t\t  Called when an the save/commit is completed\r\n\r\n\t\t\tkwArgs = kwArgs || {};\r\n\t\t\tvar result, actions = [];\r\n\t\t\tvar savingObjects = [];\r\n\t\t\tvar self = this;\r\n\t\t\tvar dirtyObjects = this._dirtyObjects;\r\n\t\t\tvar left = dirtyObjects.length;// this is how many changes are remaining to be received from the server\r\n\t\t\ttry{\r\n\t\t\t\tconnect.connect(kwArgs,\"onError\",function(){\r\n\t\t\t\t\tif(kwArgs.revertOnError !== false){\r\n\t\t\t\t\t\tvar postCommitDirtyObjects = dirtyObjects;\r\n\t\t\t\t\t\tdirtyObjects = savingObjects;\r\n\t\t\t\t\t\tself.revert(); // revert if there was an error\r\n\t\t\t\t\t\tself._dirtyObjects = postCommitDirtyObjects;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tself._dirtyObjects = dirtyObjects.concat(savingObjects);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(this.objectStore.transaction){\r\n\t\t\t\t\tvar transaction = this.objectStore.transaction();\r\n\t\t\t\t}\r\n\t\t\t\tfor(var i = 0; i < dirtyObjects.length; i++){\r\n\t\t\t\t\tvar dirty = dirtyObjects[i];\r\n\t\t\t\t\tvar object = dirty.object;\r\n\t\t\t\t\tvar old = dirty.old;\r\n\t\t\t\t\tdelete object.__isDirty;\r\n\t\t\t\t\tif(object){\r\n\t\t\t\t\t\tresult = this.objectStore.put(object, {overwrite: !!old});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(typeof old != \"undefined\"){\r\n\t\t\t\t\t\tresult = this.objectStore.remove(this.getIdentity(old));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsavingObjects.push(dirty);\r\n\t\t\t\t\tdirtyObjects.splice(i--,1);\r\n\t\t\t\t\tDeferred.when(result, function(value){\r\n\t\t\t\t\t\tif(!(--left)){\r\n\t\t\t\t\t\t\tif(kwArgs.onComplete){\r\n\t\t\t\t\t\t\t\tkwArgs.onComplete.call(kwArgs.scope, actions);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},function(value){\r\n\r\n\t\t\t\t\t\t// on an error we want to revert, first we want to separate any changes that were made since the commit\r\n\t\t\t\t\t\tleft = -1; // first make sure that success isn't called\r\n\t\t\t\t\t\tkwArgs.onError.call(kwArgs.scope, value);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif(transaction){\r\n\t\t\t\t\ttransaction.commit();\r\n\t\t\t\t}\r\n\t\t\t}catch(e){\r\n\t\t\t\tkwArgs.onError.call(kwArgs.scope, value);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trevert: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns any modified data to its original state prior to a save();\r\n\r\n\t\t\tvar dirtyObjects = this._dirtyObjects;\r\n\t\t\tfor(var i = dirtyObjects.length; i > 0;){\r\n\t\t\t\ti--;\r\n\t\t\t\tvar dirty = dirtyObjects[i];\r\n\t\t\t\tvar object = dirty.object;\r\n\t\t\t\tvar old = dirty.old;\r\n\t\t\t\tif(object && old){\r\n\t\t\t\t\t// changed\r\n\t\t\t\t\tfor(var j in old){\r\n\t\t\t\t\t\tif(old.hasOwnProperty(j) && object[j] !== old[j]){\r\n\t\t\t\t\t\t\tthis.onSet(object, j, object[j], old[j]);\r\n\t\t\t\t\t\t\tobject[j] = old[j];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(j in object){\r\n\t\t\t\t\t\tif(!old.hasOwnProperty(j)){\r\n\t\t\t\t\t\t\tthis.onSet(object, j, object[j]);\r\n\t\t\t\t\t\t\tdelete object[j];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(!old){\r\n\t\t\t\t\t// was an addition, remove it\r\n\t\t\t\t\tthis.onDelete(object);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// was a deletion, we will add it back\r\n\t\t\t\t\tthis.onNew(old);\r\n\t\t\t\t}\r\n\t\t\t\tdelete (object || old).__isDirty;\r\n\t\t\t\tdirtyObjects.splice(i, 1);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tisDirty: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns true if the item is marked as dirty or true if there are any dirty items\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item to check\r\n\t\t\tif(!item){\r\n\t\t\t\treturn !!this._dirtyObjects.length;\r\n\t\t\t}\r\n\t\t\treturn item.__isDirty;\r\n\t\t},\r\n\r\n\t\t// Notification Support\r\n\r\n\t\tonSet: function(){\r\n\t\t\t// summary:\r\n\t\t\t// \t\tSee dojo/data/api/Notification.onSet()\r\n\t\t},\r\n\t\tonNew: function(){\r\n\t\t\t// summary:\r\n\t\t\t// \t\tSee dojo/data/api/Notification.onNew()\r\n\t\t},\r\n\t\tonDelete:\tfunction(){\r\n\t\t\t// summary:\r\n\t\t\t// \t\tSee dojo/data/api/Notification.onDelete()\r\n\t\t},\r\n\t\t// an extra to get result sets\r\n\t\tonFetch: function(results){\r\n\t\t\t// summary:\r\n\t\t\t// \t\tCalled when a fetch occurs\t\t\t\r\n\t\t}\r\n\r\n\t}\r\n);\r\n});\r\n"]}
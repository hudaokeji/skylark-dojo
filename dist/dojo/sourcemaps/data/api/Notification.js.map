{"version":3,"sources":["data/api/Notification.js"],"names":["define","declare","Read","getFeatures","dojo.data.api.Read","dojo.data.api.Notification","onSet","item","attribute","oldValue","newValue","Error","onNew","newItem","parentInfo","onDelete","deletedItem"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,UAAW,SAASC,EAASC,GAK5D,OAAOD,EAAQ,6BAA8BC,GAsB5CC,YAAa,WAGZ,OACCC,sBAAsB,EACtBC,8BAA8B,IAIhCC,MAAO,SAAkCC,EACTC,EACTC,EACAC,GAsBtB,MAAM,IAAIC,MAAM,wDAGjBC,MAAO,SAAkCC,EAAqBC,GA2B7D,MAAM,IAAIH,MAAM,wDAGjBI,SAAU,SAAkCC,GAW3C,MAAM,IAAIL,MAAM","file":"../../../data/api/Notification.js","sourcesContent":["define([\"../../_base/declare\", \"./Read\"], function(declare, Read){\r\n\r\n// module:\r\n//\t\tdojo/data/api/Notification\r\n\r\nreturn declare(\"dojo.data.api.Notification\", Read, {\r\n\t// summary:\r\n\t//\t\tThis is an abstract API that data provider implementations conform to.\r\n\t//\t\tThis file defines functions signatures and intentionally leaves all the\r\n\t//\t\tfunctions unimplemented.\r\n\t// description:\r\n\t//\t\tThis API defines a set of APIs that all datastores that conform to the\r\n\t//\t\tNotifications API must implement.  In general, most stores will implement\r\n\t//\t\tthese APIs as no-op functions for users who wish to monitor them to be able\r\n\t//\t\tto connect to then via dojo.connect().  For non-users of dojo.connect,\r\n\t//\t\tthey should be able to just replace the function on the store to obtain\r\n\t//\t\t notifications.  Both read-only and read-write stores may implement\r\n\t//\t\tthis feature.  In the case of a read-only store, this feature makes sense if\r\n\t//\t\tthe store itself does internal polling to a back-end server and periodically updates\r\n\t//\t\tits cache of items (deletes, adds, and updates).\r\n\t// example:\r\n\t//\t|\tfunction onSet(item, attribute, oldValue, newValue){\r\n\t//\t|\t\t//Do something with the information...\r\n\t//\t|\t};\r\n\t//\t|\tvar store = new some.newStore();\r\n\t//\t|\tdojo.connect(store, \"onSet\", onSet);\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t'dojo.data.api.Read': true,\r\n\t\t\t'dojo.data.api.Notification': true\r\n\t\t};\r\n\t},\r\n\r\n\tonSet: function(/* dojo/data/api/Item */ item,\r\n\t\t\t\t\t/* attribute-name-string */ attribute,\r\n\t\t\t\t\t/* object|array */ oldValue,\r\n\t\t\t\t\t/* object|array */ newValue){\r\n\t\t// summary:\r\n\t\t//\t\tThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.\r\n\t\t// description:\r\n\t\t//\t\tThis function is called any time an item is modified via setValue, setValues, unsetAttribute, etc.\r\n\t\t//\t\tIts purpose is to provide a hook point for those who wish to monitor actions on items in the store\r\n\t\t//\t\tin a simple manner.  The general expected usage is to dojo.connect() to the store's\r\n\t\t//\t\timplementation and be called after the store function is called.\r\n\t\t// item:\r\n\t\t//\t\tThe item being modified.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute being changed represented as a string name.\r\n\t\t// oldValue:\r\n\t\t//\t\tThe old value of the attribute.  In the case of single value calls, such as setValue, unsetAttribute, etc,\r\n\t\t//\t\tthis value will be generally be an atomic value of some sort (string, int, etc, object).  In the case of\r\n\t\t//\t\tmulti-valued attributes, it will be an array.\r\n\t\t// newValue:\r\n\t\t//\t\tThe new value of the attribute.  In the case of single value calls, such as setValue, this value will be\r\n\t\t//\t\tgenerally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes,\r\n\t\t//\t\tit will be an array.  In the case of unsetAttribute, the new value will be 'undefined'.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Notification.onSet');\r\n\t},\r\n\r\n\tonNew: function(/* dojo/data/api/Item */ newItem, /*object?*/ parentInfo){\r\n\t\t// summary:\r\n\t\t//\t\tThis function is called any time a new item is created in the store.\r\n\t\t//\t\tIt is called immediately after the store newItem processing has completed.\r\n\t\t// description:\r\n\t\t//\t\tThis function is called any time a new item is created in the store.\r\n\t\t//\t\tIt is called immediately after the store newItem processing has completed.\r\n\t\t// newItem:\r\n\t\t//\t\tThe item created.\r\n\t\t// parentInfo:\r\n\t\t//\t\tAn optional javascript object that is passed when the item created was placed in the store\r\n\t\t//\t\thierarchy as a value f another item's attribute, instead of a root level item.  Note that if this\r\n\t\t//\t\tfunction is invoked with a value for parentInfo, then onSet is not invoked stating the attribute of\r\n\t\t//\t\tthe parent item was modified.  This is to avoid getting two notification  events occurring when a new item\r\n\t\t//\t\twith a parent is created.  The structure passed in is as follows:\r\n\t\t// |\t{\r\n\t\t// |\t\titem: someItem,\t\t\t\t\t\t\t//The parent item\r\n\t\t// |\t\tattribute:\t\"attribute-name-string\",\t//The attribute the new item was assigned to.\r\n\t\t// |\t\toldValue: something\t//Whatever was the previous value for the attribute.\r\n\t\t// |\t\t\t\t\t//If it is a single-value attribute only, then this value will be a single value.\r\n\t\t// |\t\t\t\t\t//If it was a multi-valued attribute, then this will be an array of all the values minus the new one.\r\n\t\t// |\t\tnewValue: something\t//The new value of the attribute.  In the case of single value calls, such as setValue, this value will be\r\n\t\t// |\t\t\t\t\t//generally be an atomic value of some sort (string, int, etc, object).  In the case of multi-valued attributes,\r\n\t\t// |\t\t\t\t\t//it will be an array.\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Notification.onNew');\r\n\t},\r\n\r\n\tonDelete: function(/* dojo/data/api/Item */ deletedItem){\r\n\t\t// summary:\r\n\t\t//\t\tThis function is called any time an item is deleted from the store.\r\n\t\t//\t\tIt is called immediately after the store deleteItem processing has completed.\r\n\t\t// description:\r\n\t\t//\t\tThis function is called any time an item is deleted from the store.\r\n\t\t//\t\tIt is called immediately after the store deleteItem processing has completed.\r\n\t\t// deletedItem:\r\n\t\t//\t\tThe item deleted.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Notification.onDelete');\r\n\t}\r\n});\r\n\r\n});\r\n"]}
{"version":3,"sources":["data/api/Write.js"],"names":["define","declare","Read","getFeatures","dojo.data.api.Read","dojo.data.api.Write","newItem","keywordArgs","parentInfo","Error","deleteItem","item","setValue","attribute","value","setValues","values","unsetAttribute","save","revert","isDirty"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,UAAW,SAASC,EAASC,GAK5D,OAAOD,EAAQ,sBAAuBC,GAMrCC,YAAa,WAGZ,OACCC,sBAAsB,EACtBC,uBAAuB,IAIzBC,QAAS,SAAuBC,EAAyBC,GA8BxD,MAAM,IAAIC,MAAM,mDAGjBC,WAAY,SAAkCC,GAU7C,MAAM,IAAIF,MAAM,sDAGjBG,SAAU,SAAmCD,EAC3BE,EACSC,GAgB1B,MAAM,IAAIL,MAAM,oDAGjBM,UAAW,SAAkCJ,EAC3BE,EACDG,GAoBhB,MAAM,IAAIP,MAAM,qDAGjBQ,eAAgB,SAAmCN,EAC/BE,GAanB,MAAM,IAAIJ,MAAM,iDAGjBS,KAAM,SAAsBX,GA6C3B,MAAM,IAAIE,MAAM,gDAGjBU,OAAQ,WAOP,MAAM,IAAIV,MAAM,kDAGjBW,QAAS,SAAqBT,GAc7B,MAAM,IAAIF,MAAM","file":"../../../data/api/Write.js","sourcesContent":["define([\"../../_base/declare\", \"./Read\"], function(declare, Read){\r\n\r\n// module:\r\n//\t\tdojo/data/api/Write\r\n\r\nreturn declare(\"dojo.data.api.Write\", Read, {\r\n\t// summary:\r\n\t//\t\tThis is an abstract API that data provider implementations conform to.\r\n\t//\t\tThis file defines function signatures and intentionally leaves all the\r\n\t//\t\tfunctions unimplemented.\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t'dojo.data.api.Read': true,\r\n\t\t\t'dojo.data.api.Write': true\r\n\t\t};\r\n\t},\r\n\r\n\tnewItem: function(/* Object? */ keywordArgs, /*Object?*/ parentInfo){\r\n\t\t// summary:\r\n\t\t//\t\tReturns a newly created item.  Sets the attributes of the new\r\n\t\t//\t\titem based on the *keywordArgs* provided.  In general, the attribute\r\n\t\t//\t\tnames in the keywords become the attributes in the new item and as for\r\n\t\t//\t\tthe attribute values in keywordArgs, they become the values of the attributes\r\n\t\t//\t\tin the new item.  In addition, for stores that support hierarchical item\r\n\t\t//\t\tcreation, an optional second parameter is accepted that defines what item is the parent\r\n\t\t//\t\tof the new item and what attribute of that item should the new item be assigned to.\r\n\t\t//\t\tIn general, this will assume that the attribute targeted is multi-valued and a new item\r\n\t\t//\t\tis appended onto the list of values for that attribute.\r\n\t\t// keywordArgs:\r\n\t\t//\t\tA javascript object defining the initial content of the item as a set of JavaScript 'property name: value' pairs.\r\n\t\t// parentInfo:\r\n\t\t//\t\tAn optional javascript object defining what item is the parent of this item (in a hierarchical store.  Not all stores do hierarchical items),\r\n\t\t//\t\tand what attribute of that parent to assign the new item to.  If this is present, and the attribute specified\r\n\t\t//\t\tis a multi-valued attribute, it will append this item into the array of values for that attribute.  The structure\r\n\t\t//\t\tof the object is as follows:\r\n\t\t//\t|\t{\r\n\t\t//\t|\t\tparent: someItem,\r\n\t\t//\t|\t\tattribute: \"attribute-name-string\"\r\n\t\t//\t|\t}\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if *keywordArgs* is a string or a number or\r\n\t\t//\t\tanything other than a simple anonymous object.\r\n\t\t//\t\tThrows an exception if the item in parentInfo is not an item from the store\r\n\t\t//\t\tor if the attribute isn't an attribute name string.\r\n\t\t// example:\r\n\t\t//\t|\tvar kermit = store.newItem({name: \"Kermit\", color:[blue, green]});\r\n\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.newItem');\r\n\t},\r\n\r\n\tdeleteItem: function(/* dojo/data/api/Item */ item){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes an item from the store.\r\n\t\t// item:\r\n\t\t//\t\tThe item to delete.\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if the argument *item* is not an item\r\n\t\t//\t\t(if store.isItem(item) returns false).\r\n\t\t// example:\r\n\t\t//\t|\tvar success = store.deleteItem(kermit);\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.deleteItem');\r\n\t},\r\n\r\n\tsetValue: function(\t/* dojo/data/api/Item */ item,\r\n\t\t\t\t\t\t/* string */ attribute,\r\n\t\t\t\t\t\t/* almost anything */ value){\r\n\t\t// summary:\r\n\t\t//\t\tSets the value of an attribute on an item.\r\n\t\t//\t\tReplaces any previous value or values.\r\n\t\t// item:\r\n\t\t//\t\tThe item to modify.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute of the item to change represented as a string name.\r\n\t\t// value:\r\n\t\t//\t\tThe value to assign to the item.\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if *item* is not an item, or if *attribute*\r\n\t\t//\t\tis neither an attribute object or a string.\r\n\t\t//\t\tThrows an exception if *value* is undefined.\r\n\t\t// example:\r\n\t\t//\t|\tvar success = store.set(kermit, \"color\", \"green\");\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.setValue');\r\n\t},\r\n\r\n\tsetValues: function(/* dojo/data/api/Item */ item,\r\n\t\t\t\t\t\t/* string */ attribute,\r\n\t\t\t\t\t\t/* array */ values){\r\n\t\t// summary:\r\n\t\t//\t\tAdds each value in the *values* array as a value of the given\r\n\t\t//\t\tattribute on the given item.\r\n\t\t//\t\tReplaces any previous value or values.\r\n\t\t//\t\tCalling store.setValues(x, y, []) (with *values* as an empty array) has\r\n\t\t//\t\tthe same effect as calling store.unsetAttribute(x, y).\r\n\t\t// item:\r\n\t\t//\t\tThe item to modify.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute of the item to change represented as a string name.\r\n\t\t// values:\r\n\t\t//\t\tAn array of values to assign to the attribute..\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if *values* is not an array, if *item* is not an\r\n\t\t//\t\titem, or if *attribute* is neither an attribute object or a string.\r\n\t\t// example:\r\n\t\t//\t|\tvar success = store.setValues(kermit, \"color\", [\"green\", \"aqua\"]);\r\n\t\t//\t|\tsuccess = store.setValues(kermit, \"color\", []);\r\n\t\t//\t|\tif (success){assert(!store.hasAttribute(kermit, \"color\"));}\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.setValues');\r\n\t},\r\n\r\n\tunsetAttribute: function(\t/* dojo/data/api/Item */ item,\r\n\t\t\t\t\t\t\t\t/* string */ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tDeletes all the values of an attribute on an item.\r\n\t\t// item:\r\n\t\t//\t\tThe item to modify.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute of the item to unset represented as a string.\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if *item* is not an item, or if *attribute*\r\n\t\t//\t\tis neither an attribute object or a string.\r\n\t\t// example:\r\n\t\t//\t|\tvar success = store.unsetAttribute(kermit, \"color\");\r\n\t\t//\t|\tif (success){assert(!store.hasAttribute(kermit, \"color\"));}\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.clear');\r\n\t},\r\n\r\n\tsave: function(/* object */ keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tSaves to the server all the changes that have been made locally.\r\n\t\t//\t\tThe save operation may take some time and is generally performed\r\n\t\t//\t\tin an asynchronous fashion.  The outcome of the save action is\r\n\t\t//\t\tis passed into the set of supported callbacks for the save.\r\n\t\t// keywordArgs:\r\n\t\t// |\t{\r\n\t\t// |\t\tonComplete: function\r\n\t\t// |\t\tonError: function\r\n\t\t// |\t\tscope: object\r\n\t\t// |\t}\r\n\t\t//\r\n\t\t//\t\t####The *onComplete* parameter.\r\n\t\t//\r\n\t\t//\t\tfunction();\r\n\t\t//\r\n\t\t//\t\tIf an onComplete callback function is provided, the callback function\r\n\t\t//\t\twill be called just once, after the save has completed.  No parameters\r\n\t\t//\t\tare generally passed to the onComplete.\r\n\t\t//\r\n\t\t//\t\t####The *onError* parameter.\r\n\t\t//\r\n\t\t//\t\tfunction(errorData);\r\n\t\t//\r\n\t\t//\t\tIf an onError callback function is provided, the callback function\r\n\t\t//\t\twill be called if there is any sort of error while attempting to\r\n\t\t//\t\texecute the save.  The onError function will be based one parameter, the\r\n\t\t//\t\terror.\r\n\t\t//\r\n\t\t//\t\t####The *scope* parameter.\r\n\t\t//\r\n\t\t//\t\tIf a scope object is provided, all of the callback function (\r\n\t\t//\t\tonComplete, onError, etc) will be invoked in the context of the scope\r\n\t\t//\t\tobject.  In the body of the callback function, the value of the \"this\"\r\n\t\t//\t\tkeyword will be the scope object.   If no scope object is provided,\r\n\t\t//\t\tthe callback functions will be called in the context of dojo.global.\r\n\t\t//\t\tFor example, onComplete.call(scope) vs.\r\n\t\t//\t\tonComplete.call(dojo.global)\r\n\t\t// returns:\r\n\t\t//\t\tNothing.  Since the saves are generally asynchronous, there is\r\n\t\t//\t\tno need to return anything.  All results are passed via callbacks.\r\n\t\t// example:\r\n\t\t//\t|\tstore.save({onComplete: onSave});\r\n\t\t//\t|\tstore.save({scope: fooObj, onComplete: onSave, onError: saveFailed});\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.save');\r\n\t},\r\n\r\n\trevert: function(){\r\n\t\t// summary:\r\n\t\t//\t\tDiscards any unsaved changes.\r\n\t\t// description:\r\n\t\t//\t\tDiscards any unsaved changes.\r\n\t\t// example:\r\n\t\t//\t|\tvar success = store.revert();\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.revert');\r\n\t},\r\n\r\n\tisDirty: function(/* item? */ item){\r\n\t\t// summary:\r\n\t\t//\t\tGiven an item, isDirty() returns true if the item has been modified\r\n\t\t//\t\tsince the last save().  If isDirty() is called with no *item* argument,\r\n\t\t//\t\tthen this function returns true if any item has been modified since\r\n\t\t//\t\tthe last save().\r\n\t\t// item:\r\n\t\t//\t\tThe item to check.\r\n\t\t// exceptions:\r\n\t\t//\t\tThrows an exception if isDirty() is passed an argument and the\r\n\t\t//\t\targument is not an item.\r\n\t\t// example:\r\n\t\t//\t|\tvar trueOrFalse = store.isDirty(kermit); // true if kermit is dirty\r\n\t\t//\t|\tvar trueOrFalse = store.isDirty();       // true if any item is dirty\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Write.isDirty');\r\n\t}\r\n});\r\n\r\n});\r\n"]}
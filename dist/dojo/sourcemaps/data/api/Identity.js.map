{"version":3,"sources":["data/api/Identity.js"],"names":["define","declare","Read","getFeatures","dojo.data.api.Read","dojo.data.api.Identity","getIdentity","item","Error","getIdentityAttributes","fetchItemByIdentity","keywordArgs","this","isItemLoaded"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,UAAW,SAASC,EAASC,GAK5D,OAAOD,EAAQ,yBAA0BC,GAMxCC,YAAa,WAGZ,OACEC,sBAAsB,EACtBC,0BAA0B,IAI7BC,YAAa,SAAkCC,GAa9C,MAAM,IAAIC,MAAM,0DAGjBC,sBAAuB,SAAkCF,GAiBxD,MAAM,IAAIC,MAAM,oEAIjBE,oBAAqB,SAAsBC,GA6C1C,IAAIC,KAAKC,aAAaF,EAAYJ,MACjC,MAAM,IAAIC,MAAM","file":"../../../data/api/Identity.js","sourcesContent":["define([\"../../_base/declare\", \"./Read\"], function(declare, Read){\r\n\r\n// module:\r\n//\t\tdojo/data/api/Identity\r\n\r\nreturn declare(\"dojo.data.api.Identity\", Read, {\r\n\t// summary:\r\n\t//\t\tThis is an abstract API that data provider implementations conform to.\r\n\t//\t\tThis file defines methods signatures and intentionally leaves all the\r\n\t//\t\tmethods unimplemented.\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t 'dojo.data.api.Read': true,\r\n\t\t\t 'dojo.data.api.Identity': true\r\n\t\t};\r\n\t},\r\n\r\n\tgetIdentity: function(/* dojo/data/api/Item */ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturns a unique identifier for an item.  The return value will be\r\n\t\t//\t\teither a string or something that has a toString() method (such as,\r\n\t\t//\t\tfor example, a dojox/uuid object).\r\n\t\t// item:\r\n\t\t//\t\tThe item from the store from which to obtain its identifier.\r\n\t\t// exceptions:\r\n\t\t//\t\tConforming implementations may throw an exception or return null if\r\n\t\t//\t\titem is not an item.\r\n\t\t// example:\r\n\t\t//\t|\tvar itemId = store.getIdentity(kermit);\r\n\t\t//\t|\tassert(kermit === store.findByIdentity(store.getIdentity(kermit)));\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Identity.getIdentity');\r\n\t},\r\n\r\n\tgetIdentityAttributes: function(/* dojo/data/api/Item */ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an array of attribute names that are used to generate the identity.\r\n\t\t//\t\tFor most stores, this is a single attribute, but for some complex stores\r\n\t\t//\t\tsuch as RDB backed stores that use compound (multi-attribute) identifiers\r\n\t\t//\t\tit can be more than one.  If the identity is not composed of attributes\r\n\t\t//\t\ton the item, it will return null.  This function is intended to identify\r\n\t\t//\t\tthe attributes that comprise the identity so that so that during a render\r\n\t\t//\t\tof all attributes, the UI can hide the the identity information if it\r\n\t\t//\t\tchooses.\r\n\t\t// item:\r\n\t\t//\t\tThe item from the store from which to obtain the array of public attributes that\r\n\t\t//\t\tcompose the identifier, if any.\r\n\t\t// example:\r\n\t\t//\t|\tvar itemId = store.getIdentity(kermit);\r\n\t\t//\t|\tvar identifiers = store.getIdentityAttributes(itemId);\r\n\t\t//\t|\tassert(typeof identifiers === \"array\" || identifiers === null);\r\n\t\tthrow new Error('Unimplemented API: dojo.data.api.Identity.getIdentityAttributes');\r\n\t},\r\n\r\n\r\n\tfetchItemByIdentity: function(/* object */ keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tGiven the identity of an item, this method returns the item that has\r\n\t\t//\t\tthat identity through the onItem callback.  Conforming implementations\r\n\t\t//\t\tshould return null if there is no item with the given identity.\r\n\t\t//\t\tImplementations of fetchItemByIdentity() may sometimes return an item\r\n\t\t//\t\tfrom a local cache and may sometimes fetch an item from a remote server,\r\n\t\t// keywordArgs:\r\n\t\t//\t\tAn anonymous object that defines the item to locate and callbacks to invoke when the\r\n\t\t//\t\titem has been located and load has completed.  The format of the object is as follows:\r\n\t\t// |\t{\r\n\t\t// |\t\tidentity: string|object,\r\n\t\t// |\t\tonItem: Function,\r\n\t\t// |\t\tonError: Function,\r\n\t\t// |\t\tscope: object\r\n\t\t// |\t}\r\n\t\t//\r\n\t\t//\t \t####The *identity* parameter\r\n\t\t//\r\n\t\t//\t\tThe identity parameter is the identity of the item you wish to locate and load\r\n\t\t//\t\tThis attribute is required.  It should be a string or an object that toString()\r\n\t\t//\t\tcan be called on.\r\n\t\t//\r\n\t\t//\t \t####The *onItem* parameter\r\n\t\t//\r\n\t\t//\t\tFunction(item)\r\n\t\t//\t\tThe onItem parameter is the callback to invoke when the item has been loaded.  It takes only one\r\n\t\t//\t\tparameter, the item located, or null if none found.\r\n\t\t//\r\n\t\t//\t \t####The *onError* parameter\r\n\t\t//\r\n\t\t//\t\tFunction(error)\r\n\t\t//\t\tThe onError parameter is the callback to invoke when the item load encountered an error.  It takes only one\r\n\t\t//\t\tparameter, the error object\r\n\t\t//\r\n\t\t//\t \t####The *scope* parameter\r\n\t\t//\r\n\t\t//\t\tIf a scope object is provided, all of the callback functions (onItem,\r\n\t\t//\t\tonError, etc) will be invoked in the context of the scope object.\r\n\t\t//\t\tIn the body of the callback function, the value of the \"this\"\r\n\t\t//\t\tkeyword will be the scope object.   If no scope object is provided,\r\n\t\t//\t\tthe callback functions will be called in the context of dojo.global.\r\n\t\t//\t\tFor example, onItem.call(scope, item, request) vs.\r\n\t\t//\t\tonItem.call(dojo.global, item, request)\r\n\r\n\t\tif(!this.isItemLoaded(keywordArgs.item)){\r\n\t\t\tthrow new Error('Unimplemented API: dojo.data.api.Identity.fetchItemByIdentity');\r\n\t\t}\r\n\t}\r\n});\r\n\r\n});\r\n"]}
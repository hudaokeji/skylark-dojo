{"version":3,"sources":["data/util/filter.js"],"names":["define","lang","filter","setObject","patternToRegExp","pattern","ignoreCase","rxp","c","i","length","charAt","RegExp"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAASC,GAMtC,IAAIC,KAqEJ,OApEAD,EAAKE,UAAU,wBAAyBD,GAExCA,EAAOE,gBAAkB,SAAmBC,EAAsBC,GA4BjE,IAFA,IAAIC,EAAM,IACNC,EAAI,KACAC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAElC,OADAD,EAAIH,EAAQM,OAAOF,IAElB,IAAK,KACJF,GAAOC,EACPC,IACAF,GAAOF,EAAQM,OAAOF,GACtB,MACD,IAAK,IACJF,GAAO,KAAM,MACd,IAAK,IACJA,GAAO,IAAK,MACb,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACJA,GAAO,KACR,QACCA,GAAOC,EAIV,OADAD,GAAO,IACJD,EACK,IAAIM,OAAOL,EAAI,MAEf,IAAIK,OAAOL,EAAI,MAKjBL","file":"../../../data/util/filter.js","sourcesContent":["define([\"../../_base/lang\"], function(lang){\r\n\t// module:\r\n\t//\t\tdojo/data/util/filter\r\n\t// summary:\r\n\t//\t\tTODOC\r\n\r\nvar filter = {};\r\nlang.setObject(\"dojo.data.util.filter\", filter);\r\n\r\nfilter.patternToRegExp = function(/*String*/pattern, /*boolean?*/ ignoreCase){\r\n\t// summary:\r\n\t//\t\tHelper function to convert a simple pattern to a regular expression for matching.\r\n\t// description:\r\n\t//\t\tReturns a regular expression object that conforms to the defined conversion rules.\r\n\t//\t\tFor example:\r\n\t//\r\n\t//\t\t- ca*   -> /^ca.*$/\r\n\t//\t\t- *ca*  -> /^.*ca.*$/\r\n\t//\t\t- *c\\*a*  -> /^.*c\\*a.*$/\r\n\t//\t\t- *c\\*a?*  -> /^.*c\\*a..*$/\r\n\t//\r\n\t//\t\tand so on.\r\n\t// pattern: string\r\n\t//\t\tA simple matching pattern to convert that follows basic rules:\r\n\t//\r\n\t//\t\t- * Means match anything, so ca* means match anything starting with ca\r\n\t//\t\t- ? Means match single character.  So, b?b will match to bob and bab, and so on.\r\n\t//\t\t- \\ is an escape character.  So for example, \\* means do not treat * as a match, but literal character *.\r\n\t//\r\n\t//\t\tTo use a \\ as a character in the string, it must be escaped.  So in the pattern it should be\r\n\t//\t\trepresented by \\\\ to be treated as an ordinary \\ character instead of an escape.\r\n\t// ignoreCase:\r\n\t//\t\tAn optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing\r\n\t//\t\tBy default, it is assumed case sensitive.\r\n\r\n\tvar rxp = \"^\";\r\n\tvar c = null;\r\n\tfor(var i = 0; i < pattern.length; i++){\r\n\t\tc = pattern.charAt(i);\r\n\t\tswitch(c){\r\n\t\t\tcase '\\\\':\r\n\t\t\t\trxp += c;\r\n\t\t\t\ti++;\r\n\t\t\t\trxp += pattern.charAt(i);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '*':\r\n\t\t\t\trxp += \".*\"; break;\r\n\t\t\tcase '?':\r\n\t\t\t\trxp += \".\"; break;\r\n\t\t\tcase '$':\r\n\t\t\tcase '^':\r\n\t\t\tcase '/':\r\n\t\t\tcase '+':\r\n\t\t\tcase '.':\r\n\t\t\tcase '|':\r\n\t\t\tcase '(':\r\n\t\t\tcase ')':\r\n\t\t\tcase '{':\r\n\t\t\tcase '}':\r\n\t\t\tcase '[':\r\n\t\t\tcase ']':\r\n\t\t\t\trxp += \"\\\\\"; //fallthrough\r\n\t\t\tdefault:\r\n\t\t\t\trxp += c;\r\n\t\t}\r\n\t}\r\n\trxp += \"$\";\r\n\tif(ignoreCase){\r\n\t\treturn new RegExp(rxp,\"mi\"); //RegExp\r\n\t}else{\r\n\t\treturn new RegExp(rxp,\"m\"); //RegExp\r\n\t}\r\n\r\n};\r\n\r\nreturn filter;\r\n});\r\n"]}
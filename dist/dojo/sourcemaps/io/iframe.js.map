{"version":3,"sources":["io/iframe.js"],"names":["define","config","json","kernel","lang","xhr","has","win","dom","domConstruct","query","require","aspect","_iframe","deprecated","mid","_iframeName","substring","lastIndexOf","iframe","delegate","create","_frame","apply","arguments","get","post","send","args","rDfd","dfd","_ioSetArgs","cancel","value","ioArgs","handleAs","response","data","text","fromJson","eval","e","error","_hasError","method","form","byId","toUpperCase","options","content","timeout","ioPublish","publish","start","after","remove","_ioNotifyStart","url","_callNext","then","resolve","otherwise","reject","_iframeOnload","global","setObject"],"mappings":";;;;;;;AAAAA,QACC,kBAAmB,gBAAiB,kBAAuD,gBAC3F,eAAgB,WAAY,kBAC5B,SAAU,mBAAoB,WAAY,UAAW,YAAa,qBAChE,SAASC,EAAQC,EAAMC,EAAiCC,EAAMC,EAAKC,EAAKC,EAAKC,EAAKC,EAAcC,EAAOC,EAASC,EAAQC,GAK3HV,EAAOW,WAAW,iBAAkB,2BAA4B,OAoEhE,IAAIC,EAAMF,EAAQG,YAClBD,EAAMA,EAAIE,UAAU,EAAGF,EAAIG,YAAY,MAEvC,IAAIC,EAASf,EAAKgB,SAASP,GAK1BQ,OAAQ,WACP,OAAOF,EAAOG,OAAST,EAAQQ,OAAOE,MAAMV,EAASW,YAItDC,IAAK,KACLC,KAAM,KAENC,KAAM,SAAqBC,GAK1B,IAAIC,EAGAC,EAAMzB,EAAI0B,WAAWH,EACxB,SAAqBE,GAGpBD,GAAQA,EAAKG,UAEd,SAAqBF,GAGpB,IAAIG,EAAQ,KACXC,EAASJ,EAAII,OACd,IACC,IAAIC,EAAWD,EAAOC,SAGN,QAAbA,GAAmC,SAAbA,EACxBF,EAAQJ,EAAKO,SAASC,MAEtBJ,EAAQJ,EAAKO,SAASE,KACN,SAAbH,EACFF,EAAQ/B,EAAKqC,SAASN,GACD,eAAbE,IACRF,EAAQ9B,EAAOqC,KAAKP,KAGtB,MAAMQ,GACNR,EAAQQ,EAET,OAAOR,GAER,SAAkBS,EAAmBZ,GAIpC,OADAA,EAAII,OAAOS,WAAY,EAChBD,IAILR,EAASJ,EAAII,OAEbU,EAAS,MACZC,EAAOrC,EAAIsC,KAAKlB,EAAKiB,MACnBjB,EAAKgB,QAAwC,SAA9BhB,EAAKgB,OAAOG,eAA4BF,IACzDD,EAAS,QAGV,IAAII,GACHJ,OAAQA,EACRT,SAA4B,SAAlBP,EAAKO,UAAyC,eAAlBP,EAAKO,SAA4B,OAASP,EAAKO,SACrFU,KAAMjB,EAAKiB,KACXnC,MAAOmC,EAAO,KAAOjB,EAAKqB,QAC1BZ,KAAMQ,EAAOjB,EAAKqB,QAAU,KAC5BC,QAAStB,EAAKsB,QACdhB,OAAQA,GAOT,GAJGc,EAAQJ,SACVI,EAAQJ,OAASI,EAAQJ,OAAOG,eAG9B9C,EAAOkD,WAAahD,EAAOiD,UAAqC,IAA1BlB,EAAON,KAAKuB,UACpD,IAAIE,EAAQzC,EAAO0C,MAAMzC,EAAS,eAAgB,SAASwB,GACvDA,EAAKW,QAAQd,SAAWA,IAC1BmB,EAAME,SACNlD,EAAImD,eAAe1B,MAElB,GAaJ,OAXAD,EAAOhB,EAAQqB,EAAOuB,IAAKT,GAAS,GAEpCd,EAAOwB,UAAY7B,EAAK6B,UAExB7B,EAAK8B,KAAK,WACT7B,EAAI8B,QAAQ9B,KACV+B,UAAU,SAASnB,GACrBZ,EAAII,OAAOQ,MAAQA,EACnBZ,EAAIgC,OAAOpB,KAGLZ,GAGRiC,cAAexD,EAAIyD,OAAOjD,EAAM,aAKjC,OAFAX,EAAK6D,UAAU,iBAAkB9C,GAE1BA","file":"../../io/iframe.js","sourcesContent":["define([\r\n\t\"../_base/config\", \"../_base/json\", \"../_base/kernel\", /*===== \"../_base/declare\", =====*/ \"../_base/lang\",\r\n\t\"../_base/xhr\", \"../sniff\", \"../_base/window\",\r\n\t\"../dom\", \"../dom-construct\", \"../query\", \"require\", \"../aspect\", \"../request/iframe\"\r\n], function(config, json, kernel, /*===== declare, =====*/ lang, xhr, has, win, dom, domConstruct, query, require, aspect, _iframe){\r\n\r\n// module:\r\n//\t\tdojo/io/iframe\r\n\r\nkernel.deprecated(\"dojo/io/iframe\", \"Use dojo/request/iframe.\", \"2.0\");\r\n\r\n/*=====\r\nvar __ioArgs = declare(kernel.__IoArgs, {\r\n\t// method: String?\r\n\t//\t\tThe HTTP method to use. \"GET\" or \"POST\" are the only supported\r\n\t//\t\tvalues.  It will try to read the value from the form node's\r\n\t//\t\tmethod, then try this argument. If neither one exists, then it\r\n\t//\t\tdefaults to POST.\r\n\t// handleAs: String?\r\n\t//\t\tSpecifies what format the result data should be given to the\r\n\t//\t\tload/handle callback. Valid values are: text, html, xml, json,\r\n\t//\t\tjavascript. IMPORTANT: For all values EXCEPT html and xml, The\r\n\t//\t\tserver response should be an HTML file with a textarea element.\r\n\t//\t\tThe response data should be inside the textarea element. Using an\r\n\t//\t\tHTML document the only reliable, cross-browser way this\r\n\t//\t\ttransport can know when the response has loaded. For the html\r\n\t//\t\thandleAs value, just return a normal HTML document.  NOTE: xml\r\n\t//\t\tis now supported with this transport (as of 1.1+); a known issue\r\n\t//\t\tis if the XML document in question is malformed, Internet Explorer\r\n\t//\t\twill throw an uncatchable error.\r\n\t// content: Object?\r\n\t//\t\tIf \"form\" is one of the other args properties, then the content\r\n\t//\t\tobject properties become hidden form form elements. For\r\n\t//\t\tinstance, a content object of {name1 : \"value1\"} is converted\r\n\t//\t\tto a hidden form element with a name of \"name1\" and a value of\r\n\t//\t\t\"value1\". If there is not a \"form\" property, then the content\r\n\t//\t\tobject is converted into a name=value&name=value string, by\r\n\t//\t\tusing xhr.objectToQuery().\r\n});\r\n=====*/\r\n\r\n/*=====\r\nreturn kernel.io.iframe = {\r\n\t// summary:\r\n\t//\t\tDeprecated, use dojo/request/iframe instead.\r\n\t//\t\tSends an Ajax I/O call using and Iframe (for instance, to upload files)\r\n\r\n\tcreate: function(fname, onloadstr, uri){\r\n\t\t// summary:\r\n\t\t//\t\tCreates a hidden iframe in the page. Used mostly for IO\r\n\t\t//\t\ttransports.  You do not need to call this to start a\r\n\t\t//\t\tdojo/io/iframe request. Just call send().\r\n\t\t// fname: String\r\n\t\t//\t\tThe name of the iframe. Used for the name attribute on the\r\n\t\t//\t\tiframe.\r\n\t\t// onloadstr: String\r\n\t\t//\t\tA string of JavaScript that will be executed when the content\r\n\t\t//\t\tin the iframe loads.\r\n\t\t// uri: String\r\n\t\t//\t\tThe value of the src attribute on the iframe element. If a\r\n\t\t//\t\tvalue is not given, then dojo/resources/blank.html will be\r\n\t\t//\t\tused.\r\n\t},\r\n\tsetSrc: function(iframe, src, replace){\r\n\t\t// summary:\r\n\t\t//\t\tSets the URL that is loaded in an IFrame. The replace parameter\r\n\t\t//\t\tindicates whether location.replace() should be used when\r\n\t\t//\t\tchanging the location of the iframe.\r\n\t},\r\n\tdoc: function(iframeNode){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the document object associated with the iframe DOM Node argument.\r\n\t}\r\n};\r\n=====*/\r\n\r\n\r\nvar mid = _iframe._iframeName;\r\nmid = mid.substring(0, mid.lastIndexOf('_'));\r\n\r\nvar iframe = lang.delegate(_iframe, {\r\n\t// summary:\r\n\t//\t\tDeprecated, use dojo/request/iframe instead.\r\n\t//\t\tSends an Ajax I/O call using and Iframe (for instance, to upload files)\r\n\r\n\tcreate: function(){\r\n\t\treturn iframe._frame = _iframe.create.apply(_iframe, arguments);\r\n\t},\r\n\r\n\t// cover up delegated methods\r\n\tget: null,\r\n\tpost: null,\r\n\r\n\tsend: function(/*__ioArgs*/args){\r\n\t\t// summary:\r\n\t\t//\t\tFunction that sends the request to the server.\r\n\t\t//\t\tThis transport can only process one send() request at a time, so if send() is called\r\n\t\t//\t\tmultiple times, it will queue up the calls and only process one at a time.\r\n\t\tvar rDfd;\r\n\r\n\t\t//Set up the deferred.\r\n\t\tvar dfd = xhr._ioSetArgs(args,\r\n\t\t\tfunction(/*Deferred*/dfd){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tcanceller function for xhr._ioSetArgs call.\r\n\t\t\t\trDfd && rDfd.cancel();\r\n\t\t\t},\r\n\t\t\tfunction(/*Deferred*/dfd){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tokHandler function for xhr._ioSetArgs call.\r\n\t\t\t\tvar value = null,\r\n\t\t\t\t\tioArgs = dfd.ioArgs;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvar handleAs = ioArgs.handleAs;\r\n\r\n\t\t\t\t\t//Assign correct value based on handleAs value.\r\n\t\t\t\t\tif(handleAs === \"xml\" || handleAs === \"html\"){\r\n\t\t\t\t\t\tvalue = rDfd.response.data;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tvalue = rDfd.response.text;\r\n\t\t\t\t\t\tif(handleAs === \"json\"){\r\n\t\t\t\t\t\t\tvalue = json.fromJson(value);\r\n\t\t\t\t\t\t}else if(handleAs === \"javascript\"){\r\n\t\t\t\t\t\t\tvalue = kernel.eval(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tvalue = e;\r\n\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t},\r\n\t\t\tfunction(/*Error*/error, /*Deferred*/dfd){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\terrHandler function for xhr._ioSetArgs call.\r\n\t\t\t\tdfd.ioArgs._hasError = true;\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\r\n\t\tvar method = \"GET\",\r\n\t\t\tform = dom.byId(args.form);\r\n\t\tif(args.method && args.method.toUpperCase() === \"POST\" && form){\r\n\t\t\tmethod = \"POST\";\r\n\t\t}\r\n\r\n\t\tvar options = {\r\n\t\t\tmethod: method,\r\n\t\t\thandleAs: args.handleAs === \"json\" || args.handleAs === \"javascript\" ? \"text\" : args.handleAs,\r\n\t\t\tform: args.form,\r\n\t\t\tquery: form ? null : args.content,\r\n\t\t\tdata: form ? args.content : null,\r\n\t\t\ttimeout: args.timeout,\r\n\t\t\tioArgs: ioArgs\r\n\t\t};\r\n\r\n\t\tif(options.method){\r\n\t\t\toptions.method = options.method.toUpperCase();\r\n\t\t}\r\n\r\n\t\tif(config.ioPublish && kernel.publish && ioArgs.args.ioPublish !== false){\r\n\t\t\tvar start = aspect.after(_iframe, \"_notifyStart\", function(data){\r\n\t\t\t\tif(data.options.ioArgs === ioArgs){\r\n\t\t\t\t\tstart.remove();\r\n\t\t\t\t\txhr._ioNotifyStart(dfd);\r\n\t\t\t\t}\r\n\t\t\t}, true);\r\n\t\t}\r\n\t\trDfd = _iframe(ioArgs.url, options, true);\r\n\r\n\t\tioArgs._callNext = rDfd._callNext;\r\n\r\n\t\trDfd.then(function(){\r\n\t\t\tdfd.resolve(dfd);\r\n\t\t}).otherwise(function(error){\r\n\t\t\tdfd.ioArgs.error = error;\r\n\t\t\tdfd.reject(error);\r\n\t\t});\r\n\r\n\t\treturn dfd;\r\n\t},\r\n\r\n\t_iframeOnload: win.global[mid + '_onload']\r\n});\r\n\r\nlang.setObject(\"dojo.io.iframe\", iframe);\r\n\r\nreturn iframe;\r\n});\r\n"]}
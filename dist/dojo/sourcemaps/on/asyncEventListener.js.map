{"version":3,"sources":["on/asyncEventListener.js"],"names":["define","on","baseWin","domConstruct","testEvent","requiresClone","testNode","create","body","once","e","click","undefined","clientX","destroy","listener","call","this","arg","i","argCopy","clone"],"mappings":";;;;;;;AAAAA,QAAQ,QAAS,kBAAmB,mBAAoB,gBAAiB,SAASC,EAAIC,EAASC,GAU9F,IACCC,EACAC,EAFGC,EAAWH,EAAaI,OAAO,MAAO,KAAML,EAAQM,QAGxDP,EAAGQ,KAAKH,EAAU,QAAS,SAASI,GACnCN,EAAYM,IAEbJ,EAASK,QACT,IACCN,OAAsCO,IAAtBR,EAAUS,QAC1B,MAAMH,GACNL,GAAgB,EAChB,QACAF,EAAaW,QAAQR,GAgBtB,OAAO,SAASS,GACf,OAAGV,EACK,SAASK,GAEfK,EAASC,KAAKC,KAjBjB,SAAeC,GAKd,IACCC,EADGC,KAEJ,IAAID,KAAKD,EACRE,EAAQD,GAAKD,EAAIC,GAElB,OAAOC,EAOeC,CAAMX,KAGrBK","file":"../../on/asyncEventListener.js","sourcesContent":["define(['../on', '../_base/window', '../dom-construct', '../domReady!'], function(on, baseWin, domConstruct){\r\n\t// summary:\r\n\t//\t\tThis sub module provide an event factory for delayed events (like debounce or throttle)\r\n\t// module:\r\n\t//\t\tdojo/on/asyncEventListener\r\n\r\n\r\n\t//Testing is the browser support async event access\r\n\t//If not we need to clone the event, otherwise accessing the event properties\r\n\t//will trigger a JS error (invalid member)\r\n\tvar testNode = domConstruct.create('div', null, baseWin.body()),\r\n\t\ttestEvent,\r\n\t\trequiresClone;\r\n\ton.once(testNode, 'click', function(e){\r\n\t\ttestEvent = e;\r\n\t});\r\n\ttestNode.click();\r\n\ttry{\r\n\t\trequiresClone = testEvent.clientX === undefined;\r\n\t}catch(e){\r\n\t\trequiresClone = true;\r\n\t}finally{\r\n\t\tdomConstruct.destroy(testNode);\r\n\t}\r\n\r\n\tfunction clone(arg){\r\n\t\t// summary:\r\n\t\t//\t\tclone the event\r\n\t\t// description:\r\n\t\t//\t\tUsed if the browser provides a corrupted event (comming from a node) when passed to an async function\r\n\t\tvar argCopy = {},\r\n\t\t\ti;\r\n\t\tfor(i in arg){\r\n\t\t\targCopy[i] = arg[i];\r\n\t\t}\r\n\t\treturn argCopy;\r\n\t}\r\n\r\n\treturn function(listener){\r\n\t\tif(requiresClone){\r\n\t\t\treturn function(e){\r\n\t\t\t\t//lang.clone fail to clone events, so we use a custom function\r\n\t\t\t\tlistener.call(this, clone(e));\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn listener;\r\n\t};\r\n});\r\n"]}
{"version":3,"sources":["dom-attr.js"],"names":["define","exports","has","lang","dom","style","prop","forcePropNames","innerHTML","textContent","className","htmlFor","value","attrNames","classname","htmlfor","tabindex","readonly","_hasAttr","node","name","attr","getAttributeNode","specified","lc","toLowerCase","names","byId","get","propName","forceProp","isFunction","attrName","getAttribute","set","arguments","length","x","setAttribute","remove","removeAttribute","getNodeProp"],"mappings":";;;;;;;AAAAA,QAAQ,UAAW,UAAW,eAAgB,QAAS,cAAe,cACpE,SAASC,QAASC,EAAKC,EAAMC,EAAKC,EAAOC,GAiB1C,IAAIC,GACFC,UAAW,EACXC,YAAY,EACZC,UAAW,EACXC,QAAST,EAAI,MACbU,MAAQ,GAETC,GAECC,UAAW,QACXC,QAAS,MAETC,SAAU,WACVC,SAAU,YAGZ,SAASC,EAASC,EAAMC,GACvB,IAAIC,EAAOF,EAAKG,kBAAoBH,EAAKG,iBAAiBF,GAC1D,QAASC,GAAQA,EAAKE,UAQvBtB,QAAQC,IAAM,SAAoCiB,EAAiBC,GAYlE,IAAII,EAAKJ,EAAKK,cACd,OAAOlB,EAAeD,EAAKoB,MAAMF,IAAOJ,IAASF,EAASd,EAAIuB,KAAKR,GAAON,EAAUW,IAAOJ,IAG5FnB,QAAQ2B,IAAM,SAAoCT,EAAiBC,GAsBlED,EAAOf,EAAIuB,KAAKR,GAChB,IAAIK,EAAKJ,EAAKK,cACbI,EAAWvB,EAAKoB,MAAMF,IAAOJ,EAC7BU,EAAYvB,EAAesB,GAC3BjB,EAAQO,EAAKU,GAEd,GAAGC,QAA6B,IAATlB,EAEtB,OAAOA,EAGR,GAAe,eAAZiB,EACF,OAAOvB,EAAKsB,IAAIT,EAAMU,GAGvB,GAAe,QAAZA,IAAuC,kBAATjB,GAAsBT,EAAK4B,WAAWnB,IAEtE,OAAOA,EAIR,IAAIoB,EAAWnB,EAAUW,IAAOJ,EAChC,OAAOF,EAASC,EAAMa,GAAYb,EAAKc,aAAaD,GAAY,MAGjE/B,QAAQiC,IAAM,SAAoCf,EAAwBC,EAAkBR,GA0C3F,GADAO,EAAOf,EAAIuB,KAAKR,GACO,GAApBgB,UAAUC,OAAY,CAExB,IAAI,IAAIC,KAAKjB,EACZnB,QAAQiC,IAAIf,EAAMkB,EAAGjB,EAAKiB,IAE3B,OAAOlB,EAER,IAAIK,EAAKJ,EAAKK,cACbI,EAAWvB,EAAKoB,MAAMF,IAAOJ,EAC7BU,EAAYvB,EAAesB,GAC5B,MAAe,SAAZA,GAAuC,iBAATjB,GAEhCP,EAAM6B,IAAIf,EAAMP,GACTO,GAELW,GAA6B,kBAATlB,GAAsBT,EAAK4B,WAAWnB,GACrDN,EAAK4B,IAAIf,EAAMC,EAAMR,IAG7BO,EAAKmB,aAAazB,EAAUW,IAAOJ,EAAMR,GAClCO,IAGRlB,QAAQsC,OAAS,SAAuCpB,EAAiBC,GAQxEhB,EAAIuB,KAAKR,GAAMqB,gBAAgB3B,EAAUO,EAAKK,gBAAkBL,IAGjEnB,QAAQwC,YAAc,SAAwCtB,EAAiBC,GAU9ED,EAAOf,EAAIuB,KAAKR,GAChB,IAAIK,EAAKJ,EAAKK,cAAeI,EAAWvB,EAAKoB,MAAMF,IAAOJ,EAC1D,GAAIS,KAAYV,GAAqB,QAAZU,EAExB,OAAOV,EAAKU,GAGb,IAAIG,EAAWnB,EAAUW,IAAOJ,EAChC,OAAOF,EAASC,EAAMa,GAAYb,EAAKc,aAAaD,GAAY","file":"../dom-attr.js","sourcesContent":["define([\"exports\", \"./sniff\", \"./_base/lang\", \"./dom\", \"./dom-style\", \"./dom-prop\"],\r\n\t\tfunction(exports, has, lang, dom, style, prop){\r\n\t// module:\r\n\t//\t\tdojo/dom-attr\r\n\t// summary:\r\n\t//\t\tThis module defines the core dojo DOM attributes API.\r\n\r\n\t// TODOC: summary not showing up in output see https://github.com/csnover/js-doc-parse/issues/42\r\n\r\n\t// =============================\r\n\t// Element attribute Functions\r\n\t// =============================\r\n\r\n\t// This module will be obsolete soon. Use dojo/prop instead.\r\n\r\n\t// dojo/dom-attr.get() should conform to http://www.w3.org/TR/DOM-Level-2-Core/\r\n\r\n\t// attribute-related functions (to be obsolete soon)\r\n\tvar forcePropNames = {\r\n\t\t\tinnerHTML:\t1,\r\n\t\t\ttextContent:1,\r\n\t\t\tclassName:\t1,\r\n\t\t\thtmlFor:\thas(\"ie\"),\r\n\t\t\tvalue:\t\t1\r\n\t\t},\r\n\t\tattrNames = {\r\n\t\t\t// original attribute names\r\n\t\t\tclassname: \"class\",\r\n\t\t\thtmlfor: \"for\",\r\n\t\t\t// for IE\r\n\t\t\ttabindex: \"tabIndex\",\r\n\t\t\treadonly: \"readOnly\"\r\n\t\t};\r\n\r\n\tfunction _hasAttr(node, name){\r\n\t\tvar attr = node.getAttributeNode && node.getAttributeNode(name);\r\n\t\treturn !!attr && attr.specified; // Boolean\r\n\t}\r\n\t\r\n\t// There is a difference in the presence of certain properties and their default values\r\n\t// between browsers. For example, on IE \"disabled\" is present on all elements,\r\n\t// but it is value is \"false\"; \"tabIndex\" of <div> returns 0 by default on IE, yet other browsers\r\n\t// can return -1.\r\n\r\n\texports.has = function hasAttr(/*DOMNode|String*/ node, /*String*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tReturns true if the requested attribute is specified on the\r\n\t\t//\t\tgiven element, and false otherwise.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to check\r\n\t\t// name: String\r\n\t\t//\t\tthe name of the attribute\r\n\t\t// returns: Boolean\r\n\t\t//\t\ttrue if the requested attribute is specified on the\r\n\t\t//\t\tgiven element, and false otherwise\r\n\r\n\t\tvar lc = name.toLowerCase();\r\n\t\treturn forcePropNames[prop.names[lc] || name] || _hasAttr(dom.byId(node), attrNames[lc] || name);\t// Boolean\r\n\t};\r\n\r\n\texports.get = function getAttr(/*DOMNode|String*/ node, /*String*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tGets an attribute on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized getting of attributes on DOM Nodes.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to get the attribute on\r\n\t\t// name: String\r\n\t\t//\t\tthe name of the attribute to get.\r\n\t\t// returns:\r\n\t\t//\t\tthe value of the requested attribute or null if that attribute does not have a specified or\r\n\t\t//\t\tdefault value;\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// get the current value of the \"foo\" attribute on a node\r\n\t\t//\t|\trequire([\"dojo/dom-attr\", \"dojo/dom\"], function(domAttr, dom){\r\n\t\t//\t|\t\tdomAttr.get(dom.byId(\"nodeId\"), \"foo\");\r\n\t\t//\t|\t\t// or we can just pass the id:\r\n\t\t//\t|\t\tdomAttr.get(\"nodeId\", \"foo\");\r\n\t\t//\t|\t});\t\r\n\t\t//\t|\t\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tvar lc = name.toLowerCase(),\r\n\t\t\tpropName = prop.names[lc] || name,\r\n\t\t\tforceProp = forcePropNames[propName],\r\n\t\t\tvalue = node[propName];\t\t// should we access this attribute via a property or via getAttribute()?\r\n\r\n\t\tif(forceProp && typeof value != \"undefined\"){\r\n\t\t\t// node's property\r\n\t\t\treturn value;\t// Anything\r\n\t\t}\r\n\t\t\r\n\t\tif(propName == \"textContent\"){\r\n\t\t\treturn prop.get(node, propName);\r\n\t\t}\r\n\t\t\r\n\t\tif(propName != \"href\" && (typeof value == \"boolean\" || lang.isFunction(value))){\r\n\t\t\t// node's property\r\n\t\t\treturn value;\t// Anything\r\n\t\t}\r\n\t\t// node's attribute\r\n\t\t// we need _hasAttr() here to guard against IE returning a default value\r\n\t\tvar attrName = attrNames[lc] || name;\r\n\t\treturn _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything\r\n\t};\r\n\r\n\texports.set = function setAttr(/*DOMNode|String*/ node, /*String|Object*/ name, /*String?*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tSets an attribute on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized setting of attributes on DOM Nodes.\r\n\t\t//\r\n\t\t//\t\tWhen passing functions as values, note that they will not be\r\n\t\t//\t\tdirectly assigned to slots on the node, but rather the default\r\n\t\t//\t\tbehavior will be removed and the new behavior will be added\r\n\t\t//\t\tusing `dojo.connect()`, meaning that event handler properties\r\n\t\t//\t\twill be normalized and that some caveats with regards to\r\n\t\t//\t\tnon-standard behaviors for onsubmit apply. Namely that you\r\n\t\t//\t\tshould cancel form submission using `dojo.stopEvent()` on the\r\n\t\t//\t\tpassed event object instead of returning a boolean value from\r\n\t\t//\t\tthe handler itself.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to set the attribute on\r\n\t\t// name: String|Object\r\n\t\t//\t\tthe name of the attribute to set, or a hash of key-value pairs to set.\r\n\t\t// value: String?\r\n\t\t//\t\tthe value to set for the attribute, if the name is a string.\r\n\t\t// returns:\r\n\t\t//\t\tthe DOM node\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// use attr() to set the tab index\r\n\t\t//\t|\trequire([\"dojo/dom-attr\"], function(domAttr){\r\n\t\t//\t|\t\tdomAttr.set(\"nodeId\", \"tabIndex\", 3);\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tSet multiple values at once, including event handlers:\r\n\t\t//\t|\trequire([\"dojo/dom-attr\"],\r\n\t\t//\t|\tfunction(domAttr){\r\n\t\t//\t|\t\tdomAttr.set(\"formId\", {\r\n\t\t//\t|\t\t\t\"foo\": \"bar\",\r\n\t\t//\t|\t\t\t\"tabIndex\": -1,\r\n\t\t//\t|\t\t\t\"method\": \"POST\"\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tif(arguments.length == 2){ // inline'd type check\r\n\t\t\t// the object form of setter: the 2nd argument is a dictionary\r\n\t\t\tfor(var x in name){\r\n\t\t\t\texports.set(node, x, name[x]);\r\n\t\t\t}\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tvar lc = name.toLowerCase(),\r\n\t\t\tpropName = prop.names[lc] || name,\r\n\t\t\tforceProp = forcePropNames[propName];\r\n\t\tif(propName == \"style\" && typeof value != \"string\"){ // inline'd type check\r\n\t\t\t// special case: setting a style\r\n\t\t\tstyle.set(node, value);\r\n\t\t\treturn node; // DomNode\r\n\t\t}\r\n\t\tif(forceProp || typeof value == \"boolean\" || lang.isFunction(value)){\r\n\t\t\treturn prop.set(node, name, value);\r\n\t\t}\r\n\t\t// node's attribute\r\n\t\tnode.setAttribute(attrNames[lc] || name, value);\r\n\t\treturn node; // DomNode\r\n\t};\r\n\r\n\texports.remove = function removeAttr(/*DOMNode|String*/ node, /*String*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tRemoves an attribute from an HTML element.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to remove the attribute from\r\n\t\t// name: String\r\n\t\t//\t\tthe name of the attribute to remove\r\n\r\n\t\tdom.byId(node).removeAttribute(attrNames[name.toLowerCase()] || name);\r\n\t};\r\n\r\n\texports.getNodeProp = function getNodeProp(/*DomNode|String*/ node, /*String*/ name){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an effective value of a property or an attribute.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to remove the attribute from\r\n\t\t// name: String\r\n\t\t//\t\tthe name of the attribute\r\n\t\t// returns:\r\n\t\t//\t\tthe value of the attribute\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tvar lc = name.toLowerCase(), propName = prop.names[lc] || name;\r\n\t\tif((propName in node) && propName != \"href\"){\r\n\t\t\t// node's property\r\n\t\t\treturn node[propName];\t// Anything\r\n\t\t}\r\n\t\t// node's attribute\r\n\t\tvar attrName = attrNames[lc] || name;\r\n\t\treturn _hasAttr(node, attrName) ? node.getAttribute(attrName) : null; // Anything\r\n\t};\r\n});\r\n"]}
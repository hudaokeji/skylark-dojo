{"version":3,"sources":["DeferredList.js"],"names":["define","dojo","Deferred","darray","DeferredList","list","fireOnOneCallback","fireOnOneErrback","consumeErrors","canceller","resultList","call","this","self","length","resolve","finished","forEach","item","i","addResult","succeeded","result","then","error","reject","prototype","gatherResults","deferredList","d","addCallback","results","ret","push"],"mappings":";;;;;;;AAAAA,QAAQ,iBAAkB,mBAAoB,iBAAkB,SAASC,EAAMC,EAAUC,GAkFzF,OA7EAF,EAAKG,aAAe,SAAmBC,EAAmBC,EAAgCC,EAA+BC,EAA6BC,GAmBrJ,IAAIC,KACJR,EAASS,KAAKC,MACd,IAAIC,EAAOD,KACQ,IAAhBP,EAAKS,QAAiBR,GACxBM,KAAKG,SAAS,OAEf,IAAIC,EAAW,EACfb,EAAOc,QAAQZ,EAAM,SAASa,EAAMC,GAkBnC,SAASC,EAAUC,EAAWC,GAC7BZ,EAAWS,IAAME,EAAWC,KAC5BN,IACgBX,EAAKS,QACpBD,EAAKE,QAAQL,GArBfQ,EAAKK,KAAK,SAASD,GACfhB,EACFO,EAAKE,SAASI,EAAGG,IAEjBF,GAAU,EAAME,IAEhB,SAASE,GAMV,GALGjB,EACFM,EAAKY,OAAOD,GAEZJ,GAAU,EAAOI,GAEfhB,EACF,OAAO,KAER,MAAMgB,OAYTvB,EAAKG,aAAasB,UAAY,IAAIxB,EAElCD,EAAKG,aAAasB,UAAUC,cAAgB,SAASC,GAUpD,IAAIC,EAAI,IAAI5B,EAAKG,aAAawB,GAAc,GAAO,GAAM,GAQzD,OAPAC,EAAEC,YAAY,SAASC,GACtB,IAAIC,KAIJ,OAHA7B,EAAOc,QAAQc,EAAS,SAAST,GAChCU,EAAIC,KAAKX,EAAO,MAEVU,IAEDH,GAGD5B,EAAKG","file":"../DeferredList.js","sourcesContent":["define([\"./_base/kernel\", \"./_base/Deferred\", \"./_base/array\"], function(dojo, Deferred, darray){\r\n\t// module:\r\n\t//\t\tdojo/DeferredList\r\n\r\n\r\ndojo.DeferredList = function(/*Array*/ list, /*Boolean?*/ fireOnOneCallback, /*Boolean?*/ fireOnOneErrback, /*Boolean?*/ consumeErrors, /*Function?*/ canceller){\r\n\t// summary:\r\n\t//\t\tDeprecated, use dojo/promise/all instead.\r\n\t//\t\tProvides event handling for a group of Deferred objects.\r\n\t// description:\r\n\t//\t\tDeferredList takes an array of existing deferreds and returns a new deferred of its own\r\n\t//\t\tthis new deferred will typically have its callback fired when all of the deferreds in\r\n\t//\t\tthe given list have fired their own deferreds.  The parameters `fireOnOneCallback` and\r\n\t//\t\tfireOnOneErrback, will fire before all the deferreds as appropriate\r\n\t// list:\r\n\t//\t\tThe list of deferreds to be synchronizied with this DeferredList\r\n\t// fireOnOneCallback:\r\n\t//\t\tWill cause the DeferredLists callback to be fired as soon as any\r\n\t//\t\tof the deferreds in its list have been fired instead of waiting until\r\n\t//\t\tthe entire list has finished\r\n\t// fireonOneErrback:\r\n\t//\t\tWill cause the errback to fire upon any of the deferreds errback\r\n\t// canceller:\r\n\t//\t\tA deferred canceller function, see dojo.Deferred\r\n\tvar resultList = [];\r\n\tDeferred.call(this);\r\n\tvar self = this;\r\n\tif(list.length === 0 && !fireOnOneCallback){\r\n\t\tthis.resolve([0, []]);\r\n\t}\r\n\tvar finished = 0;\r\n\tdarray.forEach(list, function(item, i){\r\n\t\titem.then(function(result){\r\n\t\t\tif(fireOnOneCallback){\r\n\t\t\t\tself.resolve([i, result]);\r\n\t\t\t}else{\r\n\t\t\t\taddResult(true, result);\r\n\t\t\t}\r\n\t\t},function(error){\r\n\t\t\tif(fireOnOneErrback){\r\n\t\t\t\tself.reject(error);\r\n\t\t\t}else{\r\n\t\t\t\taddResult(false, error);\r\n\t\t\t}\r\n\t\t\tif(consumeErrors){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tthrow error;\r\n\t\t});\r\n\t\tfunction addResult(succeeded, result){\r\n\t\t\tresultList[i] = [succeeded, result];\r\n\t\t\tfinished++;\r\n\t\t\tif(finished === list.length){\r\n\t\t\t\tself.resolve(resultList);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n};\r\ndojo.DeferredList.prototype = new Deferred();\r\n\r\ndojo.DeferredList.prototype.gatherResults = function(deferredList){\r\n\t// summary:\r\n\t//\t\tGathers the results of the deferreds for packaging\r\n\t//\t\tas the parameters to the Deferred Lists' callback\r\n\t// deferredList: dojo/DeferredList\r\n\t//\t\tThe deferred list from which this function gathers results.\r\n\t// returns: dojo/DeferredList\r\n\t//\t\tThe newly created deferred list which packs results as\r\n\t//\t\tparameters to its callback.\r\n\r\n\tvar d = new dojo.DeferredList(deferredList, false, true, false);\r\n\td.addCallback(function(results){\r\n\t\tvar ret = [];\r\n\t\tdarray.forEach(results, function(result){\r\n\t\t\tret.push(result[1]);\r\n\t\t});\r\n\t\treturn ret;\r\n\t});\r\n\treturn d;\r\n};\r\n\r\nreturn dojo.DeferredList;\r\n});\r\n"]}
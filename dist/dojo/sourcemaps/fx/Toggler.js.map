{"version":3,"sources":["fx/Toggler.js"],"names":["define","lang","declare","baseFx","aspect","node","showFunc","fadeIn","hideFunc","fadeOut","showDuration","hideDuration","constructor","args","_t","this","mixin","_showArgs","duration","showAnim","_hideArgs","hideAnim","after","hitch","show","delay","play","hide"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAgB,mBAAmB,cAAe,aACxD,SAASC,EAAMC,EAASC,EAAQC,GAIlC,OAAOF,EAAQ,kBAAmB,MAuBjCG,KAAM,KAINC,SAAUH,EAAOI,OAIjBC,SAAUL,EAAOM,QAIjBC,aAAc,IAIdC,aAAc,IAoBdC,YAAa,SAASC,GACrB,IAAIC,EAAKC,KAETd,EAAKe,MAAMF,EAAID,GACfC,EAAGT,KAAOQ,EAAKR,KACfS,EAAGG,UAAYhB,EAAKe,SAAUH,GAC9BC,EAAGG,UAAUZ,KAAOS,EAAGT,KACvBS,EAAGG,UAAUC,SAAWJ,EAAGJ,aAC3BI,EAAGK,SAAWL,EAAGR,SAASQ,EAAGG,WAE7BH,EAAGM,UAAYnB,EAAKe,SAAUH,GAC9BC,EAAGM,UAAUf,KAAOS,EAAGT,KACvBS,EAAGM,UAAUF,SAAWJ,EAAGH,aAC3BG,EAAGO,SAAWP,EAAGN,SAASM,EAAGM,WAE7BhB,EAAOkB,MAAMR,EAAGK,SAAU,cAAelB,EAAKsB,MAAMT,EAAGO,SAAU,QAAQ,IAAO,GAChFjB,EAAOkB,MAAMR,EAAGO,SAAU,cAAepB,EAAKsB,MAAMT,EAAGK,SAAU,QAAQ,IAAO,IAGjFK,KAAM,SAASC,GAKd,OAAOV,KAAKI,SAASO,KAAKD,GAAS,IAGpCE,KAAM,SAASF,GAKd,OAAOV,KAAKM,SAASK,KAAKD,GAAS","file":"../../fx/Toggler.js","sourcesContent":["define([\"../_base/lang\",\"../_base/declare\",\"../_base/fx\", \"../aspect\"],\r\n  function(lang, declare, baseFx, aspect){\r\n\t// module:\r\n\t//\t\tdojo/fx/Toggler\r\n\r\nreturn declare(\"dojo.fx.Toggler\", null, {\r\n\t// summary:\r\n\t//\t\tA simple `dojo.Animation` toggler API.\r\n\t// description:\r\n\t//\t\tclass constructor for an animation toggler. It accepts a packed\r\n\t//\t\tset of arguments about what type of animation to use in each\r\n\t//\t\tdirection, duration, etc. All available members are mixed into\r\n\t//\t\tthese animations from the constructor (for example, `node`,\r\n\t//\t\t`showDuration`, `hideDuration`).\r\n\t// example:\r\n\t//\t|\tvar t = new dojo/fx/Toggler({\r\n\t//\t|\t\tnode: \"nodeId\",\r\n\t//\t|\t\tshowDuration: 500,\r\n\t//\t|\t\t// hideDuration will default to \"200\"\r\n\t//\t|\t\tshowFunc: dojo/fx/wipeIn,\r\n\t//\t|\t\t// hideFunc will default to \"fadeOut\"\r\n\t//\t|\t});\r\n\t//\t|\tt.show(100); // delay showing for 100ms\r\n\t//\t|\t// ...time passes...\r\n\t//\t|\tt.hide();\r\n\r\n\t// node: DomNode\r\n\t//\t\tthe node to target for the showing and hiding animations\r\n\tnode: null,\r\n\r\n\t// showFunc: Function\r\n\t//\t\tThe function that returns the `dojo.Animation` to show the node\r\n\tshowFunc: baseFx.fadeIn,\r\n\r\n\t// hideFunc: Function\r\n\t//\t\tThe function that returns the `dojo.Animation` to hide the node\r\n\thideFunc: baseFx.fadeOut,\r\n\r\n\t// showDuration:\r\n\t//\t\tTime in milliseconds to run the show Animation\r\n\tshowDuration: 200,\r\n\r\n\t// hideDuration:\r\n\t//\t\tTime in milliseconds to run the hide Animation\r\n\thideDuration: 200,\r\n\r\n\t// FIXME: need a policy for where the toggler should \"be\" the next\r\n\t// time show/hide are called if we're stopped somewhere in the\r\n\t// middle.\r\n\t// FIXME: also would be nice to specify individual showArgs/hideArgs mixed into\r\n\t// each animation individually.\r\n\t// FIXME: also would be nice to have events from the animations exposed/bridged\r\n\r\n\t/*=====\r\n\t_showArgs: null,\r\n\t_showAnim: null,\r\n\r\n\t_hideArgs: null,\r\n\t_hideAnim: null,\r\n\r\n\t_isShowing: false,\r\n\t_isHiding: false,\r\n\t=====*/\r\n\r\n\tconstructor: function(args){\r\n\t\tvar _t = this;\r\n\r\n\t\tlang.mixin(_t, args);\r\n\t\t_t.node = args.node;\r\n\t\t_t._showArgs = lang.mixin({}, args);\r\n\t\t_t._showArgs.node = _t.node;\r\n\t\t_t._showArgs.duration = _t.showDuration;\r\n\t\t_t.showAnim = _t.showFunc(_t._showArgs);\r\n\r\n\t\t_t._hideArgs = lang.mixin({}, args);\r\n\t\t_t._hideArgs.node = _t.node;\r\n\t\t_t._hideArgs.duration = _t.hideDuration;\r\n\t\t_t.hideAnim = _t.hideFunc(_t._hideArgs);\r\n\r\n\t\taspect.after(_t.showAnim, \"beforeBegin\", lang.hitch(_t.hideAnim, \"stop\", true), true);\r\n\t\taspect.after(_t.hideAnim, \"beforeBegin\", lang.hitch(_t.showAnim, \"stop\", true), true);\r\n\t},\r\n\r\n\tshow: function(delay){\r\n\t\t// summary:\r\n\t\t//\t\tToggle the node to showing\r\n\t\t// delay: Integer?\r\n\t\t//\t\tAmount of time to stall playing the show animation\r\n\t\treturn this.showAnim.play(delay || 0);\r\n\t},\r\n\r\n\thide: function(delay){\r\n\t\t// summary:\r\n\t\t//\t\tToggle the node to hidden\r\n\t\t// delay: Integer?\r\n\t\t//\t\tAmount of time to stall playing the hide animation\r\n\t\treturn this.hideAnim.play(delay || 0);\r\n\t}\r\n});\r\n\r\n});\r\n"]}
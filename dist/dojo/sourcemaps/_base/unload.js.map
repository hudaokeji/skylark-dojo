{"version":3,"sources":["_base/unload.js"],"names":["define","dojo","lang","on","win","window","unload","addOnWindowUnload","obj","functionName","windowUnloaded","hitch","addOnUnload"],"mappings":";;;;;;;AAAAA,QAAQ,WAAY,SAAU,SAAU,SAASC,EAAMC,EAAMC,GAK7D,IAAIC,EAAMC,OAENC,GAMHC,kBAAmB,SAA8BC,EAA0BC,GAyBrER,EAAKS,gBACTP,EAAGC,EAAK,SAAWH,EAAKS,eAAiB,cAY1CP,EAAGC,EAAK,SAAUF,EAAKS,MAAMH,EAAKC,KAGnCG,YAAa,SAA+BJ,EAA0BC,GA+BrEN,EAAGC,EAAK,eAAgBF,EAAKS,MAAMH,EAAKC,MAO1C,OAHAR,EAAKM,kBAAoBD,EAAOC,kBAChCN,EAAKW,YAAcN,EAAOM,YAEnBN","file":"../../_base/unload.js","sourcesContent":["define([\"./kernel\", \"./lang\", \"../on\"], function(dojo, lang, on){\r\n\r\n// module:\r\n//\t\tdojo/unload\r\n\r\nvar win = window;\r\n\r\nvar unload = {\r\n\t// summary:\r\n\t//\t\tThis module contains the document and window unload detection API.\r\n\t//\t\tThis module is deprecated.  Use on(window, \"unload\", func)\r\n\t//\t\tand on(window, \"beforeunload\", func) instead.\r\n\r\n\taddOnWindowUnload: function(/*Object|Function?*/ obj, /*String|Function?*/ functionName){\r\n\t\t// summary:\r\n\t\t//\t\tRegisters a function to be triggered when window.onunload fires.\r\n\t\t//\t\tDeprecated, use on(window, \"unload\", lang.hitch(obj, functionName)) instead.\r\n\t\t// description:\r\n\t\t//\t\tThe first time that addOnWindowUnload is called Dojo\r\n\t\t//\t\twill register a page listener to trigger your unload\r\n\t\t//\t\thandler with. Note that registering these handlers may\r\n\t\t//\t\tdestroy \"fastback\" page caching in browsers that support\r\n\t\t//\t\tit. Be careful trying to modify the DOM or access\r\n\t\t//\t\tJavaScript properties during this phase of page unloading:\r\n\t\t//\t\tthey may not always be available. Consider\r\n\t\t//\t\taddOnUnload() if you need to modify the DOM or do\r\n\t\t//\t\theavy JavaScript work since it fires at the equivalent of\r\n\t\t//\t\tthe page's \"onbeforeunload\" event.\r\n\t\t// example:\r\n\t\t//\t|\tvar afunc = function() {console.log(\"global function\");};\r\n\t\t//\t|\trequire([\"dojo/_base/unload\"], function(unload) {\r\n\t\t//\t|\t\tvar foo = {bar: function(){ console.log(\"bar unloading...\");}, \r\n\t\t//\t|\t\t           data: \"mydata\"};\r\n\t\t//\t|\t\tunload.addOnWindowUnload(afunc);\r\n\t\t//\t|\t\tunload.addOnWindowUnload(foo, \"bar\");\r\n\t\t//\t|\t\tunload.addOnWindowUnload(foo, function(){console.log(\"\", this.data);});\r\n\t\t//\t|\t});\r\n\r\n\t\tif (!dojo.windowUnloaded){\r\n\t\t\ton(win, \"unload\", (dojo.windowUnloaded = function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tsignal fired by impending window destruction. You may use\r\n\t\t\t\t//\t\tdojo.addOnWindowUnload() to register a listener for this\r\n\t\t\t\t//\t\tevent. NOTE: if you wish to dojo.connect() to this method\r\n\t\t\t\t//\t\tto perform page/application cleanup, be aware that this\r\n\t\t\t\t//\t\tevent WILL NOT fire if no handler has been registered with\r\n\t\t\t\t//\t\taddOnWindowUnload(). This behavior started in Dojo 1.3.\r\n\t\t\t\t//\t\tPrevious versions always triggered windowUnloaded(). See\r\n\t\t\t\t//\t\taddOnWindowUnload for more info.\r\n\t\t\t}));\r\n\t\t}\r\n\t\ton(win, \"unload\", lang.hitch(obj, functionName));\r\n\t},\r\n\r\n\taddOnUnload: function(/*Object?|Function?*/ obj, /*String|Function?*/ functionName){\r\n\t\t// summary:\r\n\t\t//\t\tRegisters a function to be triggered when the page unloads.\r\n\t\t//\t\tDeprecated, use on(window, \"beforeunload\", lang.hitch(obj, functionName)) instead.\r\n\t\t// description:\r\n\t\t//\t\tThe first time that addOnUnload is called Dojo will\r\n\t\t//\t\tregister a page listener to trigger your unload handler\r\n\t\t//\t\twith.\r\n\t\t//\r\n\t\t//\t\tIn a browser environment, the functions will be triggered\r\n\t\t//\t\tduring the window.onbeforeunload event. Be careful of doing\r\n\t\t//\t\ttoo much work in an unload handler. onbeforeunload can be\r\n\t\t//\t\ttriggered if a link to download a file is clicked, or if\r\n\t\t//\t\tthe link is a javascript: link. In these cases, the\r\n\t\t//\t\tonbeforeunload event fires, but the document is not\r\n\t\t//\t\tactually destroyed. So be careful about doing destructive\r\n\t\t//\t\toperations in a dojo.addOnUnload callback.\r\n\t\t//\r\n\t\t//\t\tFurther note that calling dojo.addOnUnload will prevent\r\n\t\t//\t\tbrowsers from using a \"fast back\" cache to make page\r\n\t\t//\t\tloading via back button instantaneous.\r\n\t\t// example:\r\n\t\t//\t|\tvar afunc = function() {console.log(\"global function\");};\r\n\t\t//\t|\trequire([\"dojo/_base/unload\"], function(unload) {\r\n\t\t//\t|\t\tvar foo = {bar: function(){ console.log(\"bar unloading...\");}, \r\n\t\t//\t|\t\t           data: \"mydata\"};\r\n\t\t//\t|\t\tunload.addOnUnload(afunc);\r\n\t\t//\t|\t\tunload.addOnUnload(foo, \"bar\");\r\n\t\t//\t|\t\tunload.addOnUnload(foo, function(){console.log(\"\", this.data);});\r\n\t\t//\t|\t});\r\n\r\n\t\ton(win, \"beforeunload\", lang.hitch(obj, functionName));\r\n\t}\r\n};\r\n\r\ndojo.addOnWindowUnload = unload.addOnWindowUnload;\r\ndojo.addOnUnload = unload.addOnUnload;\r\n\r\nreturn unload;\r\n\r\n});\r\n"]}
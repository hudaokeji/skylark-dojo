{"version":3,"sources":["_base/json.js"],"names":["define","dojo","json","fromJson","js","eval","_escapeString","stringify","toJsonIndentStr","toJson","it","prettyPrint","key","value","tf","__json__","call"],"mappings":";;;;;;;AAAAA,QAAQ,WAAY,WAAY,SAASC,KAAMC,MAyF/C,OA7EAD,KAAKE,SAAW,SAAoBC,IAanC,OAAOC,KAAK,IAAMD,GAAK,MAWxBH,KAAKK,cAAgBJ,KAAKK,UAE1BN,KAAKO,gBAAkB,KACvBP,KAAKQ,OAAS,SAAoBC,EAAiBC,GAuClD,OAAOT,KAAKK,UAAUG,EAAI,SAASE,EAAKC,GACvC,GAAGA,EAAM,CACR,IAAIC,EAAKD,EAAME,UAAUF,EAAMX,KAC/B,GAAgB,mBAANY,EACT,OAAOA,EAAGE,KAAKH,GAGjB,OAAOA,GACLF,GAAeV,KAAKO,kBAGjBP","file":"../../_base/json.js","sourcesContent":["define([\"./kernel\", \"../json\"], function(dojo, json){\r\n\r\n// module:\r\n//\t\tdojo/_base/json\r\n\r\n/*=====\r\nreturn {\r\n\t// summary:\r\n\t//\t\tThis module defines the dojo JSON API.\r\n};\r\n=====*/\r\n\r\ndojo.fromJson = function(/*String*/ js){\r\n\t// summary:\r\n\t//\t\tParses a JavaScript expression and returns a JavaScript value.\r\n\t// description:\r\n\t//\t\tThrows for invalid JavaScript expressions. It does not use a strict JSON parser. It\r\n\t//\t\talways delegates to eval(). The content passed to this method must therefore come\r\n\t//\t\tfrom a trusted source.\r\n\t//\t\tIt is recommend that you use dojo/json's parse function for an\r\n\t//\t\timplementation uses the (faster) native JSON parse when available.\r\n\t// js:\r\n\t//\t\ta string literal of a JavaScript expression, for instance:\r\n\t//\t\t`'{ \"foo\": [ \"bar\", 1, { \"baz\": \"thud\" } ] }'`\r\n\r\n\treturn eval(\"(\" + js + \")\"); // Object\r\n};\r\n\r\n/*=====\r\ndojo._escapeString = function(){\r\n\t// summary:\r\n\t//\t\tAdds escape sequences for non-visual characters, double quote and\r\n\t//\t\tbackslash and surrounds with double quotes to form a valid string\r\n\t//\t\tliteral.\r\n};\r\n=====*/\r\ndojo._escapeString = json.stringify; // just delegate to json.stringify\r\n\r\ndojo.toJsonIndentStr = \"\\t\";\r\ndojo.toJson = function(/*Object*/ it, /*Boolean?*/ prettyPrint){\r\n\t// summary:\r\n\t//\t\tReturns a [JSON](http://json.org) serialization of an object.\r\n\t// description:\r\n\t//\t\tReturns a [JSON](http://json.org) serialization of an object.\r\n\t//\t\tNote that this doesn't check for infinite recursion, so don't do that!\r\n\t//\t\tIt is recommend that you use dojo/json's stringify function for an lighter\r\n\t//\t\tand faster implementation that matches the native JSON API and uses the\r\n\t//\t\tnative JSON serializer when available.\r\n\t// it:\r\n\t//\t\tan object to be serialized. Objects may define their own\r\n\t//\t\tserialization via a special \"__json__\" or \"json\" function\r\n\t//\t\tproperty. If a specialized serializer has been defined, it will\r\n\t//\t\tbe used as a fallback.\r\n\t//\t\tNote that in 1.6, toJson would serialize undefined, but this no longer supported\r\n\t//\t\tsince it is not supported by native JSON serializer.\r\n\t// prettyPrint:\r\n\t//\t\tif true, we indent objects and arrays to make the output prettier.\r\n\t//\t\tThe variable `dojo.toJsonIndentStr` is used as the indent string --\r\n\t//\t\tto use something other than the default (tab), change that variable\r\n\t//\t\tbefore calling dojo.toJson().\r\n\t//\t\tNote that if native JSON support is available, it will be used for serialization,\r\n\t//\t\tand native implementations vary on the exact spacing used in pretty printing.\r\n\t// returns:\r\n\t//\t\tA JSON string serialization of the passed-in object.\r\n\t// example:\r\n\t//\t\tsimple serialization of a trivial object\r\n\t//\t\t|\tvar jsonStr = dojo.toJson({ howdy: \"stranger!\", isStrange: true });\r\n\t//\t\t|\tdoh.is('{\"howdy\":\"stranger!\",\"isStrange\":true}', jsonStr);\r\n\t// example:\r\n\t//\t\ta custom serializer for an objects of a particular class:\r\n\t//\t\t|\tdojo.declare(\"Furby\", null, {\r\n\t//\t\t|\t\tfurbies: \"are strange\",\r\n\t//\t\t|\t\tfurbyCount: 10,\r\n\t//\t\t|\t\t__json__: function(){\r\n\t//\t\t|\t\t},\r\n\t//\t\t|\t});\r\n\r\n\t// use dojo/json\r\n\treturn json.stringify(it, function(key, value){\r\n\t\tif(value){\r\n\t\t\tvar tf = value.__json__||value.json;\r\n\t\t\tif(typeof tf == \"function\"){\r\n\t\t\t\treturn tf.call(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}, prettyPrint && dojo.toJsonIndentStr);\t// String\r\n};\r\n\r\nreturn dojo;\r\n});\r\n"]}
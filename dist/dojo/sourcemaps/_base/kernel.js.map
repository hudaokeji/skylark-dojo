{"version":3,"sources":["_base/kernel.js"],"names":["define","has","config","require","module","i","p","item","global","this","dijit","dojox","dojo","scopeMap","packageMap","map","id","match","_scopeName","noGlobals","baseUrl","isAsync","async","locale","rev","version","major","minor","patch","flag","revision","NaN","toString","v","add","Function","exit","exitcode","quit","console","tn","cn","tcn","a","Array","prototype","slice","call","arguments","unshift","join","_fake","isDebug","deprecated","experimental","behaviour","extra","removal","message","warn","moduleName","modulePaths","paths","replace","moduleUrl","url","result","toUrl","_hasResource"],"mappings":"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","file":"../../_base/kernel.js","sourcesContent":["define([\"../has\", \"./config\", \"require\", \"module\"], function(has, config, require, module){\r\n\t// module:\r\n\t//\t\tdojo/_base/kernel\r\n\r\n\t// This module is the foundational module of the dojo boot sequence; it defines the dojo object.\r\n\r\n\tvar\r\n\t\t// loop variables for this module\r\n\t\ti, p,\r\n\r\n\t\t// create dojo, dijit, and dojox\r\n\t\t// FIXME: in 2.0 remove dijit, dojox being created by dojo\r\n\t\tglobal = (function () { return this; })(),\r\n\t\tdijit = {},\r\n\t\tdojox = {},\r\n\t\tdojo = {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis module is the foundational module of the dojo boot sequence; it defines the dojo object.\r\n\r\n\t\t\t// notice dojo takes ownership of the value of the config module\r\n\t\t\tconfig:config,\r\n\t\t\tglobal:global,\r\n\t\t\tdijit:dijit,\r\n\t\t\tdojox:dojox\r\n\t\t};\r\n\r\n\r\n\t// Configure the scope map. For a 100% AMD application, the scope map is not needed other than to provide\r\n\t// a _scopeName property for the dojo, dijit, and dojox root object so those packages can create\r\n\t// unique names in the global space.\r\n\t//\r\n\t// Built, legacy modules use the scope map to allow those modules to be expressed as if dojo, dijit, and dojox,\r\n\t// where global when in fact they are either global under different names or not global at all. In v1.6-, the\r\n\t// config variable \"scopeMap\" was used to map names as used within a module to global names. This has been\r\n\t// subsumed by the AMD map configuration variable which can relocate packages to different names. For backcompat,\r\n\t// only the \"*\" mapping is supported. See http://livedocs.dojotoolkit.org/developer/design/loader#legacy-cross-domain-mode for details.\r\n\t//\r\n\t// The following computations contort the packageMap for this dojo instance into a scopeMap.\r\n\tvar scopeMap =\r\n\t\t\t// a map from a name used in a legacy module to the (global variable name, object addressed by that name)\r\n\t\t\t// always map dojo, dijit, and dojox\r\n\t\t\t{\r\n\t\t\t\tdojo:[\"dojo\", dojo],\r\n\t\t\t\tdijit:[\"dijit\", dijit],\r\n\t\t\t\tdojox:[\"dojox\", dojox]\r\n\t\t\t},\r\n\r\n\t\tpackageMap =\r\n\t\t\t// the package map for this dojo instance; note, a foreign loader or no pacakgeMap results in the above default config\r\n\t\t\t(require.map && require.map[module.id.match(/[^\\/]+/)[0]]),\r\n\r\n\t\titem;\r\n\r\n\r\n\t// process all mapped top-level names for this instance of dojo\r\n\tfor(p in packageMap){\r\n\t\tif(scopeMap[p]){\r\n\t\t\t// mapped dojo, dijit, or dojox\r\n\t\t\tscopeMap[p][0] = packageMap[p];\r\n\t\t}else{\r\n\t\t\t// some other top-level name\r\n\t\t\tscopeMap[p] = [packageMap[p], {}];\r\n\t\t}\r\n\t}\r\n\r\n\t// publish those names to _scopeName and, optionally, the global namespace\r\n\tfor(p in scopeMap){\r\n\t\titem = scopeMap[p];\r\n\t\titem[1]._scopeName = item[0];\r\n\t\tif(!config.noGlobals){\r\n\t\t\tglobal[item[0]] = item[1];\r\n\t\t}\r\n\t}\r\n\tdojo.scopeMap = scopeMap;\r\n\r\n\t/*===== dojo.__docParserConfigureScopeMap(scopeMap); =====*/\r\n\r\n\t// FIXME: dojo.baseUrl and dojo.config.baseUrl should be deprecated\r\n\tdojo.baseUrl = dojo.config.baseUrl = require.baseUrl;\r\n\tdojo.isAsync = !has(\"dojo-loader\") || require.async;\r\n\tdojo.locale = config.locale;\r\n\r\n\tvar rev = \"$Rev: f4fef70 $\".match(/[0-9a-f]{7,}/);\r\n\tdojo.version = {\r\n\t\t// summary:\r\n\t\t//\t\tVersion number of the Dojo Toolkit\r\n\t\t// description:\r\n\t\t//\t\tHash about the version, including\r\n\t\t//\r\n\t\t//\t\t- major: Integer: Major version. If total version is \"1.2.0beta1\", will be 1\r\n\t\t//\t\t- minor: Integer: Minor version. If total version is \"1.2.0beta1\", will be 2\r\n\t\t//\t\t- patch: Integer: Patch version. If total version is \"1.2.0beta1\", will be 0\r\n\t\t//\t\t- flag: String: Descriptor flag. If total version is \"1.2.0beta1\", will be \"beta1\"\r\n\t\t//\t\t- revision: Number: The Git rev from which dojo was pulled\r\n\r\n\t\tmajor: 1, minor: 10, patch: 4, flag: \"\",\r\n\t\trevision: rev ? rev[0] : NaN,\r\n\t\ttoString: function(){\r\n\t\t\tvar v = dojo.version;\r\n\t\t\treturn v.major + \".\" + v.minor + \".\" + v.patch + v.flag + \" (\" + v.revision + \")\";\t// String\r\n\t\t}\r\n\t};\r\n\r\n\t// If has(\"extend-dojo\") is truthy, then as a dojo module is defined it should push it's definitions\r\n\t// into the dojo object, and conversely. In 2.0, it will likely be unusual to augment another object\r\n\t// as a result of defining a module. This has feature gives a way to force 2.0 behavior as the code\r\n\t// is migrated. Absent specific advice otherwise, set extend-dojo to truthy.\r\n\thas.add(\"extend-dojo\", 1);\r\n\r\n\r\n\t(Function(\"d\", \"d.eval = function(){return d.global.eval ? d.global.eval(arguments[0]) : eval(arguments[0]);}\"))(dojo);\r\n\t/*=====\r\n\tdojo.eval = function(scriptText){\r\n\t\t// summary:\r\n\t\t//\t\tA legacy method created for use exclusively by internal Dojo methods. Do not use this method\r\n\t\t//\t\tdirectly unless you understand its possibly-different implications on the platforms your are targeting.\r\n\t\t// description:\r\n\t\t//\t\tMakes an attempt to evaluate scriptText in the global scope. The function works correctly for browsers\r\n\t\t//\t\tthat support indirect eval.\r\n\t\t//\r\n\t\t//\t\tAs usual, IE does not. On IE, the only way to implement global eval is to\r\n\t\t//\t\tuse execScript. Unfortunately, execScript does not return a value and breaks some current usages of dojo.eval.\r\n\t\t//\t\tThis implementation uses the technique of executing eval in the scope of a function that is a single scope\r\n\t\t//\t\tframe below the global scope; thereby coming close to the global scope. Note carefully that\r\n\t\t//\r\n\t\t//\t\tdojo.eval(\"var pi = 3.14;\");\r\n\t\t//\r\n\t\t//\t\twill define global pi in non-IE environments, but define pi only in a temporary local scope for IE. If you want\r\n\t\t//\t\tto define a global variable using dojo.eval, write something like\r\n\t\t//\r\n\t\t//\t\tdojo.eval(\"window.pi = 3.14;\")\r\n\t\t// scriptText:\r\n\t\t//\t\tThe text to evaluation.\r\n\t\t// returns:\r\n\t\t//\t\tThe result of the evaluation. Often `undefined`\r\n\t};\r\n\t=====*/\r\n\r\n\r\n\tif(has(\"host-rhino\")){\r\n\t\tdojo.exit = function(exitcode){\r\n\t\t\tquit(exitcode);\r\n\t\t};\r\n\t}else{\r\n\t\tdojo.exit = function(){\r\n\t\t};\r\n\t}\r\n\r\n\thas.add(\"dojo-guarantee-console\",\r\n\t\t// ensure that console.log, console.warn, etc. are defined\r\n\t\t1\r\n\t);\r\n\tif(has(\"dojo-guarantee-console\")){\r\n\t\ttypeof console != \"undefined\" || (console = {});\r\n\t\t//\tBe careful to leave 'log' always at the end\r\n\t\tvar cn = [\r\n\t\t\t\"assert\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\",\r\n\t\t\t\"groupEnd\", \"info\", \"profile\", \"profileEnd\", \"time\", \"timeEnd\",\r\n\t\t\t\"trace\", \"warn\", \"log\"\r\n\t\t];\r\n\t\tvar tn;\r\n\t\ti = 0;\r\n\t\twhile((tn = cn[i++])){\r\n\t\t\tif(!console[tn]){\r\n\t\t\t\t(function(){\r\n\t\t\t\t\tvar tcn = tn + \"\";\r\n\t\t\t\t\tconsole[tcn] = ('log' in console) ? function(){\r\n\t\t\t\t\t\tvar a = Array.prototype.slice.call(arguments);\r\n\t\t\t\t\t\ta.unshift(tcn + \":\");\r\n\t\t\t\t\t\tconsole[\"log\"](a.join(\" \"));\r\n\t\t\t\t\t} : function(){};\r\n\t\t\t\t\tconsole[tcn]._fake = true;\r\n\t\t\t\t})();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thas.add(\"dojo-debug-messages\",\r\n\t\t// include dojo.deprecated/dojo.experimental implementations\r\n\t\t!!config.isDebug\r\n\t);\r\n\tdojo.deprecated = dojo.experimental =  function(){};\r\n\tif(has(\"dojo-debug-messages\")){\r\n\t\tdojo.deprecated = function(/*String*/ behaviour, /*String?*/ extra, /*String?*/ removal){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLog a debug message to indicate that a behavior has been\r\n\t\t\t//\t\tdeprecated.\r\n\t\t\t// behaviour: String\r\n\t\t\t//\t\tThe API or behavior being deprecated. Usually in the form\r\n\t\t\t//\t\tof \"myApp.someFunction()\".\r\n\t\t\t// extra: String?\r\n\t\t\t//\t\tText to append to the message. Often provides advice on a\r\n\t\t\t//\t\tnew function or facility to achieve the same goal during\r\n\t\t\t//\t\tthe deprecation period.\r\n\t\t\t// removal: String?\r\n\t\t\t//\t\tText to indicate when in the future the behavior will be\r\n\t\t\t//\t\tremoved. Usually a version number.\r\n\t\t\t// example:\r\n\t\t\t//\t| dojo.deprecated(\"myApp.getTemp()\", \"use myApp.getLocaleTemp() instead\", \"1.0\");\r\n\r\n\t\t\tvar message = \"DEPRECATED: \" + behaviour;\r\n\t\t\tif(extra){ message += \" \" + extra; }\r\n\t\t\tif(removal){ message += \" -- will be removed in version: \" + removal; }\r\n\t\t\tconsole.warn(message);\r\n\t\t};\r\n\r\n\t\tdojo.experimental = function(/* String */ moduleName, /* String? */ extra){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMarks code as experimental.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis can be used to mark a function, file, or module as\r\n\t\t\t//\t\texperimental.\t Experimental code is not ready to be used, and the\r\n\t\t\t//\t\tAPIs are subject to change without notice.\tExperimental code may be\r\n\t\t\t//\t\tcompleted deleted without going through the normal deprecation\r\n\t\t\t//\t\tprocess.\r\n\t\t\t// moduleName: String\r\n\t\t\t//\t\tThe name of a module, or the name of a module file or a specific\r\n\t\t\t//\t\tfunction\r\n\t\t\t// extra: String?\r\n\t\t\t//\t\tsome additional message for the user\r\n\t\t\t// example:\r\n\t\t\t//\t| dojo.experimental(\"dojo.data.Result\");\r\n\t\t\t// example:\r\n\t\t\t//\t| dojo.experimental(\"dojo.weather.toKelvin()\", \"PENDING approval from NOAA\");\r\n\r\n\t\t\tvar message = \"EXPERIMENTAL: \" + moduleName + \" -- APIs subject to change without notice.\";\r\n\t\t\tif(extra){ message += \" \" + extra; }\r\n\t\t\tconsole.warn(message);\r\n\t\t};\r\n\t}\r\n\r\n\thas.add(\"dojo-modulePaths\",\r\n\t\t// consume dojo.modulePaths processing\r\n\t\t1\r\n\t);\r\n\tif(has(\"dojo-modulePaths\")){\r\n\t\t// notice that modulePaths won't be applied to any require's before the dojo/_base/kernel factory is run;\r\n\t\t// this is the v1.6- behavior.\r\n\t\tif(config.modulePaths){\r\n\t\t\tdojo.deprecated(\"dojo.modulePaths\", \"use paths configuration\");\r\n\t\t\tvar paths = {};\r\n\t\t\tfor(p in config.modulePaths){\r\n\t\t\t\tpaths[p.replace(/\\./g, \"/\")] = config.modulePaths[p];\r\n\t\t\t}\r\n\t\t\trequire({paths:paths});\r\n\t\t}\r\n\t}\r\n\r\n\thas.add(\"dojo-moduleUrl\",\r\n\t\t// include dojo.moduleUrl\r\n\t\t1\r\n\t);\r\n\tif(has(\"dojo-moduleUrl\")){\r\n\t\tdojo.moduleUrl = function(/*String*/module, /*String?*/url){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a URL relative to a module.\r\n\t\t\t// example:\r\n\t\t\t//\t|\tvar pngPath = dojo.moduleUrl(\"acme\",\"images/small.png\");\r\n\t\t\t//\t|\tconsole.dir(pngPath); // list the object properties\r\n\t\t\t//\t|\t// create an image and set it's source to pngPath's value:\r\n\t\t\t//\t|\tvar img = document.createElement(\"img\");\r\n\t\t\t//\t|\timg.src = pngPath;\r\n\t\t\t//\t|\t// add our image to the document\r\n\t\t\t//\t|\tdojo.body().appendChild(img);\r\n\t\t\t// example:\r\n\t\t\t//\t\tyou may de-reference as far as you like down the package\r\n\t\t\t//\t\thierarchy.  This is sometimes handy to avoid lengthy relative\r\n\t\t\t//\t\turls or for building portable sub-packages. In this example,\r\n\t\t\t//\t\tthe `acme.widget` and `acme.util` directories may be located\r\n\t\t\t//\t\tunder different roots (see `dojo.registerModulePath`) but the\r\n\t\t\t//\t\tthe modules which reference them can be unaware of their\r\n\t\t\t//\t\trelative locations on the filesystem:\r\n\t\t\t//\t|\t// somewhere in a configuration block\r\n\t\t\t//\t|\tdojo.registerModulePath(\"acme.widget\", \"../../acme/widget\");\r\n\t\t\t//\t|\tdojo.registerModulePath(\"acme.util\", \"../../util\");\r\n\t\t\t//\t|\r\n\t\t\t//\t|\t// ...\r\n\t\t\t//\t|\r\n\t\t\t//\t|\t// code in a module using acme resources\r\n\t\t\t//\t|\tvar tmpltPath = dojo.moduleUrl(\"acme.widget\",\"templates/template.html\");\r\n\t\t\t//\t|\tvar dataPath = dojo.moduleUrl(\"acme.util\",\"resources/data.json\");\r\n\r\n\t\t\tdojo.deprecated(\"dojo.moduleUrl()\", \"use require.toUrl\", \"2.0\");\r\n\r\n\t\t\t// require.toUrl requires a filetype; therefore, just append the suffix \"/*.*\" to guarantee a filetype, then\r\n\t\t\t// remove the suffix from the result. This way clients can request a url w/out a filetype. This should be\r\n\t\t\t// rare, but it maintains backcompat for the v1.x line (note: dojo.moduleUrl will be removed in v2.0).\r\n\t\t\t// Notice * is an illegal filename so it won't conflict with any real path map that may exist the paths config.\r\n\t\t\tvar result = null;\r\n\t\t\tif(module){\r\n\t\t\t\tresult = require.toUrl(module.replace(/\\./g, \"/\") + (url ? (\"/\" + url) : \"\") + \"/*.*\").replace(/\\/\\*\\.\\*/, \"\") + (url ? \"\" : \"/\");\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t}\r\n\r\n\tdojo._hasResource = {}; // for backward compatibility with layers built with 1.6 tooling\r\n\r\n\treturn dojo;\r\n});\r\n"]}
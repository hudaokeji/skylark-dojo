{"version":3,"sources":["_base/Color.js"],"names":["define","dojo","lang","ArrayUtil","config","Color","color","this","setColor","named","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","transparent","transparentColor","extend","r","g","b","a","_set","t","isString","fromString","isArray","fromArray","sanitize","toRgb","toRgba","toHex","map","x","s","toString","length","join","toCss","includeAlpha","rgb","blendColors","start","end","weight","obj","forEach","Math","round","fromRgb","colorFromRgb","m","toLowerCase","match","split","fromHex","colorFromHex","bits","mask","Number","substr","isNaN","c","colorFromArray","colorFromString","str"],"mappings":"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","file":"../../_base/Color.js","sourcesContent":["define([\"./kernel\", \"./lang\", \"./array\", \"./config\"], function(dojo, lang, ArrayUtil, config){\r\n\r\n\tvar Color = dojo.Color = function(/*Array|String|Object*/ color){\r\n\t\t// summary:\r\n\t\t//\t\tTakes a named string, hex string, array of rgb or rgba values,\r\n\t\t//\t\tan object with r, g, b, and a properties, or another `Color` object\r\n\t\t//\t\tand creates a new Color instance to work from.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tWork with a Color instance:\r\n\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t//\t|\t\tvar c = new Color();\r\n\t\t//\t|\t\tc.setColor([0,0,0]); // black\r\n\t\t//\t|\t\tvar hex = c.toHex(); // #000000\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tWork with a node's color:\r\n\t\t//\t| \r\n\t\t//\t|\trequire([\"dojo/_base/color\", \"dojo/dom-style\"], function(Color, domStyle){\r\n\t\t//\t|\t\tvar color = domStyle(\"someNode\", \"backgroundColor\");\r\n\t\t//\t|\t\tvar n = new Color(color);\r\n\t\t//\t|\t\t// adjust the color some\r\n\t\t//\t|\t\tn.r *= .5;\r\n\t\t//\t|\t\tconsole.log(n.toString()); // rgb(128, 255, 255);\r\n\t\t//\t|\t});\r\n\t\tif(color){ this.setColor(color); }\r\n\t};\r\n\r\n\t// FIXME:\r\n\t// there's got to be a more space-efficient way to encode or discover\r\n\t// these!! Use hex?\r\n\tColor.named = {\r\n\t\t// summary:\r\n\t\t//\t\tDictionary list of all CSS named colors, by name. Values are 3-item arrays with corresponding RG and B values.\r\n\t\t\"black\":  [0,0,0],\r\n\t\t\"silver\": [192,192,192],\r\n\t\t\"gray\":\t  [128,128,128],\r\n\t\t\"white\":  [255,255,255],\r\n\t\t\"maroon\": [128,0,0],\r\n\t\t\"red\":\t  [255,0,0],\r\n\t\t\"purple\": [128,0,128],\r\n\t\t\"fuchsia\":[255,0,255],\r\n\t\t\"green\":  [0,128,0],\r\n\t\t\"lime\":\t  [0,255,0],\r\n\t\t\"olive\":  [128,128,0],\r\n\t\t\"yellow\": [255,255,0],\r\n\t\t\"navy\":\t  [0,0,128],\r\n\t\t\"blue\":\t  [0,0,255],\r\n\t\t\"teal\":\t  [0,128,128],\r\n\t\t\"aqua\":\t  [0,255,255],\r\n\t\t\"transparent\": config.transparentColor || [0,0,0,0]\r\n\t};\r\n\r\n\tlang.extend(Color, {\r\n\t\tr: 255, g: 255, b: 255, a: 1,\r\n\t\t_set: function(r, g, b, a){\r\n\t\t\tvar t = this; t.r = r; t.g = g; t.b = b; t.a = a;\r\n\t\t},\r\n\t\tsetColor: function(/*Array|String|Object*/ color){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a named string, hex string, array of rgb or rgba values,\r\n\t\t\t//\t\tan object with r, g, b, and a properties, or another `Color` object\r\n\t\t\t//\t\tand sets this color instance to that value.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t\t//\t|\t\tvar c = new Color(); // no color\r\n\t\t\t//\t|\t\tc.setColor(\"#ededed\"); // greyish\r\n\t\t\t//\t|\t});\r\n\t\t\tif(lang.isString(color)){\r\n\t\t\t\tColor.fromString(color, this);\r\n\t\t\t}else if(lang.isArray(color)){\r\n\t\t\t\tColor.fromArray(color, this);\r\n\t\t\t}else{\r\n\t\t\t\tthis._set(color.r, color.g, color.b, color.a);\r\n\t\t\t\tif(!(color instanceof Color)){ this.sanitize(); }\r\n\t\t\t}\r\n\t\t\treturn this;\t// Color\r\n\t\t},\r\n\t\tsanitize: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEnsures the object has correct attributes\r\n\t\t\t// description:\r\n\t\t\t//\t\tthe default implementation does nothing, include dojo.colors to\r\n\t\t\t//\t\taugment it with real checks\r\n\t\t\treturn this;\t// Color\r\n\t\t},\r\n\t\ttoRgb: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns 3 component array of rgb values\r\n\t\t\t// example:\r\n\t\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t\t//\t|\t\tvar c = new Color(\"#000000\");\r\n\t\t\t//\t|\t\tconsole.log(c.toRgb()); // [0,0,0]\r\n\t\t\t//\t|\t});\r\n\t\t\tvar t = this;\r\n\t\t\treturn [t.r, t.g, t.b]; // Array\r\n\t\t},\r\n\t\ttoRgba: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a 4 component array of rgba values from the color\r\n\t\t\t//\t\trepresented by this object.\r\n\t\t\tvar t = this;\r\n\t\t\treturn [t.r, t.g, t.b, t.a];\t// Array\r\n\t\t},\r\n\t\ttoHex: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a CSS color string in hexadecimal representation\r\n\t\t\t// example:\r\n\t\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t\t//\t|\t\tconsole.log(new Color([0,0,0]).toHex()); // #000000\r\n\t\t\t//\t|\t});\r\n\t\t\tvar arr = ArrayUtil.map([\"r\", \"g\", \"b\"], function(x){\r\n\t\t\t\tvar s = this[x].toString(16);\r\n\t\t\t\treturn s.length < 2 ? \"0\" + s : s;\r\n\t\t\t}, this);\r\n\t\t\treturn \"#\" + arr.join(\"\");\t// String\r\n\t\t},\r\n\t\ttoCss: function(/*Boolean?*/ includeAlpha){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a css color string in rgb(a) representation\r\n\t\t\t// example:\r\n\t\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t\t//\t|\t\tvar c = new Color(\"#FFF\").toCss();\r\n\t\t\t//\t|\t\tconsole.log(c); // rgb('255','255','255')\r\n\t\t\t//\t|\t});\r\n\t\t\tvar t = this, rgb = t.r + \", \" + t.g + \", \" + t.b;\r\n\t\t\treturn (includeAlpha ? \"rgba(\" + rgb + \", \" + t.a : \"rgb(\" + rgb) + \")\";\t// String\r\n\t\t},\r\n\t\ttoString: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a visual representation of the color\r\n\t\t\treturn this.toCss(true); // String\r\n\t\t}\r\n\t});\r\n\r\n\tColor.blendColors = dojo.blendColors = function(\r\n\t\t/*Color*/ start,\r\n\t\t/*Color*/ end,\r\n\t\t/*Number*/ weight,\r\n\t\t/*Color?*/ obj\r\n\t){\r\n\t\t// summary:\r\n\t\t//\t\tBlend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend,\r\n\t\t//\t\tcan reuse a previously allocated Color object for the result\r\n\t\tvar t = obj || new Color();\r\n\t\tArrayUtil.forEach([\"r\", \"g\", \"b\", \"a\"], function(x){\r\n\t\t\tt[x] = start[x] + (end[x] - start[x]) * weight;\r\n\t\t\tif(x != \"a\"){ t[x] = Math.round(t[x]); }\r\n\t\t});\r\n\t\treturn t.sanitize();\t// Color\r\n\t};\r\n\r\n\tColor.fromRgb = dojo.colorFromRgb = function(/*String*/ color, /*Color?*/ obj){\r\n\t\t// summary:\r\n\t\t//\t\tReturns a `Color` instance from a string of the form\r\n\t\t//\t\t\"rgb(...)\" or \"rgba(...)\". Optionally accepts a `Color`\r\n\t\t//\t\tobject to update with the parsed value and return instead of\r\n\t\t//\t\tcreating a new object.\r\n\t\t// returns:\r\n\t\t//\t\tA Color object. If obj is passed, it will be the return value.\r\n\t\tvar m = color.toLowerCase().match(/^rgba?\\(([\\s\\.,0-9]+)\\)/);\r\n\t\treturn m && Color.fromArray(m[1].split(/\\s*,\\s*/), obj);\t// Color\r\n\t};\r\n\r\n\tColor.fromHex = dojo.colorFromHex = function(/*String*/ color, /*Color?*/ obj){\r\n\t\t// summary:\r\n\t\t//\t\tConverts a hex string with a '#' prefix to a color object.\r\n\t\t//\t\tSupports 12-bit #rgb shorthand. Optionally accepts a\r\n\t\t//\t\t`Color` object to update with the parsed value.\r\n\t\t//\r\n\t\t// returns:\r\n\t\t//\t\tA Color object. If obj is passed, it will be the return value.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t//\t|\t\tvar thing = new Color().fromHex(\"#ededed\"); // grey, longhand\r\n\t\t//\t|\t\tvar thing2 = new Color().fromHex(\"#000\"); // black, shorthand\r\n\t\t//\t|\t});\r\n\t\tvar t = obj || new Color(),\r\n\t\t\tbits = (color.length == 4) ? 4 : 8,\r\n\t\t\tmask = (1 << bits) - 1;\r\n\t\tcolor = Number(\"0x\" + color.substr(1));\r\n\t\tif(isNaN(color)){\r\n\t\t\treturn null; // Color\r\n\t\t}\r\n\t\tArrayUtil.forEach([\"b\", \"g\", \"r\"], function(x){\r\n\t\t\tvar c = color & mask;\r\n\t\t\tcolor >>= bits;\r\n\t\t\tt[x] = bits == 4 ? 17 * c : c;\r\n\t\t});\r\n\t\tt.a = 1;\r\n\t\treturn t;\t// Color\r\n\t};\r\n\r\n\tColor.fromArray = dojo.colorFromArray = function(/*Array*/ a, /*Color?*/ obj){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a `Color` from a 3 or 4 element array, mapping each\r\n\t\t//\t\telement in sequence to the rgb(a) values of the color.\r\n\t\t// example:\r\n\t\t//\t\t|\trequire([\"dojo/_base/color\"], function(Color){\r\n\t\t//\t\t|\t\tvar myColor = new Color().fromArray([237,237,237,0.5]); // grey, 50% alpha\r\n\t\t//\t\t|\t});\r\n\t\t// returns:\r\n\t\t//\t\tA Color object. If obj is passed, it will be the return value.\r\n\t\tvar t = obj || new Color();\r\n\t\tt._set(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3]));\r\n\t\tif(isNaN(t.a)){ t.a = 1; }\r\n\t\treturn t.sanitize();\t// Color\r\n\t};\r\n\r\n\tColor.fromString = dojo.colorFromString = function(/*String*/ str, /*Color?*/ obj){\r\n\t\t// summary:\r\n\t\t//\t\tParses `str` for a color value. Accepts hex, rgb, and rgba\r\n\t\t//\t\tstyle color values.\r\n\t\t// description:\r\n\t\t//\t\tAcceptable input values for str may include arrays of any form\r\n\t\t//\t\taccepted by dojo.colorFromArray, hex strings such as \"#aaaaaa\", or\r\n\t\t//\t\trgb or rgba strings such as \"rgb(133, 200, 16)\" or \"rgba(10, 10,\r\n\t\t//\t\t10, 50)\"\r\n\t\t// returns:\r\n\t\t//\t\tA Color object. If obj is passed, it will be the return value.\r\n\t\tvar a = Color.named[str];\r\n\t\treturn a && Color.fromArray(a, obj) || Color.fromRgb(str, obj) || Color.fromHex(str, obj);\t// Color\r\n\t};\r\n\r\n\treturn Color;\r\n});\r\n"]}
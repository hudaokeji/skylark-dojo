{"version":3,"sources":["_base/configRhino.js"],"names":["rhinoDojoConfig","config","baseUrl","rhinoArgs","log","hint","args","print","i","length","console","arguments","error","warn","deps","arg","split","push","setTimeout","clearTimeout","timeouts","idx","stop","func","delay","def","sleepTime","hasSlept","run","this","java","lang","Thread","currentThread","sleep","e","debug","runnable","Runnable","thread","start","isLocal","url","io","File","exists","hasCache","host-rhino","host-browser","dom","dojo-has-api","dojo-xhr-factory","dojo-inject-api","dojo-timeout-api","dojo-trace-api","dojo-loader-catches","dojo-dom-ready-api","dojo-publish-privates","dojo-sniff","dojo-loader","dojo-test-xd","dojo-test-sniff","p","rhinoConfig","commandLineArgs","timeout","locale","String","util","Locale","getDefault","toString","replace","toLowerCase","loaderPatch","injectUrl","callback","load","require","eval","readUrl","getText","sync","onLoad","readFile"],"mappings":";;;;;;;AAAA,SAASA,gBAAgBC,EAAQC,EAASC,GAOzC,IAAIC,EAAM,SAASC,EAAMC,GACxBC,OAAOF,EAAOA,EAAO,IAAM,IAAMC,EAAK,IACtC,IAAI,IAAIE,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BD,MAAM,KAAOD,EAAKE,KAIpBE,SACCN,IAAK,WAAYA,EAAI,EAAGO,YACxBC,MAAO,WAAYR,EAAI,QAASO,YAChCE,KAAM,WAAYT,EAAI,OAAQO,aAI/B,IAAI,IAAIG,KAAWN,EAAI,EAAGA,EAAIL,EAAUM,OAAQD,IAAI,CACnD,IAAIO,GAAOZ,EAAUK,GAAK,IAAIQ,MAAM,KACvB,QAAVD,EAAI,IACND,EAAKG,KAAKF,EAAI,IAKhB,GAAwB,oBAAdG,YAAoD,oBAAhBC,aAA4B,CACzE,IAAIC,KACJD,aAAe,SAASE,GACnBD,EAASC,IACbD,EAASC,GAAKC,QAGfJ,WAAa,SAASK,EAAMC,GAC3B,IAAIC,GACHC,UAAUF,EACVG,UAAS,EAETC,IAAI,WACCC,KAAKF,WACRE,KAAKF,UAAW,EAChBG,KAAKC,KAAKC,OAAOC,gBAAgBC,MAAML,KAAKH,YAE7C,IACCH,IACA,MAAMY,GACNzB,QAAQ0B,MAAM,mCAAqCD,MAKlDE,EAAW,IAAIP,KAAKC,KAAKO,SAASb,GAClCc,EAAS,IAAIT,KAAKC,KAAKC,OAAOK,GAElC,OADAE,EAAOC,QACApB,EAASH,KAAKsB,GAAU,GAIjC,IAAIE,EAAU,SAASC,GACtB,OAAO,IAAKZ,KAAKa,GAAGC,KAAKF,GAAMG,UAI5BC,GACHC,aAAa,EACbC,eAAe,EACfC,IAAM,EACNC,eAAe,EACfC,mBAAmB,EACnBC,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB,EACjBC,sBAAsB,EACtBC,qBAAqB,EACrBC,wBAAwB,EACxBC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,kBAAkB,GAEnB,IAAI,IAAIC,KAAKhB,EACZ7C,EAAO6C,SAASgB,GAAKhB,EAASgB,GAI/B,IAAIC,GACH7D,QAAQA,EACR8D,gBAAgB7D,EAChBW,KAAKA,EACLmD,QAAQ,EACRC,OAAOC,OAAOrC,KAAKsC,KAAKC,OAAOC,aAAaC,WAAWC,QAAQ,IAAK,KAAKC,eAEzEC,aACCC,UAAW,SAASjC,EAAKkC,GACxB,IACInC,EAAQC,GACVmC,KAAKnC,GAELoC,QAAQC,KAAKC,QAAQtC,EAAK,UAE3BkC,IACA,MAAMzC,GACNzB,QAAQN,IAAI,4BAA8BsC,EAAM,KAChDhC,QAAQN,IAAI+B,KAId8C,QAAS,SAASvC,EAAKwC,EAAMC,GAG5BA,EAAO1C,EAAQC,GAAO0C,SAAS1C,EAAK,SAAWsC,QAAQtC,EAAK,aAI/D,IAAIoB,KAAKC,EACR9D,EAAO6D,GAAKC,EAAYD","file":"../../_base/configRhino.js","sourcesContent":["function rhinoDojoConfig(config, baseUrl, rhinoArgs){\r\n\t// summary:\r\n\t//\t\tThis module provides bootstrap configuration for running dojo in rhino.\r\n\r\n\t// TODO: v1.6 tries to set dojo.doc and dojo.body in rhino; why?\r\n\r\n\t// get a minimal console up\r\n\tvar log = function(hint, args){\r\n\t\tprint((hint ? hint + \":\" : \"\") + args[0]);\r\n\t\tfor(var i = 1; i < args.length; i++){\r\n\t\t\tprint(\", \" + args[i]);\r\n\t\t}\r\n\t};\r\n\t// intentionally define console in the global namespace\r\n\tconsole= {\r\n\t\tlog: function(){ log(0, arguments); },\r\n\t\terror: function(){ log(\"ERROR\", arguments); },\r\n\t\twarn: function(){ log(\"WARN\", arguments); }\r\n\t};\r\n\r\n\t// any command line arguments with the load flag are pushed into deps\r\n\tfor(var deps = [], i = 0; i < rhinoArgs.length; i++){\r\n\t\tvar arg = (rhinoArgs[i] + \"\").split(\"=\");\r\n\t\tif(arg[0] == \"load\"){\r\n\t\t\tdeps.push(arg[1]);\r\n\t\t}\r\n\t}\r\n\r\n\t// provides timed callbacks using Java threads\r\n\tif(typeof setTimeout == \"undefined\" || typeof clearTimeout == \"undefined\"){\r\n\t\tvar timeouts = [];\r\n\t\tclearTimeout = function(idx){\r\n\t\t\tif(!timeouts[idx]){ return; }\r\n\t\t\ttimeouts[idx].stop();\r\n\t\t};\r\n\r\n\t\tsetTimeout = function(func, delay){\r\n\t\t\tvar def = {\r\n\t\t\t\tsleepTime:delay,\r\n\t\t\t\thasSlept:false,\r\n\r\n\t\t\t\trun:function(){\r\n\t\t\t\t\tif(!this.hasSlept){\r\n\t\t\t\t\t\tthis.hasSlept = true;\r\n\t\t\t\t\t\tjava.lang.Thread.currentThread().sleep(this.sleepTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tfunc();\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tconsole.debug(\"Error running setTimeout thread:\" + e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar runnable = new java.lang.Runnable(def);\r\n\t\t\tvar thread = new java.lang.Thread(runnable);\r\n\t\t\tthread.start();\r\n\t\t\treturn timeouts.push(thread) - 1;\r\n\t\t};\r\n\t}\r\n\r\n\tvar isLocal = function(url){\r\n\t\treturn (new java.io.File(url)).exists();\r\n\t};\r\n\r\n\t// reset the has cache with node-appropriate values;\r\n\tvar hasCache = {\r\n\t\t\"host-rhino\":1,\r\n\t\t\"host-browser\":0,\r\n\t\t\"dom\":0,\r\n\t\t\"dojo-has-api\":1,\r\n\t\t\"dojo-xhr-factory\":0,\r\n\t\t\"dojo-inject-api\":1,\r\n\t\t\"dojo-timeout-api\":0,\r\n\t\t\"dojo-trace-api\":1,\r\n\t\t\"dojo-loader-catches\":1,\r\n\t\t\"dojo-dom-ready-api\":0,\r\n\t\t\"dojo-publish-privates\":1,\r\n\t\t\"dojo-sniff\":0,\r\n\t\t\"dojo-loader\":1,\r\n\t\t\"dojo-test-xd\":0,\r\n\t\t\"dojo-test-sniff\":0\r\n\t};\r\n\tfor(var p in hasCache){\r\n\t\tconfig.hasCache[p] = hasCache[p];\r\n\t}\r\n\r\n\t// reset some configuration switches with rhino-appropriate values\r\n\tvar rhinoConfig = {\r\n\t\tbaseUrl:baseUrl,\r\n\t\tcommandLineArgs:rhinoArgs,\r\n\t\tdeps:deps,\r\n\t\ttimeout:0,\r\n\t\tlocale:String(java.util.Locale.getDefault().toString().replace('_', '-').toLowerCase()),\r\n\r\n\t\tloaderPatch:{\r\n\t\t\tinjectUrl: function(url, callback){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tif(isLocal(url)){\r\n\t\t\t\t\t\tload(url);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\trequire.eval(readUrl(url, \"UTF-8\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tconsole.log(\"failed to load resource (\" + url + \")\");\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tgetText: function(url, sync, onLoad){\r\n\t\t\t\t// TODO: test https://bugzilla.mozilla.org/show_bug.cgi?id=471005; see v1.6 hostenv_rhino\r\n\t\t\t\t// note: async mode not supported in rhino\r\n\t\t\t\tonLoad(isLocal(url) ? readFile(url, \"UTF-8\") : readUrl(url, \"UTF-8\"));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tfor(p in rhinoConfig){\r\n\t\tconfig[p] = rhinoConfig[p];\r\n\t}\r\n}\r\n"]}
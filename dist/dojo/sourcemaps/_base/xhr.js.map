{"version":3,"sources":["_base/xhr.js"],"names":["define","dojo","has","require","ioq","dom","domForm","Deferred","config","json","lang","array","on","aspect","watch","_xhr","util","_xhrObj","_create","cfg","objectToQuery","queryToObject","fieldToObject","formToObject","toObject","formToQuery","toQuery","formToJson","toJson","_blockAsync","handlers","_contentHandlers","contentHandlers","text","xhr","responseText","fromJson","json-comment-filtered","useCommentedJson","console","warn","value","cStartIdx","indexOf","cEndIdx","lastIndexOf","Error","substring","javascript","eval","xml","result","responseXML","querySelectorAll","DOMParser","parseFromString","documentElement","ms","n","dp","some","p","ActiveXObject","async","loadXML","e","json-comment-optional","test","_ioSetArgs","args","canceller","okHandler","errHandler","ioArgs","url","formObject","form","byId","actnNode","getAttributeNode","miArgs","push","content","preventCache","dojo.preventCache","Date","valueOf","query","mixin","apply","handleAs","d","dfd","canceled","err","error","dojoType","addCallback","ld","load","isFunction","call","addErrback","handle","addBoth","ioPublish","publish","addCallbacks","res","_deferredOk","ret","undefined","_deferError","failOk","_checkPubCount","_pubCount","after","_ioCancelAll","cancelAll","_ioNotifyStart","_ioWatch","validCheck","ioCheck","resHandle","options","response","isValid","isReady","handleResponse","_ioAddQueryToUrl","length","method","hasBody","rDfd","cancel","postData","putData","rawBody","arguments","toUpperCase","timeout","withCredentials","headers","contentType","data","sync","then","resolve","otherwise","status","reject","xhrGet","rawXhrPost","xhrPost","rawXhrPut","xhrPut","xhrDelete","_isDocumentOk","x","checkStatus","_getText","get","post","put","del"],"mappings":"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","file":"../../_base/xhr.js","sourcesContent":["define([\r\n\t\"./kernel\",\r\n\t\"./sniff\",\r\n\t\"require\",\r\n\t\"../io-query\",\r\n\t/*===== \"./declare\", =====*/\r\n\t\"../dom\",\r\n\t\"../dom-form\",\r\n\t\"./Deferred\",\r\n\t\"./config\",\r\n\t\"./json\",\r\n\t\"./lang\",\r\n\t\"./array\",\r\n\t\"../on\",\r\n\t\"../aspect\",\r\n\t\"../request/watch\",\r\n\t\"../request/xhr\",\r\n\t\"../request/util\"\r\n], function(dojo, has, require, ioq, /*===== declare, =====*/ dom, domForm, Deferred, config, json, lang, array, on, aspect, watch, _xhr, util){\r\n\t// module:\r\n\t//\t\tdojo/_base/xhr\r\n\r\n\t/*=====\r\n\tdojo._xhrObj = function(){\r\n\t\t// summary:\r\n\t\t//\t\tdoes the work of portably generating a new XMLHTTPRequest object.\r\n\t};\r\n\t=====*/\r\n\tdojo._xhrObj = _xhr._create;\r\n\r\n\tvar cfg = dojo.config;\r\n\r\n\t// mix in io-query and dom-form\r\n\tdojo.objectToQuery = ioq.objectToQuery;\r\n\tdojo.queryToObject = ioq.queryToObject;\r\n\tdojo.fieldToObject = domForm.fieldToObject;\r\n\tdojo.formToObject = domForm.toObject;\r\n\tdojo.formToQuery = domForm.toQuery;\r\n\tdojo.formToJson = domForm.toJson;\r\n\r\n\t// need to block async callbacks from snatching this thread as the result\r\n\t// of an async callback might call another sync XHR, this hangs khtml forever\r\n\t// must checked by watchInFlight()\r\n\r\n\tdojo._blockAsync = false;\r\n\r\n\t// MOW: remove dojo._contentHandlers alias in 2.0\r\n\tvar handlers = dojo._contentHandlers = dojo.contentHandlers = {\r\n\t\t// summary:\r\n\t\t//\t\tA map of available XHR transport handle types. Name matches the\r\n\t\t//\t\t`handleAs` attribute passed to XHR calls.\r\n\t\t// description:\r\n\t\t//\t\tA map of available XHR transport handle types. Name matches the\r\n\t\t//\t\t`handleAs` attribute passed to XHR calls. Each contentHandler is\r\n\t\t//\t\tcalled, passing the xhr object for manipulation. The return value\r\n\t\t//\t\tfrom the contentHandler will be passed to the `load` or `handle`\r\n\t\t//\t\tfunctions defined in the original xhr call.\r\n\t\t// example:\r\n\t\t//\t\tCreating a custom content-handler:\r\n\t\t//\t|\txhr.contentHandlers.makeCaps = function(xhr){\r\n\t\t//\t|\t\treturn xhr.responseText.toUpperCase();\r\n\t\t//\t|\t}\r\n\t\t//\t|\t// and later:\r\n\t\t//\t|\tdojo.xhrGet({\r\n\t\t//\t|\t\turl:\"foo.txt\",\r\n\t\t//\t|\t\thandleAs:\"makeCaps\",\r\n\t\t//\t|\t\tload: function(data){ /* data is a toUpper version of foo.txt */ }\r\n\t\t//\t|\t});\r\n\r\n\t\t\"text\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler which simply returns the plaintext response data\r\n\t\t\treturn xhr.responseText;\r\n\t\t},\r\n\t\t\"json\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler which returns a JavaScript object created from the response data\r\n\t\t\treturn json.fromJson(xhr.responseText || null);\r\n\t\t},\r\n\t\t\"json-comment-filtered\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler which expects comment-filtered JSON.\r\n\t\t\t// description:\r\n\t\t\t//\t\tA contentHandler which expects comment-filtered JSON.\r\n\t\t\t//\t\tthe json-comment-filtered option was implemented to prevent\r\n\t\t\t//\t\t\"JavaScript Hijacking\", but it is less secure than standard JSON. Use\r\n\t\t\t//\t\tstandard JSON instead. JSON prefixing can be used to subvert hijacking.\r\n\t\t\t//\r\n\t\t\t//\t\tWill throw a notice suggesting to use application/json mimetype, as\r\n\t\t\t//\t\tjson-commenting can introduce security issues. To decrease the chances of hijacking,\r\n\t\t\t//\t\tuse the standard `json` contentHandler, and prefix your \"JSON\" with: {}&&\r\n\t\t\t//\r\n\t\t\t//\t\tuse djConfig.useCommentedJson = true to turn off the notice\r\n\t\t\tif(!config.useCommentedJson){\r\n\t\t\t\tconsole.warn(\"Consider using the standard mimetype:application/json.\"\r\n\t\t\t\t\t+ \" json-commenting can introduce security issues. To\"\r\n\t\t\t\t\t+ \" decrease the chances of hijacking, use the standard the 'json' handler and\"\r\n\t\t\t\t\t+ \" prefix your json with: {}&&\\n\"\r\n\t\t\t\t\t+ \"Use djConfig.useCommentedJson=true to turn off this message.\");\r\n\t\t\t}\r\n\r\n\t\t\tvar value = xhr.responseText;\r\n\t\t\tvar cStartIdx = value.indexOf(\"\\/*\");\r\n\t\t\tvar cEndIdx = value.lastIndexOf(\"*\\/\");\r\n\t\t\tif(cStartIdx == -1 || cEndIdx == -1){\r\n\t\t\t\tthrow new Error(\"JSON was not comment filtered\");\r\n\t\t\t}\r\n\t\t\treturn json.fromJson(value.substring(cStartIdx+2, cEndIdx));\r\n\t\t},\r\n\t\t\"javascript\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler which evaluates the response data, expecting it to be valid JavaScript\r\n\r\n\t\t\t// FIXME: try Moz and IE specific eval variants?\r\n\t\t\treturn dojo.eval(xhr.responseText);\r\n\t\t},\r\n\t\t\"xml\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler returning an XML Document parsed from the response data\r\n\t\t\tvar result = xhr.responseXML;\r\n\r\n\t\t\tif(result && has(\"dom-qsa2.1\") && !result.querySelectorAll && has(\"dom-parser\")){\r\n\t\t\t\t// http://bugs.dojotoolkit.org/ticket/15631\r\n\t\t\t\t// IE9 supports a CSS3 querySelectorAll implementation, but the DOM implementation \r\n\t\t\t\t// returned by IE9 xhr.responseXML does not. Manually create the XML DOM to gain \r\n\t\t\t\t// the fuller-featured implementation and avoid bugs caused by the inconsistency\r\n\t\t\t\tresult = new DOMParser().parseFromString(xhr.responseText, \"application/xml\");\r\n\t\t\t}\r\n\r\n\t\t\tif(has(\"ie\")){\r\n\t\t\t\tif((!result || !result.documentElement)){\r\n\t\t\t\t\t//WARNING: this branch used by the xml handling in dojo.io.iframe,\r\n\t\t\t\t\t//so be sure to test dojo.io.iframe if making changes below.\r\n\t\t\t\t\tvar ms = function(n){ return \"MSXML\" + n + \".DOMDocument\"; };\r\n\t\t\t\t\tvar dp = [\"Microsoft.XMLDOM\", ms(6), ms(4), ms(3), ms(2)];\r\n\t\t\t\t\tarray.some(dp, function(p){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tvar dom = new ActiveXObject(p);\r\n\t\t\t\t\t\t\tdom.async = false;\r\n\t\t\t\t\t\t\tdom.loadXML(xhr.responseText);\r\n\t\t\t\t\t\t\tresult = dom;\r\n\t\t\t\t\t\t}catch(e){ return false; }\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result; // DOMDocument\r\n\t\t},\r\n\t\t\"json-comment-optional\": function(xhr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA contentHandler which checks the presence of comment-filtered JSON and\r\n\t\t\t//\t\talternates between the `json` and `json-comment-filtered` contentHandlers.\r\n\t\t\tif(xhr.responseText && /^[^{\\[]*\\/\\*/.test(xhr.responseText)){\r\n\t\t\t\treturn handlers[\"json-comment-filtered\"](xhr);\r\n\t\t\t}else{\r\n\t\t\t\treturn handlers[\"json\"](xhr);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*=====\r\n\r\n\t// kwargs function parameter definitions.   Assigning to dojo namespace rather than making them local variables\r\n\t// because they are used by dojo/io modules too\r\n\r\n\tdojo.__IoArgs = declare(null, {\r\n\t\t// url: String\r\n\t\t//\t\tURL to server endpoint.\r\n\t\t// content: Object?\r\n\t\t//\t\tContains properties with string values. These\r\n\t\t//\t\tproperties will be serialized as name1=value2 and\r\n\t\t//\t\tpassed in the request.\r\n\t\t// timeout: Integer?\r\n\t\t//\t\tMilliseconds to wait for the response. If this time\r\n\t\t//\t\tpasses, the then error callbacks are called.\r\n\t\t// form: DOMNode?\r\n\t\t//\t\tDOM node for a form. Used to extract the form values\r\n\t\t//\t\tand send to the server.\r\n\t\t// preventCache: Boolean?\r\n\t\t//\t\tDefault is false. If true, then a\r\n\t\t//\t\t\"dojo.preventCache\" parameter is sent in the request\r\n\t\t//\t\twith a value that changes with each request\r\n\t\t//\t\t(timestamp). Useful only with GET-type requests.\r\n\t\t// handleAs: String?\r\n\t\t//\t\tAcceptable values depend on the type of IO\r\n\t\t//\t\ttransport (see specific IO calls for more information).\r\n\t\t// rawBody: String?\r\n\t\t//\t\tSets the raw body for an HTTP request. If this is used, then the content\r\n\t\t//\t\tproperty is ignored. This is mostly useful for HTTP methods that have\r\n\t\t//\t\ta body to their requests, like PUT or POST. This property can be used instead\r\n\t\t//\t\tof postData and putData for dojo/_base/xhr.rawXhrPost and dojo/_base/xhr.rawXhrPut respectively.\r\n\t\t// ioPublish: Boolean?\r\n\t\t//\t\tSet this explicitly to false to prevent publishing of topics related to\r\n\t\t//\t\tIO operations. Otherwise, if djConfig.ioPublish is set to true, topics\r\n\t\t//\t\twill be published via dojo/topic.publish() for different phases of an IO operation.\r\n\t\t//\t\tSee dojo/main.__IoPublish for a list of topics that are published.\r\n\r\n\t\tload: function(response, ioArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis function will be\r\n\t\t\t//\t\tcalled on a successful HTTP response code.\r\n\t \t\t// ioArgs: dojo/main.__IoCallbackArgs\r\n\t\t\t//\t\tProvides additional information about the request.\r\n\t\t\t// response: Object\r\n\t\t\t//\t\tThe response in the format as defined with handleAs.\r\n\t\t},\r\n\r\n\t\terror: function(response, ioArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis function will\r\n\t\t\t//\t\tbe called when the request fails due to a network or server error, the url\r\n\t\t\t//\t\tis invalid, etc. It will also be called if the load or handle callback throws an\r\n\t\t\t//\t\texception, unless djConfig.debugAtAllCosts is true.\t This allows deployed applications\r\n\t\t\t//\t\tto continue to run even when a logic error happens in the callback, while making\r\n\t\t\t//\t\tit easier to troubleshoot while in debug mode.\r\n\t\t\t// ioArgs: dojo/main.__IoCallbackArgs\r\n\t\t\t//\t\tProvides additional information about the request.\r\n\t\t\t// response: Object\r\n\t\t\t//\t\tThe response in the format as defined with handleAs.\r\n\t\t},\r\n\r\n\t\thandle: function(loadOrError, response, ioArgs){\r\n\t\t\t// summary:\r\n\t \t\t//\t\tThis function will\r\n\t \t\t//\t\tbe called at the end of every request, whether or not an error occurs.\r\n\t\t\t// loadOrError: String\r\n\t\t\t//\t\tProvides a string that tells you whether this function\r\n\t\t\t//\t\twas called because of success (load) or failure (error).\r\n\t\t\t// response: Object\r\n\t\t\t//\t\tThe response in the format as defined with handleAs.\r\n\t\t\t// ioArgs: dojo/main.__IoCallbackArgs\r\n\t\t\t//\t\tProvides additional information about the request.\r\n\t\t}\r\n\t});\r\n\r\n\tdojo.__IoCallbackArgs = declare(null, {\r\n\t\t// args: Object\r\n\t\t//\t\tthe original object argument to the IO call.\r\n\t\t// xhr: XMLHttpRequest\r\n\t\t//\t\tFor XMLHttpRequest calls only, the\r\n\t\t//\t\tXMLHttpRequest object that was used for the\r\n\t\t//\t\trequest.\r\n\t\t// url: String\r\n\t\t//\t\tThe final URL used for the call. Many times it\r\n\t\t//\t\twill be different than the original args.url\r\n\t\t//\t\tvalue.\r\n\t\t// query: String\r\n\t\t//\t\tFor non-GET requests, the\r\n\t\t//\t\tname1=value1&name2=value2 parameters sent up in\r\n\t\t//\t\tthe request.\r\n\t\t// handleAs: String\r\n\t\t//\t\tThe final indicator on how the response will be\r\n\t\t//\t\thandled.\r\n\t\t// id: String\r\n\t\t//\t\tFor dojo/io/script calls only, the internal\r\n\t\t//\t\tscript ID used for the request.\r\n\t\t// canDelete: Boolean\r\n\t\t//\t\tFor dojo/io/script calls only, indicates\r\n\t\t//\t\twhether the script tag that represents the\r\n\t\t//\t\trequest can be deleted after callbacks have\r\n\t\t//\t\tbeen called. Used internally to know when\r\n\t\t//\t\tcleanup can happen on JSONP-type requests.\r\n\t\t// json: Object\r\n\t\t//\t\tFor dojo/io/script calls only: holds the JSON\r\n\t\t//\t\tresponse for JSONP-type requests. Used\r\n\t\t//\t\tinternally to hold on to the JSON responses.\r\n\t\t//\t\tYou should not need to access it directly --\r\n\t\t//\t\tthe same object should be passed to the success\r\n\t\t//\t\tcallbacks directly.\r\n\t});\r\n\r\n\tdojo.__IoPublish = declare(null, {\r\n\t\t// summary:\r\n\t\t//\t\tThis is a list of IO topics that can be published\r\n\t\t//\t\tif djConfig.ioPublish is set to true. IO topics can be\r\n\t\t//\t\tpublished for any Input/Output, network operation. So,\r\n\t\t//\t\tdojo.xhr, dojo.io.script and dojo.io.iframe can all\r\n\t\t//\t\ttrigger these topics to be published.\r\n\t\t// start: String\r\n\t\t//\t\t\"/dojo/io/start\" is sent when there are no outstanding IO\r\n\t\t//\t\trequests, and a new IO request is started. No arguments\r\n\t\t//\t\tare passed with this topic.\r\n\t\t// send: String\r\n\t\t//\t\t\"/dojo/io/send\" is sent whenever a new IO request is started.\r\n\t\t//\t\tIt passes the dojo.Deferred for the request with the topic.\r\n\t\t// load: String\r\n\t\t//\t\t\"/dojo/io/load\" is sent whenever an IO request has loaded\r\n\t\t//\t\tsuccessfully. It passes the response and the dojo.Deferred\r\n\t\t//\t\tfor the request with the topic.\r\n\t\t// error: String\r\n\t\t//\t\t\"/dojo/io/error\" is sent whenever an IO request has errored.\r\n\t\t//\t\tIt passes the error and the dojo.Deferred\r\n\t\t//\t\tfor the request with the topic.\r\n\t\t// done: String\r\n\t\t//\t\t\"/dojo/io/done\" is sent whenever an IO request has completed,\r\n\t\t//\t\teither by loading or by erroring. It passes the error and\r\n\t\t//\t\tthe dojo.Deferred for the request with the topic.\r\n\t\t// stop: String\r\n\t\t//\t\t\"/dojo/io/stop\" is sent when all outstanding IO requests have\r\n\t\t//\t\tfinished. No arguments are passed with this topic.\r\n\t});\r\n\t=====*/\r\n\r\n\r\n\tdojo._ioSetArgs = function(/*dojo/main.__IoArgs*/args,\r\n\t\t\t/*Function*/canceller,\r\n\t\t\t/*Function*/okHandler,\r\n\t\t\t/*Function*/errHandler){\r\n\t\t// summary:\r\n\t\t//\t\tsets up the Deferred and ioArgs property on the Deferred so it\r\n\t\t//\t\tcan be used in an io call.\r\n\t\t// args:\r\n\t\t//\t\tThe args object passed into the public io call. Recognized properties on\r\n\t\t//\t\tthe args object are:\r\n\t\t// canceller:\r\n\t\t//\t\tThe canceller function used for the Deferred object. The function\r\n\t\t//\t\twill receive one argument, the Deferred object that is related to the\r\n\t\t//\t\tcanceller.\r\n\t\t// okHandler:\r\n\t\t//\t\tThe first OK callback to be registered with Deferred. It has the opportunity\r\n\t\t//\t\tto transform the OK response. It will receive one argument -- the Deferred\r\n\t\t//\t\tobject returned from this function.\r\n\t\t// errHandler:\r\n\t\t//\t\tThe first error callback to be registered with Deferred. It has the opportunity\r\n\t\t//\t\tto do cleanup on an error. It will receive two arguments: error (the\r\n\t\t//\t\tError object) and dfd, the Deferred object returned from this function.\r\n\r\n\t\tvar ioArgs = {args: args, url: args.url};\r\n\r\n\t\t//Get values from form if requested.\r\n\t\tvar formObject = null;\r\n\t\tif(args.form){\r\n\t\t\tvar form = dom.byId(args.form);\r\n\t\t\t//IE requires going through getAttributeNode instead of just getAttribute in some form cases,\r\n\t\t\t//so use it for all. See #2844\r\n\t\t\tvar actnNode = form.getAttributeNode(\"action\");\r\n\t\t\tioArgs.url = ioArgs.url || (actnNode ? actnNode.value : null);\r\n\t\t\tformObject = domForm.toObject(form);\r\n\t\t}\r\n\r\n\t\t// set up the query params\r\n\t\tvar miArgs = [{}];\r\n\r\n\t\tif(formObject){\r\n\t\t\t// potentially over-ride url-provided params w/ form values\r\n\t\t\tmiArgs.push(formObject);\r\n\t\t}\r\n\t\tif(args.content){\r\n\t\t\t// stuff in content over-rides what's set by form\r\n\t\t\tmiArgs.push(args.content);\r\n\t\t}\r\n\t\tif(args.preventCache){\r\n\t\t\tmiArgs.push({\"dojo.preventCache\": new Date().valueOf()});\r\n\t\t}\r\n\t\tioArgs.query = ioq.objectToQuery(lang.mixin.apply(null, miArgs));\r\n\r\n\t\t// .. and the real work of getting the deferred in order, etc.\r\n\t\tioArgs.handleAs = args.handleAs || \"text\";\r\n\t\tvar d = new Deferred(function(dfd){\r\n\t\t\tdfd.canceled = true;\r\n\t\t\tcanceller && canceller(dfd);\r\n\r\n\t\t\tvar err = dfd.ioArgs.error;\r\n\t\t\tif(!err){\r\n\t\t\t\terr = new Error(\"request cancelled\");\r\n\t\t\t\terr.dojoType=\"cancel\";\r\n\t\t\t\tdfd.ioArgs.error = err;\r\n\t\t\t}\r\n\t\t\treturn err;\r\n\t\t});\r\n\t\td.addCallback(okHandler);\r\n\r\n\t\t//Support specifying load, error and handle callback functions from the args.\r\n\t\t//For those callbacks, the \"this\" object will be the args object.\r\n\t\t//The callbacks will get the deferred result value as the\r\n\t\t//first argument and the ioArgs object as the second argument.\r\n\t\tvar ld = args.load;\r\n\t\tif(ld && lang.isFunction(ld)){\r\n\t\t\td.addCallback(function(value){\r\n\t\t\t\treturn ld.call(args, value, ioArgs);\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar err = args.error;\r\n\t\tif(err && lang.isFunction(err)){\r\n\t\t\td.addErrback(function(value){\r\n\t\t\t\treturn err.call(args, value, ioArgs);\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar handle = args.handle;\r\n\t\tif(handle && lang.isFunction(handle)){\r\n\t\t\td.addBoth(function(value){\r\n\t\t\t\treturn handle.call(args, value, ioArgs);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Attach error handler last (not including topic publishing)\r\n\t\t// to catch any errors that may have been generated from load\r\n\t\t// or handle functions.\r\n\t\td.addErrback(function(error){\r\n\t\t\treturn errHandler(error, d);\r\n\t\t});\r\n\r\n\t\t//Plug in topic publishing, if dojo.publish is loaded.\r\n\t\tif(cfg.ioPublish && dojo.publish && ioArgs.args.ioPublish !== false){\r\n\t\t\td.addCallbacks(\r\n\t\t\t\tfunction(res){\r\n\t\t\t\t\tdojo.publish(\"/dojo/io/load\", [d, res]);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t},\r\n\t\t\t\tfunction(res){\r\n\t\t\t\t\tdojo.publish(\"/dojo/io/error\", [d, res]);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\td.addBoth(function(res){\r\n\t\t\t\tdojo.publish(\"/dojo/io/done\", [d, res]);\r\n\t\t\t\treturn res;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\td.ioArgs = ioArgs;\r\n\r\n\t\t// FIXME: need to wire up the xhr object's abort method to something\r\n\t\t// analogous in the Deferred\r\n\t\treturn d;\r\n\t};\r\n\r\n\tvar _deferredOk = function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tokHandler function for dojo._ioSetArgs call.\r\n\r\n\t\tvar ret = handlers[dfd.ioArgs.handleAs](dfd.ioArgs.xhr);\r\n\t\treturn ret === undefined ? null : ret;\r\n\t};\r\n\tvar _deferError = function(/*Error*/error, /*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\terrHandler function for dojo._ioSetArgs call.\r\n\r\n\t\tif(!dfd.ioArgs.args.failOk){\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t\treturn error;\r\n\t};\r\n\r\n\t//Use a separate count for knowing if we are starting/stopping io calls.\r\n\tvar _checkPubCount = function(dfd){\r\n\t\tif(_pubCount <= 0){\r\n\t\t\t_pubCount = 0;\r\n\t\t\tif(cfg.ioPublish && dojo.publish && (!dfd || dfd && dfd.ioArgs.args.ioPublish !== false)){\r\n\t\t\t\tdojo.publish(\"/dojo/io/stop\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar _pubCount = 0;\r\n\taspect.after(watch, \"_onAction\", function(){\r\n\t\t_pubCount -= 1;\r\n\t});\r\n\taspect.after(watch, \"_onInFlight\", _checkPubCount);\r\n\r\n\tdojo._ioCancelAll = watch.cancelAll;\r\n\t/*=====\r\n\tdojo._ioCancelAll = function(){\r\n\t\t// summary:\r\n\t\t//\t\tCancels all pending IO requests, regardless of IO type\r\n\t\t//\t\t(xhr, script, iframe).\r\n\t};\r\n\t=====*/\r\n\r\n\tdojo._ioNotifyStart = function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tIf dojo.publish is available, publish topics\r\n\t\t//\t\tabout the start of a request queue and/or the\r\n\t\t//\t\tthe beginning of request.\r\n\t\t//\r\n\t\t//\t\tUsed by IO transports. An IO transport should\r\n\t\t//\t\tcall this method before making the network connection.\r\n\t\tif(cfg.ioPublish && dojo.publish && dfd.ioArgs.args.ioPublish !== false){\r\n\t\t\tif(!_pubCount){\r\n\t\t\t\tdojo.publish(\"/dojo/io/start\");\r\n\t\t\t}\r\n\t\t\t_pubCount += 1;\r\n\t\t\tdojo.publish(\"/dojo/io/send\", [dfd]);\r\n\t\t}\r\n\t};\r\n\r\n\tdojo._ioWatch = function(dfd, validCheck, ioCheck, resHandle){\r\n\t\t// summary:\r\n\t\t//\t\tWatches the io request represented by dfd to see if it completes.\r\n\t\t// dfd: Deferred\r\n\t\t//\t\tThe Deferred object to watch.\r\n\t\t// validCheck: Function\r\n\t\t//\t\tFunction used to check if the IO request is still valid. Gets the dfd\r\n\t\t//\t\tobject as its only argument.\r\n\t\t// ioCheck: Function\r\n\t\t//\t\tFunction used to check if basic IO call worked. Gets the dfd\r\n\t\t//\t\tobject as its only argument.\r\n\t\t// resHandle: Function\r\n\t\t//\t\tFunction used to process response. Gets the dfd\r\n\t\t//\t\tobject as its only argument.\r\n\r\n\t\tvar args = dfd.ioArgs.options = dfd.ioArgs.args;\r\n\t\tlang.mixin(dfd, {\r\n\t\t\tresponse: dfd.ioArgs,\r\n\t\t\tisValid: function(response){\r\n\t\t\t\treturn validCheck(dfd);\r\n\t\t\t},\r\n\t\t\tisReady: function(response){\r\n\t\t\t\treturn ioCheck(dfd);\r\n\t\t\t},\r\n\t\t\thandleResponse: function(response){\r\n\t\t\t\treturn resHandle(dfd);\r\n\t\t\t}\r\n\t\t});\r\n\t\twatch(dfd);\r\n\r\n\t\t_checkPubCount(dfd);\r\n\t};\r\n\r\n\tvar _defaultContentType = \"application/x-www-form-urlencoded\";\r\n\r\n\tdojo._ioAddQueryToUrl = function(/*dojo.__IoCallbackArgs*/ioArgs){\r\n\t\t// summary:\r\n\t\t//\t\tAdds query params discovered by the io deferred construction to the URL.\r\n\t\t//\t\tOnly use this for operations which are fundamentally GET-type operations.\r\n\t\tif(ioArgs.query.length){\r\n\t\t\tioArgs.url += (ioArgs.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") + ioArgs.query;\r\n\t\t\tioArgs.query = null;\r\n\t\t}\r\n\t};\r\n\r\n\t/*=====\r\n\tdojo.__XhrArgs = declare(dojo.__IoArgs, {\r\n\t\t// summary:\r\n\t\t//\t\tIn addition to the properties listed for the dojo._IoArgs type,\r\n\t\t//\t\tthe following properties are allowed for dojo.xhr* methods.\r\n\t\t// handleAs: String?\r\n\t\t//\t\tAcceptable values are: text (default), json, json-comment-optional,\r\n\t\t//\t\tjson-comment-filtered, javascript, xml. See `dojo/_base/xhr.contentHandlers`\r\n\t \t// sync: Boolean?\r\n\t\t//\t\tfalse is default. Indicates whether the request should\r\n\t\t//\t\tbe a synchronous (blocking) request.\r\n\t\t// headers: Object?\r\n\t\t//\t\tAdditional HTTP headers to send in the request.\r\n\t\t// failOk: Boolean?\r\n\t\t//\t\tfalse is default. Indicates whether a request should be\r\n\t\t//\t\tallowed to fail (and therefore no console error message in\r\n\t\t//\t\tthe event of a failure)\r\n\t\t// contentType: String|Boolean\r\n\t\t//\t\t\"application/x-www-form-urlencoded\" is default. Set to false to\r\n\t\t//\t\tprevent a Content-Type header from being sent, or to a string\r\n\t\t//\t\tto send a different Content-Type.\r\n\t });\r\n\t=====*/\r\n\r\n\tdojo.xhr = function(/*String*/ method, /*dojo.__XhrArgs*/ args, /*Boolean?*/ hasBody){\r\n\t\t// summary:\r\n\t\t//\t\tDeprecated.   Use dojo/request instead.\r\n\t\t// description:\r\n\t\t//\t\tSends an HTTP request with the given method.\r\n\t\t//\t\tSee also dojo.xhrGet(), xhrPost(), xhrPut() and dojo.xhrDelete() for shortcuts\r\n\t\t//\t\tfor those HTTP methods. There are also methods for \"raw\" PUT and POST methods\r\n\t\t//\t\tvia dojo.rawXhrPut() and dojo.rawXhrPost() respectively.\r\n\t\t// method:\r\n\t\t//\t\tHTTP method to be used, such as GET, POST, PUT, DELETE. Should be uppercase.\r\n\t\t// hasBody:\r\n\t\t//\t\tIf the request has an HTTP body, then pass true for hasBody.\r\n\r\n\t\tvar rDfd;\r\n\t\t//Make the Deferred object for this xhr request.\r\n\t\tvar dfd = dojo._ioSetArgs(args, function(dfd){\r\n\t\t\trDfd && rDfd.cancel();\r\n\t\t}, _deferredOk, _deferError);\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\r\n\t\t//Allow for specifying the HTTP body completely.\r\n\t\tif(\"postData\" in args){\r\n\t\t\tioArgs.query = args.postData;\r\n\t\t}else if(\"putData\" in args){\r\n\t\t\tioArgs.query = args.putData;\r\n\t\t}else if(\"rawBody\" in args){\r\n\t\t\tioArgs.query = args.rawBody;\r\n\t\t}else if((arguments.length > 2 && !hasBody) || \"POST|PUT\".indexOf(method.toUpperCase()) === -1){\r\n\t\t\t//Check for hasBody being passed. If no hasBody,\r\n\t\t\t//then only append query string if not a POST or PUT request.\r\n\t\t\tdojo._ioAddQueryToUrl(ioArgs);\r\n\t\t}\r\n\r\n\t\tvar options = {\r\n\t\t\tmethod: method,\r\n\t\t\thandleAs: \"text\",\r\n\t\t\ttimeout: args.timeout,\r\n\t\t\twithCredentials: args.withCredentials,\r\n\t\t\tioArgs: ioArgs\r\n\t\t};\r\n\r\n\t\tif(typeof args.headers !== 'undefined'){\r\n\t\t\toptions.headers = args.headers;\r\n\t\t}\r\n\t\tif(typeof args.contentType !== 'undefined'){\r\n\t\t\tif(!options.headers){\r\n\t\t\t\toptions.headers = {};\r\n\t\t\t}\r\n\t\t\toptions.headers['Content-Type'] = args.contentType;\r\n\t\t}\r\n\t\tif(typeof ioArgs.query !== 'undefined'){\r\n\t\t\toptions.data = ioArgs.query;\r\n\t\t}\r\n\t\tif(typeof args.sync !== 'undefined'){\r\n\t\t\toptions.sync = args.sync;\r\n\t\t}\r\n\r\n\t\tdojo._ioNotifyStart(dfd);\r\n\t\ttry{\r\n\t\t\trDfd = _xhr(ioArgs.url, options, true);\r\n\t\t}catch(e){\r\n\t\t\t// If XHR creation fails, dojo/request/xhr throws\r\n\t\t\t// When this happens, cancel the deferred\r\n\t\t\tdfd.cancel();\r\n\t\t\treturn dfd;\r\n\t\t}\r\n\r\n\t\t// sync ioArgs\r\n\t\tdfd.ioArgs.xhr = rDfd.response.xhr;\r\n\r\n\t\trDfd.then(function(){\r\n\t\t\tdfd.resolve(dfd);\r\n\t\t}).otherwise(function(error){\r\n\t\t\tioArgs.error = error;\r\n\t\t\tif(error.response){\r\n\t\t\t\terror.status = error.response.status;\r\n\t\t\t\terror.responseText = error.response.text;\r\n\t\t\t\terror.xhr = error.response.xhr;\r\n\t\t\t}\r\n\t\t\tdfd.reject(error);\r\n\t\t});\r\n\t\treturn dfd; // dojo/_base/Deferred\r\n\t};\r\n\r\n\tdojo.xhrGet = function(/*dojo.__XhrArgs*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSends an HTTP GET request to the server.\r\n\t\treturn dojo.xhr(\"GET\", args); // dojo/_base/Deferred\r\n\t};\r\n\r\n\tdojo.rawXhrPost = dojo.xhrPost = function(/*dojo.__XhrArgs*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSends an HTTP POST request to the server. In addition to the properties\r\n\t\t//\t\tlisted for the dojo.__XhrArgs type, the following property is allowed:\r\n\t\t// postData:\r\n\t\t//\t\tString. Send raw data in the body of the POST request.\r\n\t\treturn dojo.xhr(\"POST\", args, true); // dojo/_base/Deferred\r\n\t};\r\n\r\n\tdojo.rawXhrPut = dojo.xhrPut = function(/*dojo.__XhrArgs*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSends an HTTP PUT request to the server. In addition to the properties\r\n\t\t//\t\tlisted for the dojo.__XhrArgs type, the following property is allowed:\r\n\t\t// putData:\r\n\t\t//\t\tString. Send raw data in the body of the PUT request.\r\n\t\treturn dojo.xhr(\"PUT\", args, true); // dojo/_base/Deferred\r\n\t};\r\n\r\n\tdojo.xhrDelete = function(/*dojo.__XhrArgs*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSends an HTTP DELETE request to the server.\r\n\t\treturn dojo.xhr(\"DELETE\", args); // dojo/_base/Deferred\r\n\t};\r\n\r\n\t/*\r\n\tdojo.wrapForm = function(formNode){\r\n\t\t// summary:\r\n\t\t//\t\tA replacement for FormBind, but not implemented yet.\r\n\r\n\t\t// FIXME: need to think harder about what extensions to this we might\r\n\t\t// want. What should we allow folks to do w/ this? What events to\r\n\t\t// set/send?\r\n\t\tthrow new Error(\"dojo.wrapForm not yet implemented\");\r\n\t}\r\n\t*/\r\n\r\n\tdojo._isDocumentOk = function(x){\r\n\t\treturn util.checkStatus(x.status);\r\n\t};\r\n\r\n\tdojo._getText = function(url){\r\n\t\tvar result;\r\n\t\tdojo.xhrGet({url:url, sync:true, load:function(text){\r\n\t\t\tresult = text;\r\n\t\t}});\r\n\t\treturn result;\r\n\t};\r\n\r\n\t// Add aliases for static functions to dojo.xhr since dojo.xhr is what's returned from this module\r\n\tlang.mixin(dojo.xhr, {\r\n\t\t_xhrObj: dojo._xhrObj,\r\n\t\tfieldToObject: domForm.fieldToObject,\r\n\t\tformToObject: domForm.toObject,\r\n\t\tobjectToQuery: ioq.objectToQuery,\r\n\t\tformToQuery: domForm.toQuery,\r\n\t\tformToJson: domForm.toJson,\r\n\t\tqueryToObject: ioq.queryToObject,\r\n\t\tcontentHandlers: handlers,\r\n\t\t_ioSetArgs: dojo._ioSetArgs,\r\n\t\t_ioCancelAll: dojo._ioCancelAll,\r\n\t\t_ioNotifyStart: dojo._ioNotifyStart,\r\n\t\t_ioWatch: dojo._ioWatch,\r\n\t\t_ioAddQueryToUrl: dojo._ioAddQueryToUrl,\r\n\t\t_isDocumentOk: dojo._isDocumentOk,\r\n\t\t_getText: dojo._getText,\r\n\t\tget: dojo.xhrGet,\r\n\t\tpost: dojo.xhrPost,\r\n\t\tput: dojo.xhrPut,\r\n\t\tdel: dojo.xhrDelete\t// because \"delete\" is a reserved word\r\n\t});\r\n\r\n\treturn dojo.xhr;\r\n});\r\n"]}
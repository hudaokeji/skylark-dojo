{"version":3,"sources":["_base/html.js"],"names":["define","dojo","dom","style","attr","prop","cls","ctr","geom","byId","isDescendant","setSelectable","getAttr","get","setAttr","set","hasAttr","has","removeAttr","remove","getNodeProp","node","name","value","arguments","length","hasClass","contains","addClass","add","removeClass","toggleClass","toggle","replaceClass","replace","_toDom","toDom","place","create","empty","_destroyElement","destroy","_getPadExtents","getPadExtents","_getBorderExtents","getBorderExtents","_getPadBorderExtents","getPadBorderExtents","_getMarginExtents","getMarginExtents","_getMarginSize","getMarginSize","_getMarginBox","getMarginBox","setMarginBox","_getContentBox","getContentBox","setContentSize","_isBodyLtr","isBodyLtr","_docScroll","docScroll","_getIeDocumentElementOffset","getIeDocumentElementOffset","_fixIeBiDiScrollLeft","fixIeBiDiScrollLeft","position","marginBox","box","contentBox","coords","includeScroll","deprecated","s","getComputedStyle","mb","abs","x","y","getProp","setProp","getStyle","setStyle","__toPixelValue","toPixelValue"],"mappings":"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","file":"../../_base/html.js","sourcesContent":["define([\"./kernel\", \"../dom\", \"../dom-style\", \"../dom-attr\", \"../dom-prop\", \"../dom-class\", \"../dom-construct\", \"../dom-geometry\"], function(dojo, dom, style, attr, prop, cls, ctr, geom){\r\n\t// module:\r\n\t//\t\tdojo/dom\r\n\r\n\t/*=====\r\n\treturn {\r\n\t\t// summary:\r\n\t\t//\t\tThis module is a stub for the core dojo DOM API.\r\n\t};\r\n\t=====*/\r\n\r\n\t// mix-in dom\r\n\tdojo.byId = dom.byId;\r\n\tdojo.isDescendant = dom.isDescendant;\r\n\tdojo.setSelectable = dom.setSelectable;\r\n\r\n\t// mix-in dom-attr\r\n\tdojo.getAttr = attr.get;\r\n\tdojo.setAttr = attr.set;\r\n\tdojo.hasAttr = attr.has;\r\n\tdojo.removeAttr = attr.remove;\r\n\tdojo.getNodeProp = attr.getNodeProp;\r\n\r\n\tdojo.attr = function(node, name, value){\r\n\t\t// summary:\r\n\t\t//\t\tGets or sets an attribute on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized getting and setting of attributes on DOM\r\n\t\t//\t\tNodes. If 2 arguments are passed, and a the second argument is a\r\n\t\t//\t\tstring, acts as a getter.\r\n\t\t//\r\n\t\t//\t\tIf a third argument is passed, or if the second argument is a\r\n\t\t//\t\tmap of attributes, acts as a setter.\r\n\t\t//\r\n\t\t//\t\tWhen passing functions as values, note that they will not be\r\n\t\t//\t\tdirectly assigned to slots on the node, but rather the default\r\n\t\t//\t\tbehavior will be removed and the new behavior will be added\r\n\t\t//\t\tusing `dojo.connect()`, meaning that event handler properties\r\n\t\t//\t\twill be normalized and that some caveats with regards to\r\n\t\t//\t\tnon-standard behaviors for onsubmit apply. Namely that you\r\n\t\t//\t\tshould cancel form submission using `dojo.stopEvent()` on the\r\n\t\t//\t\tpassed event object instead of returning a boolean value from\r\n\t\t//\t\tthe handler itself.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to the element to get or set the attribute on\r\n\t\t// name: String|Object\r\n\t\t//\t\tthe name of the attribute to get or set.\r\n\t\t// value: String?\r\n\t\t//\t\tThe value to set for the attribute\r\n\t\t// returns:\r\n\t\t//\t\twhen used as a getter, the value of the requested attribute\r\n\t\t//\t\tor null if that attribute does not have a specified or\r\n\t\t//\t\tdefault value;\r\n\t\t//\r\n\t\t//\t\twhen used as a setter, the DOM node\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// get the current value of the \"foo\" attribute on a node\r\n\t\t//\t|\tdojo.attr(dojo.byId(\"nodeId\"), \"foo\");\r\n\t\t//\t|\t// or we can just pass the id:\r\n\t\t//\t|\tdojo.attr(\"nodeId\", \"foo\");\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// use attr() to set the tab index\r\n\t\t//\t|\tdojo.attr(\"nodeId\", \"tabIndex\", 3);\r\n\t\t//\t|\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tSet multiple values at once, including event handlers:\r\n\t\t//\t|\tdojo.attr(\"formId\", {\r\n\t\t//\t|\t\t\"foo\": \"bar\",\r\n\t\t//\t|\t\t\"tabIndex\": -1,\r\n\t\t//\t|\t\t\"method\": \"POST\",\r\n\t\t//\t|\t\t\"onsubmit\": function(e){\r\n\t\t//\t|\t\t\t// stop submitting the form. Note that the IE behavior\r\n\t\t//\t|\t\t\t// of returning true or false will have no effect here\r\n\t\t//\t|\t\t\t// since our handler is connect()ed to the built-in\r\n\t\t//\t|\t\t\t// onsubmit behavior and so we need to use\r\n\t\t//\t|\t\t\t// dojo.stopEvent() to ensure that the submission\r\n\t\t//\t|\t\t\t// doesn't proceed.\r\n\t\t//\t|\t\t\tdojo.stopEvent(e);\r\n\t\t//\t|\r\n\t\t//\t|\t\t\t// submit the form with Ajax\r\n\t\t//\t|\t\t\tdojo.xhrPost({ form: \"formId\" });\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tStyle is s special case: Only set with an object hash of styles\r\n\t\t//\t|\tdojo.attr(\"someNode\",{\r\n\t\t//\t|\t\tid:\"bar\",\r\n\t\t//\t|\t\tstyle:{\r\n\t\t//\t|\t\t\twidth:\"200px\", height:\"100px\", color:\"#000\"\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tAgain, only set style as an object hash of styles:\r\n\t\t//\t|\tvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\r\n\t\t//\t|\tdojo.attr(\"someNode\", \"style\", obj);\r\n\t\t//\t|\r\n\t\t//\t|\t// though shorter to use `dojo.style()` in this case:\r\n\t\t//\t|\tdojo.style(\"someNode\", obj);\r\n\r\n\t\tif(arguments.length == 2){\r\n\t\t\treturn attr[typeof name == \"string\" ? \"get\" : \"set\"](node, name);\r\n\t\t}\r\n\t\treturn attr.set(node, name, value);\r\n\t};\r\n\r\n\t// mix-in dom-class\r\n\tdojo.hasClass = cls.contains;\r\n\tdojo.addClass = cls.add;\r\n\tdojo.removeClass = cls.remove;\r\n\tdojo.toggleClass = cls.toggle;\r\n\tdojo.replaceClass = cls.replace;\r\n\r\n\t// mix-in dom-construct\r\n\tdojo._toDom = dojo.toDom = ctr.toDom;\r\n\tdojo.place = ctr.place;\r\n\tdojo.create = ctr.create;\r\n\tdojo.empty = function(node){ ctr.empty(node); };\r\n\tdojo._destroyElement = dojo.destroy = function(node){ ctr.destroy(node); };\r\n\r\n\t// mix-in dom-geometry\r\n\tdojo._getPadExtents = dojo.getPadExtents = geom.getPadExtents;\r\n\tdojo._getBorderExtents = dojo.getBorderExtents = geom.getBorderExtents;\r\n\tdojo._getPadBorderExtents = dojo.getPadBorderExtents = geom.getPadBorderExtents;\r\n\tdojo._getMarginExtents = dojo.getMarginExtents = geom.getMarginExtents;\r\n\tdojo._getMarginSize = dojo.getMarginSize = geom.getMarginSize;\r\n\tdojo._getMarginBox = dojo.getMarginBox = geom.getMarginBox;\r\n\tdojo.setMarginBox = geom.setMarginBox;\r\n\tdojo._getContentBox = dojo.getContentBox = geom.getContentBox;\r\n\tdojo.setContentSize = geom.setContentSize;\r\n\tdojo._isBodyLtr = dojo.isBodyLtr = geom.isBodyLtr;\r\n\tdojo._docScroll = dojo.docScroll = geom.docScroll;\r\n\tdojo._getIeDocumentElementOffset = dojo.getIeDocumentElementOffset = geom.getIeDocumentElementOffset;\r\n\tdojo._fixIeBiDiScrollLeft = dojo.fixIeBiDiScrollLeft = geom.fixIeBiDiScrollLeft;\r\n\tdojo.position = geom.position;\r\n\r\n\tdojo.marginBox = function marginBox(/*DomNode|String*/node, /*Object?*/box){\r\n\t\t// summary:\r\n\t\t//\t\tGetter/setter for the margin-box of node.\r\n\t\t// description:\r\n\t\t//\t\tGetter/setter for the margin-box of node.\r\n\t\t//\t\tReturns an object in the expected format of box (regardless\r\n\t\t//\t\tif box is passed). The object might look like:\r\n\t\t//\t\t`{ l: 50, t: 200, w: 300: h: 150 }`\r\n\t\t//\t\tfor a node offset from its parent 50px to the left, 200px from\r\n\t\t//\t\tthe top with a margin width of 300px and a margin-height of\r\n\t\t//\t\t150px.\r\n\t\t// node:\r\n\t\t//\t\tid or reference to DOM Node to get/set box for\r\n\t\t// box:\r\n\t\t//\t\tIf passed, denotes that dojo.marginBox() should\r\n\t\t//\t\tupdate/set the margin box for node. Box is an object in the\r\n\t\t//\t\tabove format. All properties are optional if passed.\r\n\t\t// example:\r\n\t\t//\t\tRetrieve the margin box of a passed node\r\n\t\t//\t|\tvar box = dojo.marginBox(\"someNodeId\");\r\n\t\t//\t|\tconsole.dir(box);\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tSet a node's margin box to the size of another node\r\n\t\t//\t|\tvar box = dojo.marginBox(\"someNodeId\");\r\n\t\t//\t|\tdojo.marginBox(\"someOtherNode\", box);\r\n\t\treturn box ? geom.setMarginBox(node, box) : geom.getMarginBox(node); // Object\r\n\t};\r\n\r\n\tdojo.contentBox = function contentBox(/*DomNode|String*/node, /*Object?*/box){\r\n\t\t// summary:\r\n\t\t//\t\tGetter/setter for the content-box of node.\r\n\t\t// description:\r\n\t\t//\t\tReturns an object in the expected format of box (regardless if box is passed).\r\n\t\t//\t\tThe object might look like:\r\n\t\t//\t\t`{ l: 50, t: 200, w: 300: h: 150 }`\r\n\t\t//\t\tfor a node offset from its parent 50px to the left, 200px from\r\n\t\t//\t\tthe top with a content width of 300px and a content-height of\r\n\t\t//\t\t150px. Note that the content box may have a much larger border\r\n\t\t//\t\tor margin box, depending on the box model currently in use and\r\n\t\t//\t\tCSS values set/inherited for node.\r\n\t\t//\t\tWhile the getter will return top and left values, the\r\n\t\t//\t\tsetter only accepts setting the width and height.\r\n\t\t// node:\r\n\t\t//\t\tid or reference to DOM Node to get/set box for\r\n\t\t// box:\r\n\t\t//\t\tIf passed, denotes that dojo.contentBox() should\r\n\t\t//\t\tupdate/set the content box for node. Box is an object in the\r\n\t\t//\t\tabove format, but only w (width) and h (height) are supported.\r\n\t\t//\t\tAll properties are optional if passed.\r\n\t\treturn box ? geom.setContentSize(node, box) : geom.getContentBox(node); // Object\r\n\t};\r\n\r\n\tdojo.coords = function(/*DomNode|String*/node, /*Boolean?*/includeScroll){\r\n\t\t// summary:\r\n\t\t//\t\tDeprecated: Use position() for border-box x/y/w/h\r\n\t\t//\t\tor marginBox() for margin-box w/h/l/t.\r\n\t\t//\r\n\t\t//\t\tReturns an object that measures margin-box (w)idth/(h)eight\r\n\t\t//\t\tand absolute position x/y of the border-box. Also returned\r\n\t\t//\t\tis computed (l)eft and (t)op values in pixels from the\r\n\t\t//\t\tnode's offsetParent as returned from marginBox().\r\n\t\t//\t\tReturn value will be in the form:\r\n\t\t//|\t\t\t{ l: 50, t: 200, w: 300: h: 150, x: 100, y: 300 }\r\n\t\t//\t\tDoes not act as a setter. If includeScroll is passed, the x and\r\n\t\t//\t\ty params are affected as one would expect in dojo.position().\r\n\t\tdojo.deprecated(\"dojo.coords()\", \"Use dojo.position() or dojo.marginBox().\");\r\n\t\tnode = dom.byId(node);\r\n\t\tvar s = style.getComputedStyle(node), mb = geom.getMarginBox(node, s);\r\n\t\tvar abs = geom.position(node, includeScroll);\r\n\t\tmb.x = abs.x;\r\n\t\tmb.y = abs.y;\r\n\t\treturn mb;\t// Object\r\n\t};\r\n\r\n\t// mix-in dom-prop\r\n\tdojo.getProp = prop.get;\r\n\tdojo.setProp = prop.set;\r\n\r\n\tdojo.prop = function(/*DomNode|String*/node, /*String|Object*/name, /*String?*/value){\r\n\t\t// summary:\r\n\t\t//\t\tGets or sets a property on an HTML element.\r\n\t\t// description:\r\n\t\t//\t\tHandles normalized getting and setting of properties on DOM\r\n\t\t//\t\tNodes. If 2 arguments are passed, and a the second argument is a\r\n\t\t//\t\tstring, acts as a getter.\r\n\t\t//\r\n\t\t//\t\tIf a third argument is passed, or if the second argument is a\r\n\t\t//\t\tmap of attributes, acts as a setter.\r\n\t\t//\r\n\t\t//\t\tWhen passing functions as values, note that they will not be\r\n\t\t//\t\tdirectly assigned to slots on the node, but rather the default\r\n\t\t//\t\tbehavior will be removed and the new behavior will be added\r\n\t\t//\t\tusing `dojo.connect()`, meaning that event handler properties\r\n\t\t//\t\twill be normalized and that some caveats with regards to\r\n\t\t//\t\tnon-standard behaviors for onsubmit apply. Namely that you\r\n\t\t//\t\tshould cancel form submission using `dojo.stopEvent()` on the\r\n\t\t//\t\tpassed event object instead of returning a boolean value from\r\n\t\t//\t\tthe handler itself.\r\n\t\t// node:\r\n\t\t//\t\tid or reference to the element to get or set the property on\r\n\t\t// name:\r\n\t\t//\t\tthe name of the property to get or set.\r\n\t\t// value:\r\n\t\t//\t\tThe value to set for the property\r\n\t\t// returns:\r\n\t\t//\t\twhen used as a getter, the value of the requested property\r\n\t\t//\t\tor null if that attribute does not have a specified or\r\n\t\t//\t\tdefault value;\r\n\t\t//\r\n\t\t//\t\twhen used as a setter, the DOM node\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// get the current value of the \"foo\" property on a node\r\n\t\t//\t|\tdojo.prop(dojo.byId(\"nodeId\"), \"foo\");\r\n\t\t//\t|\t// or we can just pass the id:\r\n\t\t//\t|\tdojo.prop(\"nodeId\", \"foo\");\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// use prop() to set the tab index\r\n\t\t//\t|\tdojo.prop(\"nodeId\", \"tabIndex\", 3);\r\n\t\t//\t|\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\tSet multiple values at once, including event handlers:\r\n\t\t//\t|\tdojo.prop(\"formId\", {\r\n\t\t//\t|\t\t\"foo\": \"bar\",\r\n\t\t//\t|\t\t\"tabIndex\": -1,\r\n\t\t//\t|\t\t\"method\": \"POST\",\r\n\t\t//\t|\t\t\"onsubmit\": function(e){\r\n\t\t//\t|\t\t\t// stop submitting the form. Note that the IE behavior\r\n\t\t//\t|\t\t\t// of returning true or false will have no effect here\r\n\t\t//\t|\t\t\t// since our handler is connect()ed to the built-in\r\n\t\t//\t|\t\t\t// onsubmit behavior and so we need to use\r\n\t\t//\t|\t\t\t// dojo.stopEvent() to ensure that the submission\r\n\t\t//\t|\t\t\t// doesn't proceed.\r\n\t\t//\t|\t\t\tdojo.stopEvent(e);\r\n\t\t//\t|\r\n\t\t//\t|\t\t\t// submit the form with Ajax\r\n\t\t//\t|\t\t\tdojo.xhrPost({ form: \"formId\" });\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tStyle is s special case: Only set with an object hash of styles\r\n\t\t//\t|\tdojo.prop(\"someNode\",{\r\n\t\t//\t|\t\tid:\"bar\",\r\n\t\t//\t|\t\tstyle:{\r\n\t\t//\t|\t\t\twidth:\"200px\", height:\"100px\", color:\"#000\"\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tAgain, only set style as an object hash of styles:\r\n\t\t//\t|\tvar obj = { color:\"#fff\", backgroundColor:\"#000\" };\r\n\t\t//\t|\tdojo.prop(\"someNode\", \"style\", obj);\r\n\t\t//\t|\r\n\t\t//\t|\t// though shorter to use `dojo.style()` in this case:\r\n\t\t//\t|\tdojo.style(\"someNode\", obj);\r\n\r\n\t\tif(arguments.length == 2){\r\n\t\t\treturn prop[typeof name == \"string\" ? \"get\" : \"set\"](node, name);\r\n\t\t}\r\n\t\t// setter\r\n\t\treturn prop.set(node, name, value);\r\n\t};\r\n\r\n\t// mix-in dom-style\r\n\tdojo.getStyle = style.get;\r\n\tdojo.setStyle = style.set;\r\n\tdojo.getComputedStyle = style.getComputedStyle;\r\n\tdojo.__toPixelValue = dojo.toPixelValue = style.toPixelValue;\r\n\r\n\tdojo.style = function(node, name, value){\r\n\t\t// summary:\r\n\t\t//\t\tAccesses styles on a node. If 2 arguments are\r\n\t\t//\t\tpassed, acts as a getter. If 3 arguments are passed, acts\r\n\t\t//\t\tas a setter.\r\n\t\t// description:\r\n\t\t//\t\tGetting the style value uses the computed style for the node, so the value\r\n\t\t//\t\twill be a calculated value, not just the immediate node.style value.\r\n\t\t//\t\tAlso when getting values, use specific style names,\r\n\t\t//\t\tlike \"borderBottomWidth\" instead of \"border\" since compound values like\r\n\t\t//\t\t\"border\" are not necessarily reflected as expected.\r\n\t\t//\t\tIf you want to get node dimensions, use `dojo.marginBox()`,\r\n\t\t//\t\t`dojo.contentBox()` or `dojo.position()`.\r\n\t\t// node: DOMNode|String\r\n\t\t//\t\tid or reference to node to get/set style for\r\n\t\t// name: String|Object?\r\n\t\t//\t\tthe style property to set in DOM-accessor format\r\n\t\t//\t\t(\"borderWidth\", not \"border-width\") or an object with key/value\r\n\t\t//\t\tpairs suitable for setting each property.\r\n\t\t// value: String?\r\n\t\t//\t\tIf passed, sets value on the node for style, handling\r\n\t\t//\t\tcross-browser concerns.  When setting a pixel value,\r\n\t\t//\t\tbe sure to include \"px\" in the value. For instance, top: \"200px\".\r\n\t\t//\t\tOtherwise, in some cases, some browsers will not apply the style.\r\n\t\t// returns:\r\n\t\t//\t\twhen used as a getter, return the computed style of the node if passing in an ID or node,\r\n\t\t//\t\tor return the normalized, computed value for the property when passing in a node and a style property\r\n\t\t// example:\r\n\t\t//\t\tPassing only an ID or node returns the computed style object of\r\n\t\t//\t\tthe node:\r\n\t\t//\t|\tdojo.style(\"thinger\");\r\n\t\t// example:\r\n\t\t//\t\tPassing a node and a style property returns the current\r\n\t\t//\t\tnormalized, computed value for that property:\r\n\t\t//\t|\tdojo.style(\"thinger\", \"opacity\"); // 1 by default\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tPassing a node, a style property, and a value changes the\r\n\t\t//\t\tcurrent display of the node and returns the new computed value\r\n\t\t//\t|\tdojo.style(\"thinger\", \"opacity\", 0.5); // == 0.5\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tPassing a node, an object-style style property sets each of the values in turn and returns the computed style object of the node:\r\n\t\t//\t|\tdojo.style(\"thinger\", {\r\n\t\t//\t|\t\t\"opacity\": 0.5,\r\n\t\t//\t|\t\t\"border\": \"3px solid black\",\r\n\t\t//\t|\t\t\"height\": \"300px\"\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tWhen the CSS style property is hyphenated, the JavaScript property is camelCased.\r\n\t\t//\t\tfont-size becomes fontSize, and so on.\r\n\t\t//\t|\tdojo.style(\"thinger\",{\r\n\t\t//\t|\t\tfontSize:\"14pt\",\r\n\t\t//\t|\t\tletterSpacing:\"1.2em\"\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tdojo/NodeList implements .style() using the same syntax, omitting the \"node\" parameter, calling\r\n\t\t//\t\tdojo.style() on every element of the list. See: `dojo/query` and `dojo/NodeList`\r\n\t\t//\t|\tdojo.query(\".someClassName\").style(\"visibility\",\"hidden\");\r\n\t\t//\t|\t// or\r\n\t\t//\t|\tdojo.query(\"#baz > div\").style({\r\n\t\t//\t|\t\topacity:0.75,\r\n\t\t//\t|\t\tfontSize:\"13pt\"\r\n\t\t//\t|\t});\r\n\r\n\t\tswitch(arguments.length){\r\n\t\t\tcase 1:\r\n\t\t\t\treturn style.get(node);\r\n\t\t\tcase 2:\r\n\t\t\t\treturn style[typeof name == \"string\" ? \"get\" : \"set\"](node, name);\r\n\t\t}\r\n\t\t// setter\r\n\t\treturn style.set(node, name, value);\r\n\t};\r\n\r\n\treturn dojo;\r\n});\r\n"]}
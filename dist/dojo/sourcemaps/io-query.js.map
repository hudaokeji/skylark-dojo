{"version":3,"sources":["io-query.js"],"names":["define","lang","backstop","objectToQuery","map","enc","encodeURIComponent","pairs","name","value","assign","isArray","i","l","length","push","join","queryToObject","str","val","item","dec","decodeURIComponent","qp","split","ret","s","indexOf","slice"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAiB,SAASC,GAKlC,IAAIC,KAEJ,OAICC,cAAe,SAAkCC,GAoB1C,IAAIC,EAAMC,mBAAoBC,KAC9B,IAAI,IAAIC,KAAQJ,EAAI,CAChB,IAAIK,EAAQL,EAAII,GAChB,GAAGC,GAASP,EAASM,GAAM,CACvB,IAAIE,EAASL,EAAIG,GAAQ,IACzB,GAAGP,EAAKU,QAAQF,GACZ,IAAI,IAAIG,EAAI,EAAGC,EAAIJ,EAAMK,OAAQF,EAAIC,IAAKD,EACtCL,EAAMQ,KAAKL,EAASL,EAAII,EAAMG,UAGlCL,EAAMQ,KAAKL,EAASL,EAAII,KAIpC,OAAOF,EAAMS,KAAK,MAGzBC,cAAe,SAAkCC,GAuB1C,IADA,IAA6DV,EAAMW,EACrCC,EAD1BC,EAAMC,mBAAoBC,EAAKL,EAAIM,MAAM,KAAMC,KAC3Cb,EAAI,EAAGC,EAAIU,EAAGT,OAAcF,EAAIC,IAAKD,EAEzC,IADAQ,EAAOG,EAAGX,IACFE,OAAO,CACX,IAAIY,EAAIN,EAAKO,QAAQ,KAClBD,EAAI,GACHlB,EAAOa,EAAID,GACXD,EAAM,KAENX,EAAOa,EAAID,EAAKQ,MAAM,EAAGF,IACzBP,EAAOE,EAAID,EAAKQ,MAAMF,EAAI,KAEP,iBAAbD,EAAIjB,KACViB,EAAIjB,IAASiB,EAAIjB,KAGlBP,EAAKU,QAAQc,EAAIjB,IAChBiB,EAAIjB,GAAMO,KAAKI,GAEfM,EAAIjB,GAAQW,EAIxB,OAAOM","file":"../io-query.js","sourcesContent":["define([\"./_base/lang\"], function(lang){\r\n\r\n// module:\r\n//\t\tdojo/io-query\r\n\r\nvar backstop = {};\r\n\r\nreturn {\r\n// summary:\r\n//\t\tThis module defines query string processing functions.\r\n\r\n\tobjectToQuery: function objectToQuery(/*Object*/ map){\r\n\t\t// summary:\r\n        //\t\ttakes a name/value mapping object and returns a string representing\r\n        //\t\ta URL-encoded version of that object.\r\n        // example:\r\n        //\t\tthis object:\r\n        //\r\n        //\t|\t{\r\n        //\t|\t\tblah: \"blah\",\r\n        //\t|\t\tmulti: [\r\n        //\t|\t\t\t\"thud\",\r\n        //\t|\t\t\t\"thonk\"\r\n        //\t|\t\t]\r\n        //\t|\t};\r\n        //\r\n        //\t\tyields the following query string:\r\n        //\r\n        //\t|\t\"blah=blah&multi=thud&multi=thonk\"\r\n\r\n        // FIXME: need to implement encodeAscii!!\r\n        var enc = encodeURIComponent, pairs = [];\r\n        for(var name in map){\r\n            var value = map[name];\r\n            if(value != backstop[name]){\r\n                var assign = enc(name) + \"=\";\r\n                if(lang.isArray(value)){\r\n                    for(var i = 0, l = value.length; i < l; ++i){\r\n                        pairs.push(assign + enc(value[i]));\r\n                    }\r\n                }else{\r\n                    pairs.push(assign + enc(value));\r\n                }\r\n            }\r\n        }\r\n        return pairs.join(\"&\"); // String\r\n    },\r\n\r\n\tqueryToObject: function queryToObject(/*String*/ str){\r\n        // summary:\r\n        //\t\tCreate an object representing a de-serialized query section of a\r\n        //\t\tURL. Query keys with multiple values are returned in an array.\r\n        //\r\n        // example:\r\n        //\t\tThis string:\r\n        //\r\n        //\t|\t\t\"foo=bar&foo=baz&thinger=%20spaces%20=blah&zonk=blarg&\"\r\n        //\r\n        //\t\tresults in this object structure:\r\n        //\r\n        //\t|\t\t{\r\n        //\t|\t\t\tfoo: [ \"bar\", \"baz\" ],\r\n        //\t|\t\t\tthinger: \" spaces =blah\",\r\n        //\t|\t\t\tzonk: \"blarg\"\r\n        //\t|\t\t}\r\n        //\r\n        //\t\tNote that spaces and other urlencoded entities are correctly\r\n        //\t\thandled.\r\n\r\n        // FIXME: should we grab the URL string if we're not passed one?\r\n        var dec = decodeURIComponent, qp = str.split(\"&\"), ret = {}, name, val;\r\n        for(var i = 0, l = qp.length, item; i < l; ++i){\r\n            item = qp[i];\r\n            if(item.length){\r\n                var s = item.indexOf(\"=\");\r\n                if(s < 0){\r\n                    name = dec(item);\r\n                    val = \"\";\r\n                }else{\r\n                    name = dec(item.slice(0, s));\r\n                    val  = dec(item.slice(s + 1));\r\n                }\r\n                if(typeof ret[name] == \"string\"){ // inline'd type check\r\n                    ret[name] = [ret[name]];\r\n                }\r\n\r\n                if(lang.isArray(ret[name])){\r\n                    ret[name].push(val);\r\n                }else{\r\n                    ret[name] = val;\r\n                }\r\n            }\r\n        }\r\n        return ret; // Object\r\n    }\r\n};\r\n});"]}